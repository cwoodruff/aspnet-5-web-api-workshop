{"config":{"indexing":"full","lang":["en"],"min_search_length":3,"prebuild_index":false,"separator":"[\\s\\-]+"},"docs":[{"location":"","text":"QQ7fd33ALHNrHIShvoJzaQ==;OWWdb3aZcChY6osgF4j+nIggN3vjsaD/x7D8unH3RYYntToOyIZpc8snATH9SUn+QjmW+5J7FpZiR8c48g4aNfMxRCz+oirtK3f1r6ordoXNYGLa9X1IdnmHCMPAvV0x3r4QvLaLfr5FnFQdhsAK3hY59wAT/Sij0x+NK4g4wsMRFjo8FfL1jzeVqwI2ajB7rNGnqjXYTNqavLUR8Dk72tyjCUR0p2IAPGgCxT99f0/xilY+gVVwqPa+W7lrAjL9PQ9wR/Gox+78oimQzeZTKQ5cIF/J1HCMWnDvXQ3kmqJpkw6AOE8KSLCKV4AB5Igd4+OgoUATU4R4lgT6bsouySMJ5FAYlJD/sCEMz53Dt0pHM1RQ3p1r3qLlM/OPYFeEwjTp0RhHPWiuYXHe7UtVGksGktSbXceWpZ/yN2MNhAm4fabi/PQb1wNoVFveje6uMJFxjNF8NoJA5GKEM5zvQgFQNAuXb0HYPW4IhZufhRZNj2tSwhjiBtu26fPTbQM+2WvLIDQCxwvrGrBqa1aJ7aAYDAy+o1HAeVdTRZCkOSvuodBUihU0EX0coF3tE3Rk8Z7GFFPj9FTnuhjLhcnvZwPjdDisNvvHhDcUEL11KMUkSSf9+ScFa5ef2AxI0iRLY4CvZRnFPkaXVpZUH6kazfSIKmO1ztuTd/u7jTq7vlnGH/ytKY8Tt2ArCxw8qMKHw/m5O2J4dJmg/Zw4LVrAW5oUCn5RyJ5maZIrHWqczWjJ3TlgTz5anwsRT3wsHPQXbXWhjJaR+z3RGE6p5S4a8oqoiRCxp5eekpTPP20c6k0=;^ This content is protected with AES encryption. Contact your administrator for access to this page. (function() { var strip_padding = function(padded_content, padding_char) { /* Strips the padding character from decrypted content. */ for (var i = padded_content.length; i > 0; i--) { if (padded_content[i - 1] !== padding_char) { return padded_content.slice(0, i); } } }; var decrypt_content = function(password, iv_b64, ciphertext_b64, padding_char) { /* Decrypts the content from the ciphertext bundle. */ var key = CryptoJS.MD5(password), iv = CryptoJS.enc.Base64.parse(iv_b64), ciphertext = CryptoJS.enc.Base64.parse(ciphertext_b64), bundle = { key: key, iv: iv, ciphertext: ciphertext }; var plaintext = CryptoJS.AES.decrypt(bundle, key, { iv: iv, padding: CryptoJS.pad.NoPadding }); try { return strip_padding(plaintext.toString(CryptoJS.enc.Utf8), padding_char); } catch (err) { // encoding failed; wrong password return false; } }; // Reload scripts src after decryption process var reload_js = function(src) { $('script[src=\"' + src + '\"]').remove(); $('<script>').attr('src', src).appendTo('head'); }; var init_decryptor = function() { var password_input = document.getElementById('mkdocs-content-password'), encrypted_content = document.getElementById('mkdocs-encrypted-content'), decrypted_content = document.getElementById('mkdocs-decrypted-content'), decrypt_form = document.getElementById('mkdocs-decrypt-form'); // Adjust password field width to placeholder length let input = document.getElementById(\"mkdocs-content-password\"); input.setAttribute('size', input.getAttribute('placeholder').length); // Decrypt content var decrypt_action = function() { // grab the ciphertext bundle var parts = encrypted_content.innerHTML.split(';'); // decrypt it var content = decrypt_content( password_input.value, parts[0], parts[1], parts[2] ); if (content) { // success; display the decrypted content decrypted_content.innerHTML = content; encrypted_content.parentNode.removeChild(encrypted_content); // any post processing on the decrypted content should be done here MathJax.typesetPromise() } else { // create HTML element for the inform message var decrypt_msg = document.createElement('p'); decrypt_msg.setAttribute('id', 'mkdocs-decrypt-msg') var node = document.createTextNode('Invalid password.') decrypt_msg.appendChild(node) var mkdocs_decrypt_msg = document.getElementById('mkdocs-decrypt-msg'); // clear all previous failure messages while (mkdocs_decrypt_msg.firstChild) { mkdocs_decrypt_msg.firstChild.remove(); } mkdocs_decrypt_msg.appendChild(decrypt_msg); password_input.value = ''; password_input.focus(); } } password_input.addEventListener('keydown', function(event) { if (event.key === \"Enter\") { event.preventDefault(); decrypt_action(); } }); }; document.addEventListener('DOMContentLoaded', init_decryptor); })();","title":"[Protected] Home"},{"location":"about/","text":"wWS21YrT54gShbjLnL3uyA==;4L1hS9GEcvwXWqamMApoMmfjgNLiKJz2uPkte013TlNhbbpFLSSiCZlaKiznQaD14G6dwqhT+4NNALbrPwWYVxWw0H+UMZh8zoXmlJBmgnb1tTrbRQPCywnKxVLErd0lo/Fg8+DIjgEx0IczDcuAyQpDZfiuXEVAVllkROXKbAWTXjGkgOF+fKkjAgivXBS4pCEWYY7G9a7Ar3vZpIgNqw==;^ This content is protected with AES encryption. Contact your administrator for access to this page. (function() { var strip_padding = function(padded_content, padding_char) { /* Strips the padding character from decrypted content. */ for (var i = padded_content.length; i > 0; i--) { if (padded_content[i - 1] !== padding_char) { return padded_content.slice(0, i); } } }; var decrypt_content = function(password, iv_b64, ciphertext_b64, padding_char) { /* Decrypts the content from the ciphertext bundle. */ var key = CryptoJS.MD5(password), iv = CryptoJS.enc.Base64.parse(iv_b64), ciphertext = CryptoJS.enc.Base64.parse(ciphertext_b64), bundle = { key: key, iv: iv, ciphertext: ciphertext }; var plaintext = CryptoJS.AES.decrypt(bundle, key, { iv: iv, padding: CryptoJS.pad.NoPadding }); try { return strip_padding(plaintext.toString(CryptoJS.enc.Utf8), padding_char); } catch (err) { // encoding failed; wrong password return false; } }; // Reload scripts src after decryption process var reload_js = function(src) { $('script[src=\"' + src + '\"]').remove(); $('<script>').attr('src', src).appendTo('head'); }; var init_decryptor = function() { var password_input = document.getElementById('mkdocs-content-password'), encrypted_content = document.getElementById('mkdocs-encrypted-content'), decrypted_content = document.getElementById('mkdocs-decrypted-content'), decrypt_form = document.getElementById('mkdocs-decrypt-form'); // Adjust password field width to placeholder length let input = document.getElementById(\"mkdocs-content-password\"); input.setAttribute('size', input.getAttribute('placeholder').length); // Decrypt content var decrypt_action = function() { // grab the ciphertext bundle var parts = encrypted_content.innerHTML.split(';'); // decrypt it var content = decrypt_content( password_input.value, parts[0], parts[1], parts[2] ); if (content) { // success; display the decrypted content decrypted_content.innerHTML = content; encrypted_content.parentNode.removeChild(encrypted_content); // any post processing on the decrypted content should be done here MathJax.typesetPromise() } else { // create HTML element for the inform message var decrypt_msg = document.createElement('p'); decrypt_msg.setAttribute('id', 'mkdocs-decrypt-msg') var node = document.createTextNode('Invalid password.') decrypt_msg.appendChild(node) var mkdocs_decrypt_msg = document.getElementById('mkdocs-decrypt-msg'); // clear all previous failure messages while (mkdocs_decrypt_msg.firstChild) { mkdocs_decrypt_msg.firstChild.remove(); } mkdocs_decrypt_msg.appendChild(decrypt_msg); password_input.value = ''; password_input.focus(); } } password_input.addEventListener('keydown', function(event) { if (event.key === \"Enter\") { event.preventDefault(); decrypt_action(); } }); }; document.addEventListener('DOMContentLoaded', init_decryptor); })();","title":"[Protected] About"},{"location":"installing-aspnet-5/","text":"KipJzDDNq+uqqiVo1RMiOg==;KckaeR59BcvQtqmAHLUucBNGKe2sC8Z2xlhlR7vIWh0qegJDL4JeWIH7wTOzX+xBGRKyHut9Ri0OwLoUDq0kJnVc4bEbUMufdLID9Fk5pdn2IUIZq9BlXrXtA5oiwFIZ00YJlXQtPy3dfVX56w9TGqOTayEGAQr0cDMD57/Zs+TCxJ5wUC8Js2MRDbjtWSszpNY+bBvLnyw19nxSaZ8XDsGX7xpDDIePUkzBZlnrbwgckEglgI1cOOY916P919KNVCWjsgYqPolUfGrlRJr5Ubx4tknU1GJyqWrVBb980fX0TUaVV6LkZrIQOV2mLvfaYUZBlUkmjOJv09NOVABO+mYpd88AnyXFpudPPOvF78xgqSL34sgzqvL4tz1IVHPj7fxZtFHOrrRuoIHjdV6iMvuFGKUxLZGfE4G5AVrQaywZMLUtla2NOC4cvrrhM1G0Pbg84Xxo1+O9jtcQI+rN4Y/IRP+yHPT2bD3aDpMHOfXKMn3LA5RuDmKmfeCwGwpdeQ2mIzKhu3KvcSSPvDLD/Aayb74G5nL7lr9P45M0mnN3Q8dMHk/4JbHu2tCI0h+vtY1YWisI357qUBeVKaBPD6o5vArOLSxBKnDUcvUBWkubOylpK9xgOq6mRulcKuP8qsMcWIXMnNUJsxNN8PfUnLP+7qdAnseNoqrdxjzFMmWRepJFb/UFyK4aNKYylnyKdGyozBoTZYrEp3M+8WVwKORvFNjkPhLBlGCDVDXSa4MeYLfkqS2VMQuyOY/cvrsOFBRwZdED5MsGIqzHofvmYJv1bERxuD7eS7FRq+bYSsLjp+0ZOHncFuYe3Qtt2hXi5YQrT77DcsF/7nQgCr1gLcYZEVOhi6cOVcctUyvpOaSUCiT2KXugE/EpsAW4gne3sSl/F3gfvZYawA6jHjC5ao+VAG1fqMkfJGDSw+OwHR83RdrOQ/iXY/EgikRwLJ1eJiRiFsZ06929rCmEQeI132cKzN9eJl5WyGn8R0GLwPMRA88B4R44PSzQayRUM1bGtBJs+N9u2HlxdcwM0HCOvWQw1Hv4xhQYVFBYqzjsAvXTtJBxjZnCHY3OFrfPEklvyvY5b5FGl9n/VfacsnhKFeS3HY03wuwNJPze7236ko11PKGMs0sITJxLoMwTeG5TGzQTjBeJV+emBb9+hpMcQymnpvLaVDWXcAG0i4WCwpBWGRJoEDp5F7cNitbmFwZwfAPHXcim0gS/zyC4VJAr9ESnxSZ/qNe3JYYSAYjT1ax9ybDc6+E3bUuz69KyBegynbbskeIym5+aRvr/8YxTlcSa/c2ti4+RgUAMSufjbpxrF3xWIl2/faXzZ/HgHXXqa9K3xdECq977rCnxhId/H0BnkPrC2dRr2w61+pPLkEHDyyqhGZLN+ML1WFv3iM5vWRsR1aa8/a3YGSNjvfyBw3x/uVwiS2Ns4mpt1r+ZuqBnW3blZD4AO9VysWJurfNfn6RaMnZYtdq4EE3kodVXVMMeUJZrWUc80NcmkYDdONgQ9NYN/mrXT2SSTajvsxix3kD9W/JIOyd4lKWuKDpOnqD1Eogj/ckNo09lGqO88eHZ2QlvoHOj0p6NBB7sdPGzu9VOX8P7UAtOIBMEojH9HgwbPSWafuf+q84B255XXPyGTTgUuodkPHAGhtEw/vXMjeuR0HdJeXtBR3VgyorXNixKneFpR2AVKD5UNGISxL98F/K3Pc4UEC8QJRuMp57R4cIbZnxLq5UqSHBmlIarey73jhjlBVJWAsDjQhig+htvnLdMDjtnkPsVPSlDBLg5WbRuNE8WH3tCdDvRWp9D8HDbn+pkFQPx8jBzU5w64Q6M/CJMciOSKfjZk6p7UgoOg/NgGa+dz0o4QKFoRx1SC6ja2/sA9Jk/2aSsd+tYMd0X7sNDYf06fxaKtrwWTxTWibDc/sGXQkxvnj15uxc0rIUSEC2EhbTmm1ASsDGG7zlqagBlaciiXuvGaS1MsKO/noqBx+6HyTZjS77laP7iL5Lfemm3ZfwwYbTzkFhScpy++E3QDk+7X0rDwLtr0OrKu/AyjhhdfTkwy0iRo6vEFXbmQpzi+VSHMTdDmZWxKzg=;^ This content is protected with AES encryption. Contact your administrator for access to this page. (function() { var strip_padding = function(padded_content, padding_char) { /* Strips the padding character from decrypted content. */ for (var i = padded_content.length; i > 0; i--) { if (padded_content[i - 1] !== padding_char) { return padded_content.slice(0, i); } } }; var decrypt_content = function(password, iv_b64, ciphertext_b64, padding_char) { /* Decrypts the content from the ciphertext bundle. */ var key = CryptoJS.MD5(password), iv = CryptoJS.enc.Base64.parse(iv_b64), ciphertext = CryptoJS.enc.Base64.parse(ciphertext_b64), bundle = { key: key, iv: iv, ciphertext: ciphertext }; var plaintext = CryptoJS.AES.decrypt(bundle, key, { iv: iv, padding: CryptoJS.pad.NoPadding }); try { return strip_padding(plaintext.toString(CryptoJS.enc.Utf8), padding_char); } catch (err) { // encoding failed; wrong password return false; } }; // Reload scripts src after decryption process var reload_js = function(src) { $('script[src=\"' + src + '\"]').remove(); $('<script>').attr('src', src).appendTo('head'); }; var init_decryptor = function() { var password_input = document.getElementById('mkdocs-content-password'), encrypted_content = document.getElementById('mkdocs-encrypted-content'), decrypted_content = document.getElementById('mkdocs-decrypted-content'), decrypt_form = document.getElementById('mkdocs-decrypt-form'); // Adjust password field width to placeholder length let input = document.getElementById(\"mkdocs-content-password\"); input.setAttribute('size', input.getAttribute('placeholder').length); // Decrypt content var decrypt_action = function() { // grab the ciphertext bundle var parts = encrypted_content.innerHTML.split(';'); // decrypt it var content = decrypt_content( password_input.value, parts[0], parts[1], parts[2] ); if (content) { // success; display the decrypted content decrypted_content.innerHTML = content; encrypted_content.parentNode.removeChild(encrypted_content); // any post processing on the decrypted content should be done here MathJax.typesetPromise() } else { // create HTML element for the inform message var decrypt_msg = document.createElement('p'); decrypt_msg.setAttribute('id', 'mkdocs-decrypt-msg') var node = document.createTextNode('Invalid password.') decrypt_msg.appendChild(node) var mkdocs_decrypt_msg = document.getElementById('mkdocs-decrypt-msg'); // clear all previous failure messages while (mkdocs_decrypt_msg.firstChild) { mkdocs_decrypt_msg.firstChild.remove(); } mkdocs_decrypt_msg.appendChild(decrypt_msg); password_input.value = ''; password_input.focus(); } } password_input.addEventListener('keydown', function(event) { if (event.key === \"Enter\") { event.preventDefault(); decrypt_action(); } }); }; document.addEventListener('DOMContentLoaded', init_decryptor); })();","title":"[Protected] Installing ASP.NET 5"},{"location":"installing-mssql/","text":"Y3eiAhtp9QNfdEmoXn+PWA==;xR6GPRcGjt13k5yd6Pim5qFYL1FQFCyRYmCoC74izPAKRzRxJYeWC3jOzpGCCMUp1nP0/knGUgqxCzDhsGTe5LmB4acLZie/fXHsgKhJh1o92KUl9X02UCSrol6HNxWUVikP1B7Y4lneJUyIeYwzUAxJbwHXoismccShppncVOCD4FkQ/scjn5oUAYdhTAA5VFgBT6DsTQbb/u/UJdBRLGMvq92a9EXHSH/gE4YobtmhGZXWLYk1d0hKfaJYKUCJqKnPJZ5qbO6XOI/5BWE9gfty01iuXWKmNba89UvSY1Y=;^ This content is protected with AES encryption. Contact your administrator for access to this page. (function() { var strip_padding = function(padded_content, padding_char) { /* Strips the padding character from decrypted content. */ for (var i = padded_content.length; i > 0; i--) { if (padded_content[i - 1] !== padding_char) { return padded_content.slice(0, i); } } }; var decrypt_content = function(password, iv_b64, ciphertext_b64, padding_char) { /* Decrypts the content from the ciphertext bundle. */ var key = CryptoJS.MD5(password), iv = CryptoJS.enc.Base64.parse(iv_b64), ciphertext = CryptoJS.enc.Base64.parse(ciphertext_b64), bundle = { key: key, iv: iv, ciphertext: ciphertext }; var plaintext = CryptoJS.AES.decrypt(bundle, key, { iv: iv, padding: CryptoJS.pad.NoPadding }); try { return strip_padding(plaintext.toString(CryptoJS.enc.Utf8), padding_char); } catch (err) { // encoding failed; wrong password return false; } }; // Reload scripts src after decryption process var reload_js = function(src) { $('script[src=\"' + src + '\"]').remove(); $('<script>').attr('src', src).appendTo('head'); }; var init_decryptor = function() { var password_input = document.getElementById('mkdocs-content-password'), encrypted_content = document.getElementById('mkdocs-encrypted-content'), decrypted_content = document.getElementById('mkdocs-decrypted-content'), decrypt_form = document.getElementById('mkdocs-decrypt-form'); // Adjust password field width to placeholder length let input = document.getElementById(\"mkdocs-content-password\"); input.setAttribute('size', input.getAttribute('placeholder').length); // Decrypt content var decrypt_action = function() { // grab the ciphertext bundle var parts = encrypted_content.innerHTML.split(';'); // decrypt it var content = decrypt_content( password_input.value, parts[0], parts[1], parts[2] ); if (content) { // success; display the decrypted content decrypted_content.innerHTML = content; encrypted_content.parentNode.removeChild(encrypted_content); // any post processing on the decrypted content should be done here MathJax.typesetPromise() } else { // create HTML element for the inform message var decrypt_msg = document.createElement('p'); decrypt_msg.setAttribute('id', 'mkdocs-decrypt-msg') var node = document.createTextNode('Invalid password.') decrypt_msg.appendChild(node) var mkdocs_decrypt_msg = document.getElementById('mkdocs-decrypt-msg'); // clear all previous failure messages while (mkdocs_decrypt_msg.firstChild) { mkdocs_decrypt_msg.firstChild.remove(); } mkdocs_decrypt_msg.appendChild(decrypt_msg); password_input.value = ''; password_input.focus(); } } password_input.addEventListener('keydown', function(event) { if (event.key === \"Enter\") { event.preventDefault(); decrypt_action(); } }); }; document.addEventListener('DOMContentLoaded', init_decryptor); })();","title":"[Protected] Installing SQL Server"},{"location":"installing-postman/","text":"UPSWZV88JxFmj2zJDYOTYw==;e+IIs+B4Klsx5G//A1flt4rok5SWpCvXbna/i9yqBkh3TKXsJjhePN/8Eg2lWFZ1SFIMKeSGjA12ohVJKmtSw0qNLhs3NDxtdQRFXcgQLv42iT9H3n3KhJjUjLcEH6Fy+Sz9p65B1cwYCglzGz8R94U/LIkkdOwkZX+mohaZeIDxMOR42wrywrKiQBuzTm+UQflGITcq+TX91fcP5nURkpxUZ+Uh/oR92DdXi58NX240fm9Djt4bKcrHJR/K+Q8f;^ This content is protected with AES encryption. Contact your administrator for access to this page. (function() { var strip_padding = function(padded_content, padding_char) { /* Strips the padding character from decrypted content. */ for (var i = padded_content.length; i > 0; i--) { if (padded_content[i - 1] !== padding_char) { return padded_content.slice(0, i); } } }; var decrypt_content = function(password, iv_b64, ciphertext_b64, padding_char) { /* Decrypts the content from the ciphertext bundle. */ var key = CryptoJS.MD5(password), iv = CryptoJS.enc.Base64.parse(iv_b64), ciphertext = CryptoJS.enc.Base64.parse(ciphertext_b64), bundle = { key: key, iv: iv, ciphertext: ciphertext }; var plaintext = CryptoJS.AES.decrypt(bundle, key, { iv: iv, padding: CryptoJS.pad.NoPadding }); try { return strip_padding(plaintext.toString(CryptoJS.enc.Utf8), padding_char); } catch (err) { // encoding failed; wrong password return false; } }; // Reload scripts src after decryption process var reload_js = function(src) { $('script[src=\"' + src + '\"]').remove(); $('<script>').attr('src', src).appendTo('head'); }; var init_decryptor = function() { var password_input = document.getElementById('mkdocs-content-password'), encrypted_content = document.getElementById('mkdocs-encrypted-content'), decrypted_content = document.getElementById('mkdocs-decrypted-content'), decrypt_form = document.getElementById('mkdocs-decrypt-form'); // Adjust password field width to placeholder length let input = document.getElementById(\"mkdocs-content-password\"); input.setAttribute('size', input.getAttribute('placeholder').length); // Decrypt content var decrypt_action = function() { // grab the ciphertext bundle var parts = encrypted_content.innerHTML.split(';'); // decrypt it var content = decrypt_content( password_input.value, parts[0], parts[1], parts[2] ); if (content) { // success; display the decrypted content decrypted_content.innerHTML = content; encrypted_content.parentNode.removeChild(encrypted_content); // any post processing on the decrypted content should be done here MathJax.typesetPromise() } else { // create HTML element for the inform message var decrypt_msg = document.createElement('p'); decrypt_msg.setAttribute('id', 'mkdocs-decrypt-msg') var node = document.createTextNode('Invalid password.') decrypt_msg.appendChild(node) var mkdocs_decrypt_msg = document.getElementById('mkdocs-decrypt-msg'); // clear all previous failure messages while (mkdocs_decrypt_msg.firstChild) { mkdocs_decrypt_msg.firstChild.remove(); } mkdocs_decrypt_msg.appendChild(decrypt_msg); password_input.value = ''; password_input.focus(); } } password_input.addEventListener('keydown', function(event) { if (event.key === \"Enter\") { event.preventDefault(); decrypt_action(); } }); }; document.addEventListener('DOMContentLoaded', init_decryptor); })();","title":"[Protected] Installing Postman"},{"location":"introduction/","text":"vIgSIbsS+GzFnWUi05nI7g==;5HWG/OhXRShX9yH1RixosFdhcPlVv68l9mkj05qW9S8qlu+5UZZz430/EQKvGtfFxOZ9Rkb75Utu3HCT28G8o4g246KRkQHfGMzj9sxEm5Bv0uviovA/rESEWGUf62pzfpUc0hGq4RTeoYz22JYRPGdVzBbg+uQ6zWUr7Prxk95HBhhsQK+mWvmCFBCM5LidSTT30MwZbnQ5Fl2gelUY3GmnSg3iXNVVMH+W/XazQVCBQhNyIQ/YGkYYJSfu55mu;^ This content is protected with AES encryption. Contact your administrator for access to this page. (function() { var strip_padding = function(padded_content, padding_char) { /* Strips the padding character from decrypted content. */ for (var i = padded_content.length; i > 0; i--) { if (padded_content[i - 1] !== padding_char) { return padded_content.slice(0, i); } } }; var decrypt_content = function(password, iv_b64, ciphertext_b64, padding_char) { /* Decrypts the content from the ciphertext bundle. */ var key = CryptoJS.MD5(password), iv = CryptoJS.enc.Base64.parse(iv_b64), ciphertext = CryptoJS.enc.Base64.parse(ciphertext_b64), bundle = { key: key, iv: iv, ciphertext: ciphertext }; var plaintext = CryptoJS.AES.decrypt(bundle, key, { iv: iv, padding: CryptoJS.pad.NoPadding }); try { return strip_padding(plaintext.toString(CryptoJS.enc.Utf8), padding_char); } catch (err) { // encoding failed; wrong password return false; } }; // Reload scripts src after decryption process var reload_js = function(src) { $('script[src=\"' + src + '\"]').remove(); $('<script>').attr('src', src).appendTo('head'); }; var init_decryptor = function() { var password_input = document.getElementById('mkdocs-content-password'), encrypted_content = document.getElementById('mkdocs-encrypted-content'), decrypted_content = document.getElementById('mkdocs-decrypted-content'), decrypt_form = document.getElementById('mkdocs-decrypt-form'); // Adjust password field width to placeholder length let input = document.getElementById(\"mkdocs-content-password\"); input.setAttribute('size', input.getAttribute('placeholder').length); // Decrypt content var decrypt_action = function() { // grab the ciphertext bundle var parts = encrypted_content.innerHTML.split(';'); // decrypt it var content = decrypt_content( password_input.value, parts[0], parts[1], parts[2] ); if (content) { // success; display the decrypted content decrypted_content.innerHTML = content; encrypted_content.parentNode.removeChild(encrypted_content); // any post processing on the decrypted content should be done here MathJax.typesetPromise() } else { // create HTML element for the inform message var decrypt_msg = document.createElement('p'); decrypt_msg.setAttribute('id', 'mkdocs-decrypt-msg') var node = document.createTextNode('Invalid password.') decrypt_msg.appendChild(node) var mkdocs_decrypt_msg = document.getElementById('mkdocs-decrypt-msg'); // clear all previous failure messages while (mkdocs_decrypt_msg.firstChild) { mkdocs_decrypt_msg.firstChild.remove(); } mkdocs_decrypt_msg.appendChild(decrypt_msg); password_input.value = ''; password_input.focus(); } } password_input.addEventListener('keydown', function(event) { if (event.key === \"Enter\") { event.preventDefault(); decrypt_action(); } }); }; document.addEventListener('DOMContentLoaded', init_decryptor); })();","title":"[Protected] Introduction"},{"location":"required-tech/","text":"w+yJGag4M2EjmykHxmSBqw==;4/+kgSnkV3afV2961oJw/2d5ST+3I40h9ZsH+a19d9jzOFirrK3gP8hlHotwDjOI3uGG+I3I2c9qZLzMVtZz2kVhif+uAb6MiAAyBaCuG/GPLd8K6wZc2SKbu9TavS2LVKa0RzYHrC3OTeB7tpf+pBCOaNQ/zkPFIXF3yc7o9cAa1DlHeUh0rQfUqA61r1/E2PluPaYw4zru53OA7RDZA17Sm8cBhjxA+swZavAzmYXdF98+U0xfiYxfL+Ql/FiUMvIbZ2CHNPXvMqSe5CBNpIUHKZHhkd7xPESXbRFQLOfpXpnZlJ0sYVdrs6ikO7MJZkEN8n4830pFaG3+n/wG4P67TiOylpCaDtsFgORVqFi9Zm9H2kjae+GVE0EIE+5Jq85y+54UXlEQ4oqIWI3z7xgjT3GVOd9QYJA3sYyCVY3d6kqq5LXBkBcfbXEkRlrJsyh34zCoe1qKVDwvWuA6KnYsUrGztKncaDzA9p/wpJUaCHne7ZFdp1Knwpxw9DkRkN2ev0Rw8Ey9WBkUoEvKe8bmJHampwCZdA7QTodQlctV2iuzq0I1EsQvw6sk6bt33o+H6RCzg7FMGrYUZoyluFYWmFIKIqYSMHqBRWy6xktUUOCS+KQv2S2XAw6EuWVzwcSfm6jTA9IG1rgJPJgVskh5wU9mpbs9YJODgjezJEMaTdzCElRt9fjy5vIVYfUCobZHGybVcgL0LDXHRGcD7di1twE/K1od5oucjzOKCi5C6ulFvNAlD9khzXwS6SSshbV6W08nEBBoj6i4n3B1XDnb2WVE5y7Oazg8N/28Zwe5Ouez3BRK2T0q/cV9fhL07Ueies99v5jvf/5i3Fnl1q4UOOBCg/98Jap5f8XO8/2b7EmUlJdca+L4FbnTB6N7jhpZ2a0j8AP4K/EC4bcMZWqkSELdEkJS8TT9wcsQhlKPqCGix3j+Y9sC6UHI/RzXRvMOof2rl3IlJw4YNHv+vw==;^ This content is protected with AES encryption. Contact your administrator for access to this page. (function() { var strip_padding = function(padded_content, padding_char) { /* Strips the padding character from decrypted content. */ for (var i = padded_content.length; i > 0; i--) { if (padded_content[i - 1] !== padding_char) { return padded_content.slice(0, i); } } }; var decrypt_content = function(password, iv_b64, ciphertext_b64, padding_char) { /* Decrypts the content from the ciphertext bundle. */ var key = CryptoJS.MD5(password), iv = CryptoJS.enc.Base64.parse(iv_b64), ciphertext = CryptoJS.enc.Base64.parse(ciphertext_b64), bundle = { key: key, iv: iv, ciphertext: ciphertext }; var plaintext = CryptoJS.AES.decrypt(bundle, key, { iv: iv, padding: CryptoJS.pad.NoPadding }); try { return strip_padding(plaintext.toString(CryptoJS.enc.Utf8), padding_char); } catch (err) { // encoding failed; wrong password return false; } }; // Reload scripts src after decryption process var reload_js = function(src) { $('script[src=\"' + src + '\"]').remove(); $('<script>').attr('src', src).appendTo('head'); }; var init_decryptor = function() { var password_input = document.getElementById('mkdocs-content-password'), encrypted_content = document.getElementById('mkdocs-encrypted-content'), decrypted_content = document.getElementById('mkdocs-decrypted-content'), decrypt_form = document.getElementById('mkdocs-decrypt-form'); // Adjust password field width to placeholder length let input = document.getElementById(\"mkdocs-content-password\"); input.setAttribute('size', input.getAttribute('placeholder').length); // Decrypt content var decrypt_action = function() { // grab the ciphertext bundle var parts = encrypted_content.innerHTML.split(';'); // decrypt it var content = decrypt_content( password_input.value, parts[0], parts[1], parts[2] ); if (content) { // success; display the decrypted content decrypted_content.innerHTML = content; encrypted_content.parentNode.removeChild(encrypted_content); // any post processing on the decrypted content should be done here MathJax.typesetPromise() } else { // create HTML element for the inform message var decrypt_msg = document.createElement('p'); decrypt_msg.setAttribute('id', 'mkdocs-decrypt-msg') var node = document.createTextNode('Invalid password.') decrypt_msg.appendChild(node) var mkdocs_decrypt_msg = document.getElementById('mkdocs-decrypt-msg'); // clear all previous failure messages while (mkdocs_decrypt_msg.firstChild) { mkdocs_decrypt_msg.firstChild.remove(); } mkdocs_decrypt_msg.appendChild(decrypt_msg); password_input.value = ''; password_input.focus(); } } password_input.addEventListener('keydown', function(event) { if (event.key === \"Enter\") { event.preventDefault(); decrypt_action(); } }); }; document.addEventListener('DOMContentLoaded', init_decryptor); })();","title":"[Protected] Required Technology"},{"location":"setting-up-azure-sql/","text":"mXwbnkX/ohzOnxQaqVtZhw==;t7207NlZhzfZftxI8PG7h6T+jPztgNkFmiC7feAo5elSKNEmdt2WJP6OOyh+SuSr+lpVVOKdwAdHadJbLnrpx5J1dLYGIrbIccY+/oFF4EW9K3gsb+jSoWZqwWkrJsw6voyz9uS6IMcmzSXZjaBfoz8izOwWrFPK+BaDf6h5smuVXUMBP3jFUsdRjUHwnLuFibxvuovtha+iIrWEAJ21x7awV+TR30xD8SvFptYNyP5zVZkNVnHml6S67RtXxG8Uq1UHcfnblFarzkbbmPDVMENoRPF+GBRbiT92SA919EPnCwg06JMFWdwC24VMDM1P4qJFipyRYaaE7nkxBkyqQw==;^ This content is protected with AES encryption. Contact your administrator for access to this page. (function() { var strip_padding = function(padded_content, padding_char) { /* Strips the padding character from decrypted content. */ for (var i = padded_content.length; i > 0; i--) { if (padded_content[i - 1] !== padding_char) { return padded_content.slice(0, i); } } }; var decrypt_content = function(password, iv_b64, ciphertext_b64, padding_char) { /* Decrypts the content from the ciphertext bundle. */ var key = CryptoJS.MD5(password), iv = CryptoJS.enc.Base64.parse(iv_b64), ciphertext = CryptoJS.enc.Base64.parse(ciphertext_b64), bundle = { key: key, iv: iv, ciphertext: ciphertext }; var plaintext = CryptoJS.AES.decrypt(bundle, key, { iv: iv, padding: CryptoJS.pad.NoPadding }); try { return strip_padding(plaintext.toString(CryptoJS.enc.Utf8), padding_char); } catch (err) { // encoding failed; wrong password return false; } }; // Reload scripts src after decryption process var reload_js = function(src) { $('script[src=\"' + src + '\"]').remove(); $('<script>').attr('src', src).appendTo('head'); }; var init_decryptor = function() { var password_input = document.getElementById('mkdocs-content-password'), encrypted_content = document.getElementById('mkdocs-encrypted-content'), decrypted_content = document.getElementById('mkdocs-decrypted-content'), decrypt_form = document.getElementById('mkdocs-decrypt-form'); // Adjust password field width to placeholder length let input = document.getElementById(\"mkdocs-content-password\"); input.setAttribute('size', input.getAttribute('placeholder').length); // Decrypt content var decrypt_action = function() { // grab the ciphertext bundle var parts = encrypted_content.innerHTML.split(';'); // decrypt it var content = decrypt_content( password_input.value, parts[0], parts[1], parts[2] ); if (content) { // success; display the decrypted content decrypted_content.innerHTML = content; encrypted_content.parentNode.removeChild(encrypted_content); // any post processing on the decrypted content should be done here MathJax.typesetPromise() } else { // create HTML element for the inform message var decrypt_msg = document.createElement('p'); decrypt_msg.setAttribute('id', 'mkdocs-decrypt-msg') var node = document.createTextNode('Invalid password.') decrypt_msg.appendChild(node) var mkdocs_decrypt_msg = document.getElementById('mkdocs-decrypt-msg'); // clear all previous failure messages while (mkdocs_decrypt_msg.firstChild) { mkdocs_decrypt_msg.firstChild.remove(); } mkdocs_decrypt_msg.appendChild(decrypt_msg); password_input.value = ''; password_input.focus(); } } password_input.addEventListener('keydown', function(event) { if (event.key === \"Enter\") { event.preventDefault(); decrypt_action(); } }); }; document.addEventListener('DOMContentLoaded', init_decryptor); })();","title":"[Protected] Setting up Azure SQL"},{"location":"Developing%20a%20Domain%20Driven%20Architecture%20for%20ASP.NET%20Core%20Web%20API/domain-drive-api/","text":"auFvojsQoN8bmtIZtV0w4A==;Nhp/Uh52sy4MZUbyHM/89yCQ7eZUQ3/NnUbTbYyuxddJ2DnokUgmqh6p3stvPM/Dya5PIppFVLOh5Vm7ttuccY11IFgw4xYYICZkEMqHYG5lElXTI/gAMlnjMRJUTf7NgvZQICXs4F2u3w8kMY24jC5se/jtKRC5kAzJKR6z1vxbrDcgnZz9rmkOX0HUH1RHjxSdYsXGeqWOTwgw4+Som2QPyZu17FMIp8ryg4DaWzWhwTef/sI31FI9Hs29zv1s;^ This content is protected with AES encryption. Contact your administrator for access to this page. (function() { var strip_padding = function(padded_content, padding_char) { /* Strips the padding character from decrypted content. */ for (var i = padded_content.length; i > 0; i--) { if (padded_content[i - 1] !== padding_char) { return padded_content.slice(0, i); } } }; var decrypt_content = function(password, iv_b64, ciphertext_b64, padding_char) { /* Decrypts the content from the ciphertext bundle. */ var key = CryptoJS.MD5(password), iv = CryptoJS.enc.Base64.parse(iv_b64), ciphertext = CryptoJS.enc.Base64.parse(ciphertext_b64), bundle = { key: key, iv: iv, ciphertext: ciphertext }; var plaintext = CryptoJS.AES.decrypt(bundle, key, { iv: iv, padding: CryptoJS.pad.NoPadding }); try { return strip_padding(plaintext.toString(CryptoJS.enc.Utf8), padding_char); } catch (err) { // encoding failed; wrong password return false; } }; // Reload scripts src after decryption process var reload_js = function(src) { $('script[src=\"' + src + '\"]').remove(); $('<script>').attr('src', src).appendTo('head'); }; var init_decryptor = function() { var password_input = document.getElementById('mkdocs-content-password'), encrypted_content = document.getElementById('mkdocs-encrypted-content'), decrypted_content = document.getElementById('mkdocs-decrypted-content'), decrypt_form = document.getElementById('mkdocs-decrypt-form'); // Adjust password field width to placeholder length let input = document.getElementById(\"mkdocs-content-password\"); input.setAttribute('size', input.getAttribute('placeholder').length); // Decrypt content var decrypt_action = function() { // grab the ciphertext bundle var parts = encrypted_content.innerHTML.split(';'); // decrypt it var content = decrypt_content( password_input.value, parts[0], parts[1], parts[2] ); if (content) { // success; display the decrypted content decrypted_content.innerHTML = content; encrypted_content.parentNode.removeChild(encrypted_content); // any post processing on the decrypted content should be done here MathJax.typesetPromise() } else { // create HTML element for the inform message var decrypt_msg = document.createElement('p'); decrypt_msg.setAttribute('id', 'mkdocs-decrypt-msg') var node = document.createTextNode('Invalid password.') decrypt_msg.appendChild(node) var mkdocs_decrypt_msg = document.getElementById('mkdocs-decrypt-msg'); // clear all previous failure messages while (mkdocs_decrypt_msg.firstChild) { mkdocs_decrypt_msg.firstChild.remove(); } mkdocs_decrypt_msg.appendChild(decrypt_msg); password_input.value = ''; password_input.focus(); } } password_input.addEventListener('keydown', function(event) { if (event.key === \"Enter\") { event.preventDefault(); decrypt_action(); } }); }; document.addEventListener('DOMContentLoaded', init_decryptor); })();","title":"[Protected] Designing the Domain-Driven API"},{"location":"Developing%20a%20Domain%20Driven%20Architecture%20for%20ASP.NET%20Core%20Web%20API/domain-drive-app-layer/","text":"4bOAmlfpcYNtn1tkvVXWJw==;eYta+tT2J7/XgVQFXZG/g3iM5E8awaHkipo4YmnrxYuhsPnNFseuruMVU+MZazC3sV1l78H+iOWMYGe4qDec4V9tlNKmJw0RlS/OrudZeJwLAQiUApU6ZAz+nibLTSHRrWkZi2DbE4yygOfYWcsn8goRFmHmiOoNvxgO05foD3T7TvoN2FniIUaU5V7Ii7pp3OGQN9DfYsAAS+3Sb2/nF+/yBavhjGq/nfq1hD97FQlvzR7wQeE5kKWxpi5SV43dE6zLzRRltxgPuK5S/w2DFWCNYVL6axRnNYkAAbVnjAY=;^ This content is protected with AES encryption. Contact your administrator for access to this page. (function() { var strip_padding = function(padded_content, padding_char) { /* Strips the padding character from decrypted content. */ for (var i = padded_content.length; i > 0; i--) { if (padded_content[i - 1] !== padding_char) { return padded_content.slice(0, i); } } }; var decrypt_content = function(password, iv_b64, ciphertext_b64, padding_char) { /* Decrypts the content from the ciphertext bundle. */ var key = CryptoJS.MD5(password), iv = CryptoJS.enc.Base64.parse(iv_b64), ciphertext = CryptoJS.enc.Base64.parse(ciphertext_b64), bundle = { key: key, iv: iv, ciphertext: ciphertext }; var plaintext = CryptoJS.AES.decrypt(bundle, key, { iv: iv, padding: CryptoJS.pad.NoPadding }); try { return strip_padding(plaintext.toString(CryptoJS.enc.Utf8), padding_char); } catch (err) { // encoding failed; wrong password return false; } }; // Reload scripts src after decryption process var reload_js = function(src) { $('script[src=\"' + src + '\"]').remove(); $('<script>').attr('src', src).appendTo('head'); }; var init_decryptor = function() { var password_input = document.getElementById('mkdocs-content-password'), encrypted_content = document.getElementById('mkdocs-encrypted-content'), decrypted_content = document.getElementById('mkdocs-decrypted-content'), decrypt_form = document.getElementById('mkdocs-decrypt-form'); // Adjust password field width to placeholder length let input = document.getElementById(\"mkdocs-content-password\"); input.setAttribute('size', input.getAttribute('placeholder').length); // Decrypt content var decrypt_action = function() { // grab the ciphertext bundle var parts = encrypted_content.innerHTML.split(';'); // decrypt it var content = decrypt_content( password_input.value, parts[0], parts[1], parts[2] ); if (content) { // success; display the decrypted content decrypted_content.innerHTML = content; encrypted_content.parentNode.removeChild(encrypted_content); // any post processing on the decrypted content should be done here MathJax.typesetPromise() } else { // create HTML element for the inform message var decrypt_msg = document.createElement('p'); decrypt_msg.setAttribute('id', 'mkdocs-decrypt-msg') var node = document.createTextNode('Invalid password.') decrypt_msg.appendChild(node) var mkdocs_decrypt_msg = document.getElementById('mkdocs-decrypt-msg'); // clear all previous failure messages while (mkdocs_decrypt_msg.firstChild) { mkdocs_decrypt_msg.firstChild.remove(); } mkdocs_decrypt_msg.appendChild(decrypt_msg); password_input.value = ''; password_input.focus(); } } password_input.addEventListener('keydown', function(event) { if (event.key === \"Enter\") { event.preventDefault(); decrypt_action(); } }); }; document.addEventListener('DOMContentLoaded', init_decryptor); })();","title":"[Protected] Developing the API Application Layer"},{"location":"Developing%20a%20Domain%20Driven%20Architecture%20for%20ASP.NET%20Core%20Web%20API/domain-drive-domain/","text":"YarzymeT1/iqyNIdDTSzUA==;zRfPlurd/RKi3BLR+yWCkccvp0Joe19csYevG+9Hyx4/+ShrTWW0DxNl1ojAlX6XaDNGaDaz4wy80KshyOu2wKdksiMqWTXDRDNjCHem2hLPTEcEMhUXrGvC63fAzaGVx7gRS6zq2y/BLc5POO82VMnawJK38eJmy0c8MYU0OZKBI0vWTGu/V2NHV9J/aASLOYgMBFn5wByThHwN4rvg+g==;^ This content is protected with AES encryption. Contact your administrator for access to this page. (function() { var strip_padding = function(padded_content, padding_char) { /* Strips the padding character from decrypted content. */ for (var i = padded_content.length; i > 0; i--) { if (padded_content[i - 1] !== padding_char) { return padded_content.slice(0, i); } } }; var decrypt_content = function(password, iv_b64, ciphertext_b64, padding_char) { /* Decrypts the content from the ciphertext bundle. */ var key = CryptoJS.MD5(password), iv = CryptoJS.enc.Base64.parse(iv_b64), ciphertext = CryptoJS.enc.Base64.parse(ciphertext_b64), bundle = { key: key, iv: iv, ciphertext: ciphertext }; var plaintext = CryptoJS.AES.decrypt(bundle, key, { iv: iv, padding: CryptoJS.pad.NoPadding }); try { return strip_padding(plaintext.toString(CryptoJS.enc.Utf8), padding_char); } catch (err) { // encoding failed; wrong password return false; } }; // Reload scripts src after decryption process var reload_js = function(src) { $('script[src=\"' + src + '\"]').remove(); $('<script>').attr('src', src).appendTo('head'); }; var init_decryptor = function() { var password_input = document.getElementById('mkdocs-content-password'), encrypted_content = document.getElementById('mkdocs-encrypted-content'), decrypted_content = document.getElementById('mkdocs-decrypted-content'), decrypt_form = document.getElementById('mkdocs-decrypt-form'); // Adjust password field width to placeholder length let input = document.getElementById(\"mkdocs-content-password\"); input.setAttribute('size', input.getAttribute('placeholder').length); // Decrypt content var decrypt_action = function() { // grab the ciphertext bundle var parts = encrypted_content.innerHTML.split(';'); // decrypt it var content = decrypt_content( password_input.value, parts[0], parts[1], parts[2] ); if (content) { // success; display the decrypted content decrypted_content.innerHTML = content; encrypted_content.parentNode.removeChild(encrypted_content); // any post processing on the decrypted content should be done here MathJax.typesetPromise() } else { // create HTML element for the inform message var decrypt_msg = document.createElement('p'); decrypt_msg.setAttribute('id', 'mkdocs-decrypt-msg') var node = document.createTextNode('Invalid password.') decrypt_msg.appendChild(node) var mkdocs_decrypt_msg = document.getElementById('mkdocs-decrypt-msg'); // clear all previous failure messages while (mkdocs_decrypt_msg.firstChild) { mkdocs_decrypt_msg.firstChild.remove(); } mkdocs_decrypt_msg.appendChild(decrypt_msg); password_input.value = ''; password_input.focus(); } } password_input.addEventListener('keydown', function(event) { if (event.key === \"Enter\") { event.preventDefault(); decrypt_action(); } }); }; document.addEventListener('DOMContentLoaded', init_decryptor); })();","title":"[Protected] Developing the API Domain"},{"location":"Developing%20a%20Domain%20Driven%20Architecture%20for%20ASP.NET%20Core%20Web%20API/domain-drive-endpoints/","text":"1hWd3sRrtnuO3fViRSiWEg==;Hcb77K8zz3JD2rHp8C4/GlegQ9I+EzaA1T4De1uTyAurWhbWre8WXwFU7waR3RVIL8NrIbHwIIHIV0CPpz+ISVfDm8GO+px6cqTySob9bPiW+E9OnR+2VWd1FPOaQ7f7oRZbaClfeDrdSDGRmcON5Bl8sONkav3Rmk10RJDOKctehPAEgCr68Bgs+ybCXVXhSQ3xRDd8iQOjqdQaWYuYKq9CRzSxtJvo7vufKQMMwICQ20PBnkQbXh9/lJDfl3bI;^ This content is protected with AES encryption. Contact your administrator for access to this page. (function() { var strip_padding = function(padded_content, padding_char) { /* Strips the padding character from decrypted content. */ for (var i = padded_content.length; i > 0; i--) { if (padded_content[i - 1] !== padding_char) { return padded_content.slice(0, i); } } }; var decrypt_content = function(password, iv_b64, ciphertext_b64, padding_char) { /* Decrypts the content from the ciphertext bundle. */ var key = CryptoJS.MD5(password), iv = CryptoJS.enc.Base64.parse(iv_b64), ciphertext = CryptoJS.enc.Base64.parse(ciphertext_b64), bundle = { key: key, iv: iv, ciphertext: ciphertext }; var plaintext = CryptoJS.AES.decrypt(bundle, key, { iv: iv, padding: CryptoJS.pad.NoPadding }); try { return strip_padding(plaintext.toString(CryptoJS.enc.Utf8), padding_char); } catch (err) { // encoding failed; wrong password return false; } }; // Reload scripts src after decryption process var reload_js = function(src) { $('script[src=\"' + src + '\"]').remove(); $('<script>').attr('src', src).appendTo('head'); }; var init_decryptor = function() { var password_input = document.getElementById('mkdocs-content-password'), encrypted_content = document.getElementById('mkdocs-encrypted-content'), decrypted_content = document.getElementById('mkdocs-decrypted-content'), decrypt_form = document.getElementById('mkdocs-decrypt-form'); // Adjust password field width to placeholder length let input = document.getElementById(\"mkdocs-content-password\"); input.setAttribute('size', input.getAttribute('placeholder').length); // Decrypt content var decrypt_action = function() { // grab the ciphertext bundle var parts = encrypted_content.innerHTML.split(';'); // decrypt it var content = decrypt_content( password_input.value, parts[0], parts[1], parts[2] ); if (content) { // success; display the decrypted content decrypted_content.innerHTML = content; encrypted_content.parentNode.removeChild(encrypted_content); // any post processing on the decrypted content should be done here MathJax.typesetPromise() } else { // create HTML element for the inform message var decrypt_msg = document.createElement('p'); decrypt_msg.setAttribute('id', 'mkdocs-decrypt-msg') var node = document.createTextNode('Invalid password.') decrypt_msg.appendChild(node) var mkdocs_decrypt_msg = document.getElementById('mkdocs-decrypt-msg'); // clear all previous failure messages while (mkdocs_decrypt_msg.firstChild) { mkdocs_decrypt_msg.firstChild.remove(); } mkdocs_decrypt_msg.appendChild(decrypt_msg); password_input.value = ''; password_input.focus(); } } password_input.addEventListener('keydown', function(event) { if (event.key === \"Enter\") { event.preventDefault(); decrypt_action(); } }); }; document.addEventListener('DOMContentLoaded', init_decryptor); })();","title":"[Protected] Developing the API Endpoints"},{"location":"Developing%20a%20Domain%20Driven%20Architecture%20for%20ASP.NET%20Core%20Web%20API/domain-drive-infrastructure/","text":"3iE+ejuwy26KfWVsrY+XRA==;KgDUZX1YMe9TAwdDUuUjTrnNfPKz7xbbnxraJA8TweKEnBNU2xTEX/V8RLu41y3sgQilMS7HNJZRQLdFv11mkFEnJT5+lD10jSD5SoeKfAisfxzDcLIFXe3EN1PmCUw/5F89nxVG1Pph2aOyUOI88VVSjssZjnKdDbR0xgxzNBpy1ssjGRTUYdEa8r2hKg2pHHB49CJtaq/m1GLXP2m4X5SMXe5DxsKAVYAuI/HSCi5wVL+tM4EGvNDjLxPns/nNW8QEBaR1WByz9QEx6KZ9RQEm8XTkaNeTwuEddwqF8LE=;^ This content is protected with AES encryption. Contact your administrator for access to this page. (function() { var strip_padding = function(padded_content, padding_char) { /* Strips the padding character from decrypted content. */ for (var i = padded_content.length; i > 0; i--) { if (padded_content[i - 1] !== padding_char) { return padded_content.slice(0, i); } } }; var decrypt_content = function(password, iv_b64, ciphertext_b64, padding_char) { /* Decrypts the content from the ciphertext bundle. */ var key = CryptoJS.MD5(password), iv = CryptoJS.enc.Base64.parse(iv_b64), ciphertext = CryptoJS.enc.Base64.parse(ciphertext_b64), bundle = { key: key, iv: iv, ciphertext: ciphertext }; var plaintext = CryptoJS.AES.decrypt(bundle, key, { iv: iv, padding: CryptoJS.pad.NoPadding }); try { return strip_padding(plaintext.toString(CryptoJS.enc.Utf8), padding_char); } catch (err) { // encoding failed; wrong password return false; } }; // Reload scripts src after decryption process var reload_js = function(src) { $('script[src=\"' + src + '\"]').remove(); $('<script>').attr('src', src).appendTo('head'); }; var init_decryptor = function() { var password_input = document.getElementById('mkdocs-content-password'), encrypted_content = document.getElementById('mkdocs-encrypted-content'), decrypted_content = document.getElementById('mkdocs-decrypted-content'), decrypt_form = document.getElementById('mkdocs-decrypt-form'); // Adjust password field width to placeholder length let input = document.getElementById(\"mkdocs-content-password\"); input.setAttribute('size', input.getAttribute('placeholder').length); // Decrypt content var decrypt_action = function() { // grab the ciphertext bundle var parts = encrypted_content.innerHTML.split(';'); // decrypt it var content = decrypt_content( password_input.value, parts[0], parts[1], parts[2] ); if (content) { // success; display the decrypted content decrypted_content.innerHTML = content; encrypted_content.parentNode.removeChild(encrypted_content); // any post processing on the decrypted content should be done here MathJax.typesetPromise() } else { // create HTML element for the inform message var decrypt_msg = document.createElement('p'); decrypt_msg.setAttribute('id', 'mkdocs-decrypt-msg') var node = document.createTextNode('Invalid password.') decrypt_msg.appendChild(node) var mkdocs_decrypt_msg = document.getElementById('mkdocs-decrypt-msg'); // clear all previous failure messages while (mkdocs_decrypt_msg.firstChild) { mkdocs_decrypt_msg.firstChild.remove(); } mkdocs_decrypt_msg.appendChild(decrypt_msg); password_input.value = ''; password_input.focus(); } } password_input.addEventListener('keydown', function(event) { if (event.key === \"Enter\") { event.preventDefault(); decrypt_action(); } }); }; document.addEventListener('DOMContentLoaded', init_decryptor); })();","title":"[Protected] Developing the API Infrastructure Layer"},{"location":"Developing%20a%20Domain%20Driven%20Architecture%20for%20ASP.NET%20Core%20Web%20API/domain-drive-testing/","text":"ZFQFLCB/hqePXrqa9OfXWg==;mxoIkzundzpLNG6/ckM4CzvDTfTzChaS/hakMUAYLaiRpCX/XZ+SAGjj9eqPMg291LXOjOX2g3U9xRiJUTNzlNRdpcSLbJSIumILU7FkarMLjEDvgajP8C8uTE5rBopBWqUByM9b6JO+//ij+/05tWhWr0NFapsOgjQ8zV0oia8yTkaEQfDpkbNhbuJIHwv8bxf3My7/TWm+yDazvtwO554U5wz2Tsx2aJjsi3TzpkeHLWIvfzq8URyJOOK57WY5;^ This content is protected with AES encryption. Contact your administrator for access to this page. (function() { var strip_padding = function(padded_content, padding_char) { /* Strips the padding character from decrypted content. */ for (var i = padded_content.length; i > 0; i--) { if (padded_content[i - 1] !== padding_char) { return padded_content.slice(0, i); } } }; var decrypt_content = function(password, iv_b64, ciphertext_b64, padding_char) { /* Decrypts the content from the ciphertext bundle. */ var key = CryptoJS.MD5(password), iv = CryptoJS.enc.Base64.parse(iv_b64), ciphertext = CryptoJS.enc.Base64.parse(ciphertext_b64), bundle = { key: key, iv: iv, ciphertext: ciphertext }; var plaintext = CryptoJS.AES.decrypt(bundle, key, { iv: iv, padding: CryptoJS.pad.NoPadding }); try { return strip_padding(plaintext.toString(CryptoJS.enc.Utf8), padding_char); } catch (err) { // encoding failed; wrong password return false; } }; // Reload scripts src after decryption process var reload_js = function(src) { $('script[src=\"' + src + '\"]').remove(); $('<script>').attr('src', src).appendTo('head'); }; var init_decryptor = function() { var password_input = document.getElementById('mkdocs-content-password'), encrypted_content = document.getElementById('mkdocs-encrypted-content'), decrypted_content = document.getElementById('mkdocs-decrypted-content'), decrypt_form = document.getElementById('mkdocs-decrypt-form'); // Adjust password field width to placeholder length let input = document.getElementById(\"mkdocs-content-password\"); input.setAttribute('size', input.getAttribute('placeholder').length); // Decrypt content var decrypt_action = function() { // grab the ciphertext bundle var parts = encrypted_content.innerHTML.split(';'); // decrypt it var content = decrypt_content( password_input.value, parts[0], parts[1], parts[2] ); if (content) { // success; display the decrypted content decrypted_content.innerHTML = content; encrypted_content.parentNode.removeChild(encrypted_content); // any post processing on the decrypted content should be done here MathJax.typesetPromise() } else { // create HTML element for the inform message var decrypt_msg = document.createElement('p'); decrypt_msg.setAttribute('id', 'mkdocs-decrypt-msg') var node = document.createTextNode('Invalid password.') decrypt_msg.appendChild(node) var mkdocs_decrypt_msg = document.getElementById('mkdocs-decrypt-msg'); // clear all previous failure messages while (mkdocs_decrypt_msg.firstChild) { mkdocs_decrypt_msg.firstChild.remove(); } mkdocs_decrypt_msg.appendChild(decrypt_msg); password_input.value = ''; password_input.focus(); } } password_input.addEventListener('keydown', function(event) { if (event.key === \"Enter\") { event.preventDefault(); decrypt_action(); } }); }; document.addEventListener('DOMContentLoaded', init_decryptor); })();","title":"[Protected] How to Test your Domain-Driven API"},{"location":"Developing%20a%20Domain%20Driven%20Architecture%20for%20ASP.NET%20Core%20Web%20API/ports-adapter-pattern/","text":"X5P4SDuQCN/EDT850LUvvw==;voiEM/2JSSrwD03uu6DO+r16G52KyOjRWjRhxyYqLjvLIlAQNru1EED+xZbKlADcjs5QyQVjdRfgIOUdRq6ecwEZImyM26TpvvFeewz+MzXNyB9sqm2bNDRm1MJ4tvRE7Imutrz6N6GRDt0rgtdxavWMWTNTmfIhT7h9wSWmGoh4+64Mov6aFdXALaxc3OGyFBi9pscdIzcDw1tuW1/GSahj2WltffUrEvMKrhXb1wg9Nrhr5G3dKwBufnz++70xsj1IHJykzfvZgeHlfvVXtodWHOEFJyy/ifqjBOyAlqun9Sp9SHPdzHWb7XhR3iawtfUWJU/G3aAHMuK+BG+JN/JvqziCoA0pMudEIsd4ScXgz9KSY70Z1I01lL3haa1e;^ This content is protected with AES encryption. Contact your administrator for access to this page. (function() { var strip_padding = function(padded_content, padding_char) { /* Strips the padding character from decrypted content. */ for (var i = padded_content.length; i > 0; i--) { if (padded_content[i - 1] !== padding_char) { return padded_content.slice(0, i); } } }; var decrypt_content = function(password, iv_b64, ciphertext_b64, padding_char) { /* Decrypts the content from the ciphertext bundle. */ var key = CryptoJS.MD5(password), iv = CryptoJS.enc.Base64.parse(iv_b64), ciphertext = CryptoJS.enc.Base64.parse(ciphertext_b64), bundle = { key: key, iv: iv, ciphertext: ciphertext }; var plaintext = CryptoJS.AES.decrypt(bundle, key, { iv: iv, padding: CryptoJS.pad.NoPadding }); try { return strip_padding(plaintext.toString(CryptoJS.enc.Utf8), padding_char); } catch (err) { // encoding failed; wrong password return false; } }; // Reload scripts src after decryption process var reload_js = function(src) { $('script[src=\"' + src + '\"]').remove(); $('<script>').attr('src', src).appendTo('head'); }; var init_decryptor = function() { var password_input = document.getElementById('mkdocs-content-password'), encrypted_content = document.getElementById('mkdocs-encrypted-content'), decrypted_content = document.getElementById('mkdocs-decrypted-content'), decrypt_form = document.getElementById('mkdocs-decrypt-form'); // Adjust password field width to placeholder length let input = document.getElementById(\"mkdocs-content-password\"); input.setAttribute('size', input.getAttribute('placeholder').length); // Decrypt content var decrypt_action = function() { // grab the ciphertext bundle var parts = encrypted_content.innerHTML.split(';'); // decrypt it var content = decrypt_content( password_input.value, parts[0], parts[1], parts[2] ); if (content) { // success; display the decrypted content decrypted_content.innerHTML = content; encrypted_content.parentNode.removeChild(encrypted_content); // any post processing on the decrypted content should be done here MathJax.typesetPromise() } else { // create HTML element for the inform message var decrypt_msg = document.createElement('p'); decrypt_msg.setAttribute('id', 'mkdocs-decrypt-msg') var node = document.createTextNode('Invalid password.') decrypt_msg.appendChild(node) var mkdocs_decrypt_msg = document.getElementById('mkdocs-decrypt-msg'); // clear all previous failure messages while (mkdocs_decrypt_msg.firstChild) { mkdocs_decrypt_msg.firstChild.remove(); } mkdocs_decrypt_msg.appendChild(decrypt_msg); password_input.value = ''; password_input.focus(); } } password_input.addEventListener('keydown', function(event) { if (event.key === \"Enter\") { event.preventDefault(); decrypt_action(); } }); }; document.addEventListener('DOMContentLoaded', init_decryptor); })();","title":"[Protected] Using the Ports and Adapter Pattern in Your API Architecture"},{"location":"Developing%20a%20Hypermedia%20Architecture%20for%20ASP.NET%20Core%20Web%20API/designing-hypermedia-api/","text":"StUHneV+BJuTTEahKKp/Gw==;G6FbCUJ5t1Y/hYbylSOGH0Z7Xa6SF8ejTSXHXuWI3ZaycH53seFlXfV24MEUNlTBlqtHcMH91O040gnJ+ed/o8/9sxx7dPShgzBBUiK2gcM1h0CLLwICVZQXzcWcCXZXCHmsUPtjmSwCVuYZo3M4WQOQZ4kilxCDUT6DGK32KoTknwxDYJ+DkK7oZh5xcD8zAW2qOogEyQuzC2i704RWiFqbO3cARj/lFUJbpri2/NBhNoko/QFiikTis4yQUiHi;^ This content is protected with AES encryption. Contact your administrator for access to this page. (function() { var strip_padding = function(padded_content, padding_char) { /* Strips the padding character from decrypted content. */ for (var i = padded_content.length; i > 0; i--) { if (padded_content[i - 1] !== padding_char) { return padded_content.slice(0, i); } } }; var decrypt_content = function(password, iv_b64, ciphertext_b64, padding_char) { /* Decrypts the content from the ciphertext bundle. */ var key = CryptoJS.MD5(password), iv = CryptoJS.enc.Base64.parse(iv_b64), ciphertext = CryptoJS.enc.Base64.parse(ciphertext_b64), bundle = { key: key, iv: iv, ciphertext: ciphertext }; var plaintext = CryptoJS.AES.decrypt(bundle, key, { iv: iv, padding: CryptoJS.pad.NoPadding }); try { return strip_padding(plaintext.toString(CryptoJS.enc.Utf8), padding_char); } catch (err) { // encoding failed; wrong password return false; } }; // Reload scripts src after decryption process var reload_js = function(src) { $('script[src=\"' + src + '\"]').remove(); $('<script>').attr('src', src).appendTo('head'); }; var init_decryptor = function() { var password_input = document.getElementById('mkdocs-content-password'), encrypted_content = document.getElementById('mkdocs-encrypted-content'), decrypted_content = document.getElementById('mkdocs-decrypted-content'), decrypt_form = document.getElementById('mkdocs-decrypt-form'); // Adjust password field width to placeholder length let input = document.getElementById(\"mkdocs-content-password\"); input.setAttribute('size', input.getAttribute('placeholder').length); // Decrypt content var decrypt_action = function() { // grab the ciphertext bundle var parts = encrypted_content.innerHTML.split(';'); // decrypt it var content = decrypt_content( password_input.value, parts[0], parts[1], parts[2] ); if (content) { // success; display the decrypted content decrypted_content.innerHTML = content; encrypted_content.parentNode.removeChild(encrypted_content); // any post processing on the decrypted content should be done here MathJax.typesetPromise() } else { // create HTML element for the inform message var decrypt_msg = document.createElement('p'); decrypt_msg.setAttribute('id', 'mkdocs-decrypt-msg') var node = document.createTextNode('Invalid password.') decrypt_msg.appendChild(node) var mkdocs_decrypt_msg = document.getElementById('mkdocs-decrypt-msg'); // clear all previous failure messages while (mkdocs_decrypt_msg.firstChild) { mkdocs_decrypt_msg.firstChild.remove(); } mkdocs_decrypt_msg.appendChild(decrypt_msg); password_input.value = ''; password_input.focus(); } } password_input.addEventListener('keydown', function(event) { if (event.key === \"Enter\") { event.preventDefault(); decrypt_action(); } }); }; document.addEventListener('DOMContentLoaded', init_decryptor); })();","title":"[Protected] Designing the Hypermedia API"},{"location":"Developing%20a%20Hypermedia%20Architecture%20for%20ASP.NET%20Core%20Web%20API/generating-hyperlinks-for-api/","text":"typWlsbHSPkHQ+4MWIoIIw==;r0bL4ghN9uhCGqh8z+S9R6vuQzKhgfcnN7fUlaZ6jAYBDed+BoySrd7Ts43oYSbDiaRcZiWuHJ7FrKzsAvhCyGGA/qbIWAUq4MebayLKJ6VRduT0/ZnKMFHrAsjG7qOaPlLSi7YDIsz/4NzUp+bHjs2R0Afkcv3XRTbu++PNdh/yTr0tvD0T+0lTpGhy7YzAA/fWJyaYEKQ7LwrXlusQRp+53m1lvOM0HcoOugsyCslWw7VI2jHU04zvpzjIxb3GDNZe8DnWAKjIxK//kmozaX2U6DTPAMiZB4GSfH7jg4bMtdEMM4WYXTaOypxv1h3ON1U96H6t9B2Qefr2ZQtInIhOw+xZgGYEqrektHJpAK4f8IEnTI6U4CQOF6ODkwYX;^ This content is protected with AES encryption. Contact your administrator for access to this page. (function() { var strip_padding = function(padded_content, padding_char) { /* Strips the padding character from decrypted content. */ for (var i = padded_content.length; i > 0; i--) { if (padded_content[i - 1] !== padding_char) { return padded_content.slice(0, i); } } }; var decrypt_content = function(password, iv_b64, ciphertext_b64, padding_char) { /* Decrypts the content from the ciphertext bundle. */ var key = CryptoJS.MD5(password), iv = CryptoJS.enc.Base64.parse(iv_b64), ciphertext = CryptoJS.enc.Base64.parse(ciphertext_b64), bundle = { key: key, iv: iv, ciphertext: ciphertext }; var plaintext = CryptoJS.AES.decrypt(bundle, key, { iv: iv, padding: CryptoJS.pad.NoPadding }); try { return strip_padding(plaintext.toString(CryptoJS.enc.Utf8), padding_char); } catch (err) { // encoding failed; wrong password return false; } }; // Reload scripts src after decryption process var reload_js = function(src) { $('script[src=\"' + src + '\"]').remove(); $('<script>').attr('src', src).appendTo('head'); }; var init_decryptor = function() { var password_input = document.getElementById('mkdocs-content-password'), encrypted_content = document.getElementById('mkdocs-encrypted-content'), decrypted_content = document.getElementById('mkdocs-decrypted-content'), decrypt_form = document.getElementById('mkdocs-decrypt-form'); // Adjust password field width to placeholder length let input = document.getElementById(\"mkdocs-content-password\"); input.setAttribute('size', input.getAttribute('placeholder').length); // Decrypt content var decrypt_action = function() { // grab the ciphertext bundle var parts = encrypted_content.innerHTML.split(';'); // decrypt it var content = decrypt_content( password_input.value, parts[0], parts[1], parts[2] ); if (content) { // success; display the decrypted content decrypted_content.innerHTML = content; encrypted_content.parentNode.removeChild(encrypted_content); // any post processing on the decrypted content should be done here MathJax.typesetPromise() } else { // create HTML element for the inform message var decrypt_msg = document.createElement('p'); decrypt_msg.setAttribute('id', 'mkdocs-decrypt-msg') var node = document.createTextNode('Invalid password.') decrypt_msg.appendChild(node) var mkdocs_decrypt_msg = document.getElementById('mkdocs-decrypt-msg'); // clear all previous failure messages while (mkdocs_decrypt_msg.firstChild) { mkdocs_decrypt_msg.firstChild.remove(); } mkdocs_decrypt_msg.appendChild(decrypt_msg); password_input.value = ''; password_input.focus(); } } password_input.addEventListener('keydown', function(event) { if (event.key === \"Enter\") { event.preventDefault(); decrypt_action(); } }); }; document.addEventListener('DOMContentLoaded', init_decryptor); })();","title":"[Protected] Generating Hypermedia Links in Domain-Driven ASP.NET Core Web API"},{"location":"Developing%20a%20Hypermedia%20Architecture%20for%20ASP.NET%20Core%20Web%20API/generating-json-rep-for-api/","text":"+iJhQXsbUyRESGIMfAduOQ==;jt8F0AtkEQIxYQqpiewhWdbK6LHRQKo1+CBmipI9ZGPVhWKXs0oNFUnfyAPtMf5IZJ27vUF8OPPNsjKXwGwkUhbESAKvH24bzvSxnEiaaExBroPMBPXQ8xetfEduMVoVE5076omHwgXxZY7rfVl5xnEO8CRk3+wRk6M7tTy9YHlpyvQpPGLAI/rlcfT+tC2Mgp8QEK2qop4zkB3A875vuXkZRVbc4GQ6RXJYiCfPJzSbCSVxB226fJY+eehAuUMsCYtRDJxvsLe3OpLIVGfjcx2KNhWHnI05Y1TkUZ/RpCWK7plyJMrPSgiQSCDIHoK4CCK1nxYUledW2YEsQ+aJaw==;^ This content is protected with AES encryption. Contact your administrator for access to this page. (function() { var strip_padding = function(padded_content, padding_char) { /* Strips the padding character from decrypted content. */ for (var i = padded_content.length; i > 0; i--) { if (padded_content[i - 1] !== padding_char) { return padded_content.slice(0, i); } } }; var decrypt_content = function(password, iv_b64, ciphertext_b64, padding_char) { /* Decrypts the content from the ciphertext bundle. */ var key = CryptoJS.MD5(password), iv = CryptoJS.enc.Base64.parse(iv_b64), ciphertext = CryptoJS.enc.Base64.parse(ciphertext_b64), bundle = { key: key, iv: iv, ciphertext: ciphertext }; var plaintext = CryptoJS.AES.decrypt(bundle, key, { iv: iv, padding: CryptoJS.pad.NoPadding }); try { return strip_padding(plaintext.toString(CryptoJS.enc.Utf8), padding_char); } catch (err) { // encoding failed; wrong password return false; } }; // Reload scripts src after decryption process var reload_js = function(src) { $('script[src=\"' + src + '\"]').remove(); $('<script>').attr('src', src).appendTo('head'); }; var init_decryptor = function() { var password_input = document.getElementById('mkdocs-content-password'), encrypted_content = document.getElementById('mkdocs-encrypted-content'), decrypted_content = document.getElementById('mkdocs-decrypted-content'), decrypt_form = document.getElementById('mkdocs-decrypt-form'); // Adjust password field width to placeholder length let input = document.getElementById(\"mkdocs-content-password\"); input.setAttribute('size', input.getAttribute('placeholder').length); // Decrypt content var decrypt_action = function() { // grab the ciphertext bundle var parts = encrypted_content.innerHTML.split(';'); // decrypt it var content = decrypt_content( password_input.value, parts[0], parts[1], parts[2] ); if (content) { // success; display the decrypted content decrypted_content.innerHTML = content; encrypted_content.parentNode.removeChild(encrypted_content); // any post processing on the decrypted content should be done here MathJax.typesetPromise() } else { // create HTML element for the inform message var decrypt_msg = document.createElement('p'); decrypt_msg.setAttribute('id', 'mkdocs-decrypt-msg') var node = document.createTextNode('Invalid password.') decrypt_msg.appendChild(node) var mkdocs_decrypt_msg = document.getElementById('mkdocs-decrypt-msg'); // clear all previous failure messages while (mkdocs_decrypt_msg.firstChild) { mkdocs_decrypt_msg.firstChild.remove(); } mkdocs_decrypt_msg.appendChild(decrypt_msg); password_input.value = ''; password_input.focus(); } } password_input.addEventListener('keydown', function(event) { if (event.key === \"Enter\") { event.preventDefault(); decrypt_action(); } }); }; document.addEventListener('DOMContentLoaded', init_decryptor); })();","title":"[Protected] Generating the JSON Representation for the API Resources"},{"location":"Developing%20a%20Hypermedia%20Architecture%20for%20ASP.NET%20Core%20Web%20API/hateoas-constraint-api/","text":"W/JxfQb3gpdzl6f6F4rJrA==;TmfmUXSXrSdeJrnlbd0dSCGrnJ0mc4vleL+79j3oC+dDN6dW/cQzC1Vxoa9760mYeNs3EEAAmphSR6CwU2Ay89U4iJKQmQ9kA9CuXxG2aq3Z6IuTn9r+JvSMZBZQf5SyxXhEJfMGO8vtS3L85gBVdKYEyb/RRdYjF90T+kipQpj+UdatDWkjUmtgHZQO0nG4cJ///E2/p2dWivFOqGSdbHl2uhHJeREvD+CSlgTNQxlQ1ESBiDlnF1dbmP+wJAYtJBhqigKEamvqW63djEnbAPUBB1j4V7tqOaSHuAPQi9Q=;^ This content is protected with AES encryption. Contact your administrator for access to this page. (function() { var strip_padding = function(padded_content, padding_char) { /* Strips the padding character from decrypted content. */ for (var i = padded_content.length; i > 0; i--) { if (padded_content[i - 1] !== padding_char) { return padded_content.slice(0, i); } } }; var decrypt_content = function(password, iv_b64, ciphertext_b64, padding_char) { /* Decrypts the content from the ciphertext bundle. */ var key = CryptoJS.MD5(password), iv = CryptoJS.enc.Base64.parse(iv_b64), ciphertext = CryptoJS.enc.Base64.parse(ciphertext_b64), bundle = { key: key, iv: iv, ciphertext: ciphertext }; var plaintext = CryptoJS.AES.decrypt(bundle, key, { iv: iv, padding: CryptoJS.pad.NoPadding }); try { return strip_padding(plaintext.toString(CryptoJS.enc.Utf8), padding_char); } catch (err) { // encoding failed; wrong password return false; } }; // Reload scripts src after decryption process var reload_js = function(src) { $('script[src=\"' + src + '\"]').remove(); $('<script>').attr('src', src).appendTo('head'); }; var init_decryptor = function() { var password_input = document.getElementById('mkdocs-content-password'), encrypted_content = document.getElementById('mkdocs-encrypted-content'), decrypted_content = document.getElementById('mkdocs-decrypted-content'), decrypt_form = document.getElementById('mkdocs-decrypt-form'); // Adjust password field width to placeholder length let input = document.getElementById(\"mkdocs-content-password\"); input.setAttribute('size', input.getAttribute('placeholder').length); // Decrypt content var decrypt_action = function() { // grab the ciphertext bundle var parts = encrypted_content.innerHTML.split(';'); // decrypt it var content = decrypt_content( password_input.value, parts[0], parts[1], parts[2] ); if (content) { // success; display the decrypted content decrypted_content.innerHTML = content; encrypted_content.parentNode.removeChild(encrypted_content); // any post processing on the decrypted content should be done here MathJax.typesetPromise() } else { // create HTML element for the inform message var decrypt_msg = document.createElement('p'); decrypt_msg.setAttribute('id', 'mkdocs-decrypt-msg') var node = document.createTextNode('Invalid password.') decrypt_msg.appendChild(node) var mkdocs_decrypt_msg = document.getElementById('mkdocs-decrypt-msg'); // clear all previous failure messages while (mkdocs_decrypt_msg.firstChild) { mkdocs_decrypt_msg.firstChild.remove(); } mkdocs_decrypt_msg.appendChild(decrypt_msg); password_input.value = ''; password_input.focus(); } } password_input.addEventListener('keydown', function(event) { if (event.key === \"Enter\") { event.preventDefault(); decrypt_action(); } }); }; document.addEventListener('DOMContentLoaded', init_decryptor); })();","title":"[Protected] Using the HATEOAS Constraint in your API"},{"location":"Developing%20a%20Hypermedia%20Architecture%20for%20ASP.NET%20Core%20Web%20API/hypermedia-testing/","text":"rJwhKnm5lv5/QDVPFOod8Q==;H57JraZ/Xuklrf/fT7E6NfUV5Q+VEqbEFfey3y34Y2y18IEOMSeb1hWF2I6IIU7tLGvegBv29O0kCCyLQ/AyzLwTdvX9NRltFoA5rf4FgOqEwkdOC3hT1JZ2d39g7vAEpF0747wE7TCm5RUxb9RRQw6i/E4/mgr9wi3eT7T9YeGFNCYmeO7f/nqdjJtraUz/P5JIeFkhVQngX4LqPSw1A+JeMN+2Gn9WWlW46RytrrMypFgSNvUNxg5KMzb+q2I/;^ This content is protected with AES encryption. Contact your administrator for access to this page. (function() { var strip_padding = function(padded_content, padding_char) { /* Strips the padding character from decrypted content. */ for (var i = padded_content.length; i > 0; i--) { if (padded_content[i - 1] !== padding_char) { return padded_content.slice(0, i); } } }; var decrypt_content = function(password, iv_b64, ciphertext_b64, padding_char) { /* Decrypts the content from the ciphertext bundle. */ var key = CryptoJS.MD5(password), iv = CryptoJS.enc.Base64.parse(iv_b64), ciphertext = CryptoJS.enc.Base64.parse(ciphertext_b64), bundle = { key: key, iv: iv, ciphertext: ciphertext }; var plaintext = CryptoJS.AES.decrypt(bundle, key, { iv: iv, padding: CryptoJS.pad.NoPadding }); try { return strip_padding(plaintext.toString(CryptoJS.enc.Utf8), padding_char); } catch (err) { // encoding failed; wrong password return false; } }; // Reload scripts src after decryption process var reload_js = function(src) { $('script[src=\"' + src + '\"]').remove(); $('<script>').attr('src', src).appendTo('head'); }; var init_decryptor = function() { var password_input = document.getElementById('mkdocs-content-password'), encrypted_content = document.getElementById('mkdocs-encrypted-content'), decrypted_content = document.getElementById('mkdocs-decrypted-content'), decrypt_form = document.getElementById('mkdocs-decrypt-form'); // Adjust password field width to placeholder length let input = document.getElementById(\"mkdocs-content-password\"); input.setAttribute('size', input.getAttribute('placeholder').length); // Decrypt content var decrypt_action = function() { // grab the ciphertext bundle var parts = encrypted_content.innerHTML.split(';'); // decrypt it var content = decrypt_content( password_input.value, parts[0], parts[1], parts[2] ); if (content) { // success; display the decrypted content decrypted_content.innerHTML = content; encrypted_content.parentNode.removeChild(encrypted_content); // any post processing on the decrypted content should be done here MathJax.typesetPromise() } else { // create HTML element for the inform message var decrypt_msg = document.createElement('p'); decrypt_msg.setAttribute('id', 'mkdocs-decrypt-msg') var node = document.createTextNode('Invalid password.') decrypt_msg.appendChild(node) var mkdocs_decrypt_msg = document.getElementById('mkdocs-decrypt-msg'); // clear all previous failure messages while (mkdocs_decrypt_msg.firstChild) { mkdocs_decrypt_msg.firstChild.remove(); } mkdocs_decrypt_msg.appendChild(decrypt_msg); password_input.value = ''; password_input.focus(); } } password_input.addEventListener('keydown', function(event) { if (event.key === \"Enter\") { event.preventDefault(); decrypt_action(); } }); }; document.addEventListener('DOMContentLoaded', init_decryptor); })();","title":"[Protected] How to Test your Hypermedia API"},{"location":"Developing%20a%20Simple%20NTier%20Architecture%20for%20ASP.NET%20Core%20Web%20API/designing-ntier-api/","text":"FSiF3vdKuZpJ15Cat3kTsA==;C8R3Kvk3lD6mKT2+f2EvK+b19Mr2nqAMRBzaQFwiF9B8KJln1/M26W+IB1DRGxKEZr5OlWY3uPd7b6UENwM9Tn7BnPPKeN/qR7tSgRMBkN6OLNWy6ft5LnhFIhGOiCdEIBldH+nbH+EmwDpVD9Z7IsHLfMBuQhXg+b6lJhnd3S9VRBCVSBXBlGXT6x2FBXJA/m47ae6asn6Rw2Lr9V31ww==;^ This content is protected with AES encryption. Contact your administrator for access to this page. (function() { var strip_padding = function(padded_content, padding_char) { /* Strips the padding character from decrypted content. */ for (var i = padded_content.length; i > 0; i--) { if (padded_content[i - 1] !== padding_char) { return padded_content.slice(0, i); } } }; var decrypt_content = function(password, iv_b64, ciphertext_b64, padding_char) { /* Decrypts the content from the ciphertext bundle. */ var key = CryptoJS.MD5(password), iv = CryptoJS.enc.Base64.parse(iv_b64), ciphertext = CryptoJS.enc.Base64.parse(ciphertext_b64), bundle = { key: key, iv: iv, ciphertext: ciphertext }; var plaintext = CryptoJS.AES.decrypt(bundle, key, { iv: iv, padding: CryptoJS.pad.NoPadding }); try { return strip_padding(plaintext.toString(CryptoJS.enc.Utf8), padding_char); } catch (err) { // encoding failed; wrong password return false; } }; // Reload scripts src after decryption process var reload_js = function(src) { $('script[src=\"' + src + '\"]').remove(); $('<script>').attr('src', src).appendTo('head'); }; var init_decryptor = function() { var password_input = document.getElementById('mkdocs-content-password'), encrypted_content = document.getElementById('mkdocs-encrypted-content'), decrypted_content = document.getElementById('mkdocs-decrypted-content'), decrypt_form = document.getElementById('mkdocs-decrypt-form'); // Adjust password field width to placeholder length let input = document.getElementById(\"mkdocs-content-password\"); input.setAttribute('size', input.getAttribute('placeholder').length); // Decrypt content var decrypt_action = function() { // grab the ciphertext bundle var parts = encrypted_content.innerHTML.split(';'); // decrypt it var content = decrypt_content( password_input.value, parts[0], parts[1], parts[2] ); if (content) { // success; display the decrypted content decrypted_content.innerHTML = content; encrypted_content.parentNode.removeChild(encrypted_content); // any post processing on the decrypted content should be done here MathJax.typesetPromise() } else { // create HTML element for the inform message var decrypt_msg = document.createElement('p'); decrypt_msg.setAttribute('id', 'mkdocs-decrypt-msg') var node = document.createTextNode('Invalid password.') decrypt_msg.appendChild(node) var mkdocs_decrypt_msg = document.getElementById('mkdocs-decrypt-msg'); // clear all previous failure messages while (mkdocs_decrypt_msg.firstChild) { mkdocs_decrypt_msg.firstChild.remove(); } mkdocs_decrypt_msg.appendChild(decrypt_msg); password_input.value = ''; password_input.focus(); } } password_input.addEventListener('keydown', function(event) { if (event.key === \"Enter\") { event.preventDefault(); decrypt_action(); } }); }; document.addEventListener('DOMContentLoaded', init_decryptor); })();","title":"[Protected] Designing the NTier API"},{"location":"Developing%20a%20Simple%20NTier%20Architecture%20for%20ASP.NET%20Core%20Web%20API/ntier-api-endpoints/","text":"IvZFCYZFE2qALSK69KAX1Q==;UgvuTPeXMjLd3j6Iq29y7PyrneG37+Ip7NmY6DIARuoc4OKVGnGKcfw/JKb7uL5owY5y+DINmApu4WqyxWQS59VE4aTk9+0g/XSGSfSqlcxWx0+MgcEpXYxdS3u7vZi0IrrWYCJ6va8I0OzvdMzjzsH1l9vBxomJH/56snX5fR35i0Uv2rQwmmUBOcoGU2/r3qyPG4WMEKpzcZlwvQTbSC1mgyaw4MrVasyjvpwvZDsayO+6dq4xS+PcJLfbfcBx;^ This content is protected with AES encryption. Contact your administrator for access to this page. (function() { var strip_padding = function(padded_content, padding_char) { /* Strips the padding character from decrypted content. */ for (var i = padded_content.length; i > 0; i--) { if (padded_content[i - 1] !== padding_char) { return padded_content.slice(0, i); } } }; var decrypt_content = function(password, iv_b64, ciphertext_b64, padding_char) { /* Decrypts the content from the ciphertext bundle. */ var key = CryptoJS.MD5(password), iv = CryptoJS.enc.Base64.parse(iv_b64), ciphertext = CryptoJS.enc.Base64.parse(ciphertext_b64), bundle = { key: key, iv: iv, ciphertext: ciphertext }; var plaintext = CryptoJS.AES.decrypt(bundle, key, { iv: iv, padding: CryptoJS.pad.NoPadding }); try { return strip_padding(plaintext.toString(CryptoJS.enc.Utf8), padding_char); } catch (err) { // encoding failed; wrong password return false; } }; // Reload scripts src after decryption process var reload_js = function(src) { $('script[src=\"' + src + '\"]').remove(); $('<script>').attr('src', src).appendTo('head'); }; var init_decryptor = function() { var password_input = document.getElementById('mkdocs-content-password'), encrypted_content = document.getElementById('mkdocs-encrypted-content'), decrypted_content = document.getElementById('mkdocs-decrypted-content'), decrypt_form = document.getElementById('mkdocs-decrypt-form'); // Adjust password field width to placeholder length let input = document.getElementById(\"mkdocs-content-password\"); input.setAttribute('size', input.getAttribute('placeholder').length); // Decrypt content var decrypt_action = function() { // grab the ciphertext bundle var parts = encrypted_content.innerHTML.split(';'); // decrypt it var content = decrypt_content( password_input.value, parts[0], parts[1], parts[2] ); if (content) { // success; display the decrypted content decrypted_content.innerHTML = content; encrypted_content.parentNode.removeChild(encrypted_content); // any post processing on the decrypted content should be done here MathJax.typesetPromise() } else { // create HTML element for the inform message var decrypt_msg = document.createElement('p'); decrypt_msg.setAttribute('id', 'mkdocs-decrypt-msg') var node = document.createTextNode('Invalid password.') decrypt_msg.appendChild(node) var mkdocs_decrypt_msg = document.getElementById('mkdocs-decrypt-msg'); // clear all previous failure messages while (mkdocs_decrypt_msg.firstChild) { mkdocs_decrypt_msg.firstChild.remove(); } mkdocs_decrypt_msg.appendChild(decrypt_msg); password_input.value = ''; password_input.focus(); } } password_input.addEventListener('keydown', function(event) { if (event.key === \"Enter\") { event.preventDefault(); decrypt_action(); } }); }; document.addEventListener('DOMContentLoaded', init_decryptor); })();","title":"[Protected] Developing the API Endpoints"},{"location":"Developing%20a%20Simple%20NTier%20Architecture%20for%20ASP.NET%20Core%20Web%20API/ntier-data-access/","text":"8NTQnfDZ+ChYWUlkUjGAJw==;x38zllh1dSISE/QESLTXedrX0uMJLqRKV1884TD3fi4FyM1TN9APBZd3utpePlWAn3LyDf5hqyRMuMZIKhBr+cADJaOxE+ccX2VSk4eJGLJELLXAS9mrq1UAd8OoySTW1/GEjK73E3ZYmJDmHXSYhqTvNbXiDv21f9ViIbB+usJ3CymEDiV4tv0VeVD+COhPhIyaq2JNsI5YThzNqvYo8oOhEK0Ij/Fy03UOx5SaPKtbsRa9I9JY+UZgBWKZKRTf;^ This content is protected with AES encryption. Contact your administrator for access to this page. (function() { var strip_padding = function(padded_content, padding_char) { /* Strips the padding character from decrypted content. */ for (var i = padded_content.length; i > 0; i--) { if (padded_content[i - 1] !== padding_char) { return padded_content.slice(0, i); } } }; var decrypt_content = function(password, iv_b64, ciphertext_b64, padding_char) { /* Decrypts the content from the ciphertext bundle. */ var key = CryptoJS.MD5(password), iv = CryptoJS.enc.Base64.parse(iv_b64), ciphertext = CryptoJS.enc.Base64.parse(ciphertext_b64), bundle = { key: key, iv: iv, ciphertext: ciphertext }; var plaintext = CryptoJS.AES.decrypt(bundle, key, { iv: iv, padding: CryptoJS.pad.NoPadding }); try { return strip_padding(plaintext.toString(CryptoJS.enc.Utf8), padding_char); } catch (err) { // encoding failed; wrong password return false; } }; // Reload scripts src after decryption process var reload_js = function(src) { $('script[src=\"' + src + '\"]').remove(); $('<script>').attr('src', src).appendTo('head'); }; var init_decryptor = function() { var password_input = document.getElementById('mkdocs-content-password'), encrypted_content = document.getElementById('mkdocs-encrypted-content'), decrypted_content = document.getElementById('mkdocs-decrypted-content'), decrypt_form = document.getElementById('mkdocs-decrypt-form'); // Adjust password field width to placeholder length let input = document.getElementById(\"mkdocs-content-password\"); input.setAttribute('size', input.getAttribute('placeholder').length); // Decrypt content var decrypt_action = function() { // grab the ciphertext bundle var parts = encrypted_content.innerHTML.split(';'); // decrypt it var content = decrypt_content( password_input.value, parts[0], parts[1], parts[2] ); if (content) { // success; display the decrypted content decrypted_content.innerHTML = content; encrypted_content.parentNode.removeChild(encrypted_content); // any post processing on the decrypted content should be done here MathJax.typesetPromise() } else { // create HTML element for the inform message var decrypt_msg = document.createElement('p'); decrypt_msg.setAttribute('id', 'mkdocs-decrypt-msg') var node = document.createTextNode('Invalid password.') decrypt_msg.appendChild(node) var mkdocs_decrypt_msg = document.getElementById('mkdocs-decrypt-msg'); // clear all previous failure messages while (mkdocs_decrypt_msg.firstChild) { mkdocs_decrypt_msg.firstChild.remove(); } mkdocs_decrypt_msg.appendChild(decrypt_msg); password_input.value = ''; password_input.focus(); } } password_input.addEventListener('keydown', function(event) { if (event.key === \"Enter\") { event.preventDefault(); decrypt_action(); } }); }; document.addEventListener('DOMContentLoaded', init_decryptor); })();","title":"[Protected] Developing the API Data Access"},{"location":"Developing%20a%20Simple%20NTier%20Architecture%20for%20ASP.NET%20Core%20Web%20API/ntier-repository-pattern/","text":"NulblWP+3qV0cOz4yu7WbQ==;mzQJiRfkd49aiKFyZ2TOeAbFIzZ6Ni3HQOWw35Qm1Ony1UUxoJBJZwcAE+M4WUMTf2QWdEge3/0B+3fSOlMK76+2Jb1vwjkQjj4WpSWnMJNBr9DM/bHoblTr2GxUAVURtJouHno5bBBCpjjrEQcoPvMf14MmbzCPn7dmyvgRN6WWQSh4nlh4fMhqCDPR4cu0qK93L41rTIZpz83ii7afU6b4mAbLfs9MVJALEgnNziz4FCGksqsbt3f+iEkJXGO4jZaBjn19hWQVgnC4B2XYq/Gsn84/xSJgUsGU2uqY5D1YHcw9JEmC1ydCW/T9WCBsjVzhPGE21ogFspOpPrDFaQ==;^ This content is protected with AES encryption. Contact your administrator for access to this page. (function() { var strip_padding = function(padded_content, padding_char) { /* Strips the padding character from decrypted content. */ for (var i = padded_content.length; i > 0; i--) { if (padded_content[i - 1] !== padding_char) { return padded_content.slice(0, i); } } }; var decrypt_content = function(password, iv_b64, ciphertext_b64, padding_char) { /* Decrypts the content from the ciphertext bundle. */ var key = CryptoJS.MD5(password), iv = CryptoJS.enc.Base64.parse(iv_b64), ciphertext = CryptoJS.enc.Base64.parse(ciphertext_b64), bundle = { key: key, iv: iv, ciphertext: ciphertext }; var plaintext = CryptoJS.AES.decrypt(bundle, key, { iv: iv, padding: CryptoJS.pad.NoPadding }); try { return strip_padding(plaintext.toString(CryptoJS.enc.Utf8), padding_char); } catch (err) { // encoding failed; wrong password return false; } }; // Reload scripts src after decryption process var reload_js = function(src) { $('script[src=\"' + src + '\"]').remove(); $('<script>').attr('src', src).appendTo('head'); }; var init_decryptor = function() { var password_input = document.getElementById('mkdocs-content-password'), encrypted_content = document.getElementById('mkdocs-encrypted-content'), decrypted_content = document.getElementById('mkdocs-decrypted-content'), decrypt_form = document.getElementById('mkdocs-decrypt-form'); // Adjust password field width to placeholder length let input = document.getElementById(\"mkdocs-content-password\"); input.setAttribute('size', input.getAttribute('placeholder').length); // Decrypt content var decrypt_action = function() { // grab the ciphertext bundle var parts = encrypted_content.innerHTML.split(';'); // decrypt it var content = decrypt_content( password_input.value, parts[0], parts[1], parts[2] ); if (content) { // success; display the decrypted content decrypted_content.innerHTML = content; encrypted_content.parentNode.removeChild(encrypted_content); // any post processing on the decrypted content should be done here MathJax.typesetPromise() } else { // create HTML element for the inform message var decrypt_msg = document.createElement('p'); decrypt_msg.setAttribute('id', 'mkdocs-decrypt-msg') var node = document.createTextNode('Invalid password.') decrypt_msg.appendChild(node) var mkdocs_decrypt_msg = document.getElementById('mkdocs-decrypt-msg'); // clear all previous failure messages while (mkdocs_decrypt_msg.firstChild) { mkdocs_decrypt_msg.firstChild.remove(); } mkdocs_decrypt_msg.appendChild(decrypt_msg); password_input.value = ''; password_input.focus(); } } password_input.addEventListener('keydown', function(event) { if (event.key === \"Enter\") { event.preventDefault(); decrypt_action(); } }); }; document.addEventListener('DOMContentLoaded', init_decryptor); })();","title":"[Protected] Using the Repository Pattern in You API Architecture"},{"location":"Standing%20Up%20an%20ASP.NET%20Core%20Web%20API/caching-data/","text":"7YL2cXMKc0iGbB3RkKErGA==;aTJ8Xby5chLFnezy+kTT089qbzZGgj9lEWW9Uybl5F7JPvuobL2iOcvtpmvb5a/A9y4lwTzHAV8t9Y0sS8iyQ9Y3E+g6GwG8AukNV9HRX9+/LLbLXi/IkRF42bIfmGe2w31VC6WbPdBHUVHb8Dvt8e5qglKpfrBY7//xbWWu6odBmJyi/nX6/mSzr5ozUgWEyMxVWIO9kxxw2ODA02Gfng==;^ This content is protected with AES encryption. Contact your administrator for access to this page. (function() { var strip_padding = function(padded_content, padding_char) { /* Strips the padding character from decrypted content. */ for (var i = padded_content.length; i > 0; i--) { if (padded_content[i - 1] !== padding_char) { return padded_content.slice(0, i); } } }; var decrypt_content = function(password, iv_b64, ciphertext_b64, padding_char) { /* Decrypts the content from the ciphertext bundle. */ var key = CryptoJS.MD5(password), iv = CryptoJS.enc.Base64.parse(iv_b64), ciphertext = CryptoJS.enc.Base64.parse(ciphertext_b64), bundle = { key: key, iv: iv, ciphertext: ciphertext }; var plaintext = CryptoJS.AES.decrypt(bundle, key, { iv: iv, padding: CryptoJS.pad.NoPadding }); try { return strip_padding(plaintext.toString(CryptoJS.enc.Utf8), padding_char); } catch (err) { // encoding failed; wrong password return false; } }; // Reload scripts src after decryption process var reload_js = function(src) { $('script[src=\"' + src + '\"]').remove(); $('<script>').attr('src', src).appendTo('head'); }; var init_decryptor = function() { var password_input = document.getElementById('mkdocs-content-password'), encrypted_content = document.getElementById('mkdocs-encrypted-content'), decrypted_content = document.getElementById('mkdocs-decrypted-content'), decrypt_form = document.getElementById('mkdocs-decrypt-form'); // Adjust password field width to placeholder length let input = document.getElementById(\"mkdocs-content-password\"); input.setAttribute('size', input.getAttribute('placeholder').length); // Decrypt content var decrypt_action = function() { // grab the ciphertext bundle var parts = encrypted_content.innerHTML.split(';'); // decrypt it var content = decrypt_content( password_input.value, parts[0], parts[1], parts[2] ); if (content) { // success; display the decrypted content decrypted_content.innerHTML = content; encrypted_content.parentNode.removeChild(encrypted_content); // any post processing on the decrypted content should be done here MathJax.typesetPromise() } else { // create HTML element for the inform message var decrypt_msg = document.createElement('p'); decrypt_msg.setAttribute('id', 'mkdocs-decrypt-msg') var node = document.createTextNode('Invalid password.') decrypt_msg.appendChild(node) var mkdocs_decrypt_msg = document.getElementById('mkdocs-decrypt-msg'); // clear all previous failure messages while (mkdocs_decrypt_msg.firstChild) { mkdocs_decrypt_msg.firstChild.remove(); } mkdocs_decrypt_msg.appendChild(decrypt_msg); password_input.value = ''; password_input.focus(); } } password_input.addEventListener('keydown', function(event) { if (event.key === \"Enter\") { event.preventDefault(); decrypt_action(); } }); }; document.addEventListener('DOMContentLoaded', init_decryptor); })();","title":"[Protected] Caching Data in your API"},{"location":"Standing%20Up%20an%20ASP.NET%20Core%20Web%20API/develop-data-access/","text":"tB7L0e2dey/ZDOa3Rmj1qQ==;hRX+aOZ3WFhTex9rb+woGXwSmxS9gvZdbyrNahW7WQZsTq1nuRc0tKu3qG6ZpmhtUeoxQa/U6GYPZKyOC4JxmXAaBhFW1+rQHKuC9NDLut3S7BTXVD2Icy+hic7eTXOAixUA6LtkiHCPcUZ5VnRZu8++CfqSjUUFDgVp6T4f1AdTXs81OlbPG/loE3OAxvW1S7xm9duWC/Qok4TU1wuyzQ+3Iip2n1E/FaFaNtC8ZJeoE3kwpwmbXIehcKIQSoe0xHNUMjCgqFv5h1BW1KEr9s4pZKSegoTxHfA7vn+b6uA=;^ This content is protected with AES encryption. Contact your administrator for access to this page. (function() { var strip_padding = function(padded_content, padding_char) { /* Strips the padding character from decrypted content. */ for (var i = padded_content.length; i > 0; i--) { if (padded_content[i - 1] !== padding_char) { return padded_content.slice(0, i); } } }; var decrypt_content = function(password, iv_b64, ciphertext_b64, padding_char) { /* Decrypts the content from the ciphertext bundle. */ var key = CryptoJS.MD5(password), iv = CryptoJS.enc.Base64.parse(iv_b64), ciphertext = CryptoJS.enc.Base64.parse(ciphertext_b64), bundle = { key: key, iv: iv, ciphertext: ciphertext }; var plaintext = CryptoJS.AES.decrypt(bundle, key, { iv: iv, padding: CryptoJS.pad.NoPadding }); try { return strip_padding(plaintext.toString(CryptoJS.enc.Utf8), padding_char); } catch (err) { // encoding failed; wrong password return false; } }; // Reload scripts src after decryption process var reload_js = function(src) { $('script[src=\"' + src + '\"]').remove(); $('<script>').attr('src', src).appendTo('head'); }; var init_decryptor = function() { var password_input = document.getElementById('mkdocs-content-password'), encrypted_content = document.getElementById('mkdocs-encrypted-content'), decrypted_content = document.getElementById('mkdocs-decrypted-content'), decrypt_form = document.getElementById('mkdocs-decrypt-form'); // Adjust password field width to placeholder length let input = document.getElementById(\"mkdocs-content-password\"); input.setAttribute('size', input.getAttribute('placeholder').length); // Decrypt content var decrypt_action = function() { // grab the ciphertext bundle var parts = encrypted_content.innerHTML.split(';'); // decrypt it var content = decrypt_content( password_input.value, parts[0], parts[1], parts[2] ); if (content) { // success; display the decrypted content decrypted_content.innerHTML = content; encrypted_content.parentNode.removeChild(encrypted_content); // any post processing on the decrypted content should be done here MathJax.typesetPromise() } else { // create HTML element for the inform message var decrypt_msg = document.createElement('p'); decrypt_msg.setAttribute('id', 'mkdocs-decrypt-msg') var node = document.createTextNode('Invalid password.') decrypt_msg.appendChild(node) var mkdocs_decrypt_msg = document.getElementById('mkdocs-decrypt-msg'); // clear all previous failure messages while (mkdocs_decrypt_msg.firstChild) { mkdocs_decrypt_msg.firstChild.remove(); } mkdocs_decrypt_msg.appendChild(decrypt_msg); password_input.value = ''; password_input.focus(); } } password_input.addEventListener('keydown', function(event) { if (event.key === \"Enter\") { event.preventDefault(); decrypt_action(); } }); }; document.addEventListener('DOMContentLoaded', init_decryptor); })();","title":"[Protected] Developing Data Access for your Web API"},{"location":"Standing%20Up%20an%20ASP.NET%20Core%20Web%20API/documenting-with-swagger/","text":"XRSx3W1KJx7jj/hksU3vIg==;CbnhnKuxgB6tjzK80FgTQaj9C3W/tF18h8wZmfB6rcfMcj/ygEdUxcisli0ribSxD25ey3pEO3EJFSOmRxsUOIrZZ6o7YHXsD1AkZntTbATsDoBvrLZGMTRF4sNP6DK7Wckc4UaofL+VNdzjwJOmhWolQBt9omCYyOuDkZ9j+3KWZ6vvfGtOSlsS1WY0Suu2uI2W9nd8UJriEbuduCYL/lr2aUC4fR+mKBmZtwLkr8UmZyzCKqPMnziqqKYKWxFG;^ This content is protected with AES encryption. Contact your administrator for access to this page. (function() { var strip_padding = function(padded_content, padding_char) { /* Strips the padding character from decrypted content. */ for (var i = padded_content.length; i > 0; i--) { if (padded_content[i - 1] !== padding_char) { return padded_content.slice(0, i); } } }; var decrypt_content = function(password, iv_b64, ciphertext_b64, padding_char) { /* Decrypts the content from the ciphertext bundle. */ var key = CryptoJS.MD5(password), iv = CryptoJS.enc.Base64.parse(iv_b64), ciphertext = CryptoJS.enc.Base64.parse(ciphertext_b64), bundle = { key: key, iv: iv, ciphertext: ciphertext }; var plaintext = CryptoJS.AES.decrypt(bundle, key, { iv: iv, padding: CryptoJS.pad.NoPadding }); try { return strip_padding(plaintext.toString(CryptoJS.enc.Utf8), padding_char); } catch (err) { // encoding failed; wrong password return false; } }; // Reload scripts src after decryption process var reload_js = function(src) { $('script[src=\"' + src + '\"]').remove(); $('<script>').attr('src', src).appendTo('head'); }; var init_decryptor = function() { var password_input = document.getElementById('mkdocs-content-password'), encrypted_content = document.getElementById('mkdocs-encrypted-content'), decrypted_content = document.getElementById('mkdocs-decrypted-content'), decrypt_form = document.getElementById('mkdocs-decrypt-form'); // Adjust password field width to placeholder length let input = document.getElementById(\"mkdocs-content-password\"); input.setAttribute('size', input.getAttribute('placeholder').length); // Decrypt content var decrypt_action = function() { // grab the ciphertext bundle var parts = encrypted_content.innerHTML.split(';'); // decrypt it var content = decrypt_content( password_input.value, parts[0], parts[1], parts[2] ); if (content) { // success; display the decrypted content decrypted_content.innerHTML = content; encrypted_content.parentNode.removeChild(encrypted_content); // any post processing on the decrypted content should be done here MathJax.typesetPromise() } else { // create HTML element for the inform message var decrypt_msg = document.createElement('p'); decrypt_msg.setAttribute('id', 'mkdocs-decrypt-msg') var node = document.createTextNode('Invalid password.') decrypt_msg.appendChild(node) var mkdocs_decrypt_msg = document.getElementById('mkdocs-decrypt-msg'); // clear all previous failure messages while (mkdocs_decrypt_msg.firstChild) { mkdocs_decrypt_msg.firstChild.remove(); } mkdocs_decrypt_msg.appendChild(decrypt_msg); password_input.value = ''; password_input.focus(); } } password_input.addEventListener('keydown', function(event) { if (event.key === \"Enter\") { event.preventDefault(); decrypt_action(); } }); }; document.addEventListener('DOMContentLoaded', init_decryptor); })();","title":"[Protected] Documenting your API with Swagger"},{"location":"Standing%20Up%20an%20ASP.NET%20Core%20Web%20API/handling-errors/","text":"Cn36NugPjgOdkx06FE+mIg==;a4SXQ7SdoOkiewKWDsv2TN8HvwEruJ4TUJyIDqb0pf1Q+u2SnVcjImCrD+aDGxr9rk4Kt+NX+uozlPoBfL4fTgybZ7PMpN8LWdsKtGk1uVmlWs7Vt9U1oTTkZjNzMicD5VxWES8HLVOAjYI/G8EWuXIL/7+iU1NXVFOxOUZtckbn3LrfAae4l0Ug4GfTYs4Wuo9IDa8Jln4Wc9BBncCz48ey/C8g+JZXZY3KoofHEpDKAvVS18yEXuuozPc+iBun;^ This content is protected with AES encryption. Contact your administrator for access to this page. (function() { var strip_padding = function(padded_content, padding_char) { /* Strips the padding character from decrypted content. */ for (var i = padded_content.length; i > 0; i--) { if (padded_content[i - 1] !== padding_char) { return padded_content.slice(0, i); } } }; var decrypt_content = function(password, iv_b64, ciphertext_b64, padding_char) { /* Decrypts the content from the ciphertext bundle. */ var key = CryptoJS.MD5(password), iv = CryptoJS.enc.Base64.parse(iv_b64), ciphertext = CryptoJS.enc.Base64.parse(ciphertext_b64), bundle = { key: key, iv: iv, ciphertext: ciphertext }; var plaintext = CryptoJS.AES.decrypt(bundle, key, { iv: iv, padding: CryptoJS.pad.NoPadding }); try { return strip_padding(plaintext.toString(CryptoJS.enc.Utf8), padding_char); } catch (err) { // encoding failed; wrong password return false; } }; // Reload scripts src after decryption process var reload_js = function(src) { $('script[src=\"' + src + '\"]').remove(); $('<script>').attr('src', src).appendTo('head'); }; var init_decryptor = function() { var password_input = document.getElementById('mkdocs-content-password'), encrypted_content = document.getElementById('mkdocs-encrypted-content'), decrypted_content = document.getElementById('mkdocs-decrypted-content'), decrypt_form = document.getElementById('mkdocs-decrypt-form'); // Adjust password field width to placeholder length let input = document.getElementById(\"mkdocs-content-password\"); input.setAttribute('size', input.getAttribute('placeholder').length); // Decrypt content var decrypt_action = function() { // grab the ciphertext bundle var parts = encrypted_content.innerHTML.split(';'); // decrypt it var content = decrypt_content( password_input.value, parts[0], parts[1], parts[2] ); if (content) { // success; display the decrypted content decrypted_content.innerHTML = content; encrypted_content.parentNode.removeChild(encrypted_content); // any post processing on the decrypted content should be done here MathJax.typesetPromise() } else { // create HTML element for the inform message var decrypt_msg = document.createElement('p'); decrypt_msg.setAttribute('id', 'mkdocs-decrypt-msg') var node = document.createTextNode('Invalid password.') decrypt_msg.appendChild(node) var mkdocs_decrypt_msg = document.getElementById('mkdocs-decrypt-msg'); // clear all previous failure messages while (mkdocs_decrypt_msg.firstChild) { mkdocs_decrypt_msg.firstChild.remove(); } mkdocs_decrypt_msg.appendChild(decrypt_msg); password_input.value = ''; password_input.focus(); } } password_input.addEventListener('keydown', function(event) { if (event.key === \"Enter\") { event.preventDefault(); decrypt_action(); } }); }; document.addEventListener('DOMContentLoaded', init_decryptor); })();","title":"[Protected] Handling Errors in your API"},{"location":"Standing%20Up%20an%20ASP.NET%20Core%20Web%20API/identity/","text":"hbUs+EQJMJ15ua3g4Z+hng==;e9vPuLlBWEwMUk8FvD6RjnU6ZfpYGMiZnaEz7WQnucN2O/jyMGMKptNeys8NYFz1Je9/32Sk3NfyiD7Knt1aNNcnyoqzVmmhBabyqqpGsPRMybdm0uLYlssN/VRqnRNvKTgsmyDiKhbIojLq//N4MZCbytAS4P6h78QFkb1yfPEuAtzE89Guakmdh0gy7GXEgyLOgHp4oGHxP08yhxNqbw==;^ This content is protected with AES encryption. Contact your administrator for access to this page. (function() { var strip_padding = function(padded_content, padding_char) { /* Strips the padding character from decrypted content. */ for (var i = padded_content.length; i > 0; i--) { if (padded_content[i - 1] !== padding_char) { return padded_content.slice(0, i); } } }; var decrypt_content = function(password, iv_b64, ciphertext_b64, padding_char) { /* Decrypts the content from the ciphertext bundle. */ var key = CryptoJS.MD5(password), iv = CryptoJS.enc.Base64.parse(iv_b64), ciphertext = CryptoJS.enc.Base64.parse(ciphertext_b64), bundle = { key: key, iv: iv, ciphertext: ciphertext }; var plaintext = CryptoJS.AES.decrypt(bundle, key, { iv: iv, padding: CryptoJS.pad.NoPadding }); try { return strip_padding(plaintext.toString(CryptoJS.enc.Utf8), padding_char); } catch (err) { // encoding failed; wrong password return false; } }; // Reload scripts src after decryption process var reload_js = function(src) { $('script[src=\"' + src + '\"]').remove(); $('<script>').attr('src', src).appendTo('head'); }; var init_decryptor = function() { var password_input = document.getElementById('mkdocs-content-password'), encrypted_content = document.getElementById('mkdocs-encrypted-content'), decrypted_content = document.getElementById('mkdocs-decrypted-content'), decrypt_form = document.getElementById('mkdocs-decrypt-form'); // Adjust password field width to placeholder length let input = document.getElementById(\"mkdocs-content-password\"); input.setAttribute('size', input.getAttribute('placeholder').length); // Decrypt content var decrypt_action = function() { // grab the ciphertext bundle var parts = encrypted_content.innerHTML.split(';'); // decrypt it var content = decrypt_content( password_input.value, parts[0], parts[1], parts[2] ); if (content) { // success; display the decrypted content decrypted_content.innerHTML = content; encrypted_content.parentNode.removeChild(encrypted_content); // any post processing on the decrypted content should be done here MathJax.typesetPromise() } else { // create HTML element for the inform message var decrypt_msg = document.createElement('p'); decrypt_msg.setAttribute('id', 'mkdocs-decrypt-msg') var node = document.createTextNode('Invalid password.') decrypt_msg.appendChild(node) var mkdocs_decrypt_msg = document.getElementById('mkdocs-decrypt-msg'); // clear all previous failure messages while (mkdocs_decrypt_msg.firstChild) { mkdocs_decrypt_msg.firstChild.remove(); } mkdocs_decrypt_msg.appendChild(decrypt_msg); password_input.value = ''; password_input.focus(); } } password_input.addEventListener('keydown', function(event) { if (event.key === \"Enter\") { event.preventDefault(); decrypt_action(); } }); }; document.addEventListener('DOMContentLoaded', init_decryptor); })();","title":"[Protected] Identity in your Web API"},{"location":"Standing%20Up%20an%20ASP.NET%20Core%20Web%20API/versioning/","text":"yeHf/UDg6bxKAezB8IvVCw==;cNkvU8Ru0hgb/62zIBm6R5S+tvHz3A+Ja4DDjl8nRRToNr4yvVYkhI8Wx8ccswVKT36MGb+ncRffkZgvhrlYEpLEJEXGx7NLQ+EQwqYT9zpkCw3P35IyGGOLOtubL+HBzVhwSmBGOUQ3CQBcVVHAxeaWRbVdxPN4pzHwg1MJKsJtQW4E8RQeaUN0XN+ju0Ms3b22gdysBJwJWYKyPueU9w==;^ This content is protected with AES encryption. Contact your administrator for access to this page. (function() { var strip_padding = function(padded_content, padding_char) { /* Strips the padding character from decrypted content. */ for (var i = padded_content.length; i > 0; i--) { if (padded_content[i - 1] !== padding_char) { return padded_content.slice(0, i); } } }; var decrypt_content = function(password, iv_b64, ciphertext_b64, padding_char) { /* Decrypts the content from the ciphertext bundle. */ var key = CryptoJS.MD5(password), iv = CryptoJS.enc.Base64.parse(iv_b64), ciphertext = CryptoJS.enc.Base64.parse(ciphertext_b64), bundle = { key: key, iv: iv, ciphertext: ciphertext }; var plaintext = CryptoJS.AES.decrypt(bundle, key, { iv: iv, padding: CryptoJS.pad.NoPadding }); try { return strip_padding(plaintext.toString(CryptoJS.enc.Utf8), padding_char); } catch (err) { // encoding failed; wrong password return false; } }; // Reload scripts src after decryption process var reload_js = function(src) { $('script[src=\"' + src + '\"]').remove(); $('<script>').attr('src', src).appendTo('head'); }; var init_decryptor = function() { var password_input = document.getElementById('mkdocs-content-password'), encrypted_content = document.getElementById('mkdocs-encrypted-content'), decrypted_content = document.getElementById('mkdocs-decrypted-content'), decrypt_form = document.getElementById('mkdocs-decrypt-form'); // Adjust password field width to placeholder length let input = document.getElementById(\"mkdocs-content-password\"); input.setAttribute('size', input.getAttribute('placeholder').length); // Decrypt content var decrypt_action = function() { // grab the ciphertext bundle var parts = encrypted_content.innerHTML.split(';'); // decrypt it var content = decrypt_content( password_input.value, parts[0], parts[1], parts[2] ); if (content) { // success; display the decrypted content decrypted_content.innerHTML = content; encrypted_content.parentNode.removeChild(encrypted_content); // any post processing on the decrypted content should be done here MathJax.typesetPromise() } else { // create HTML element for the inform message var decrypt_msg = document.createElement('p'); decrypt_msg.setAttribute('id', 'mkdocs-decrypt-msg') var node = document.createTextNode('Invalid password.') decrypt_msg.appendChild(node) var mkdocs_decrypt_msg = document.getElementById('mkdocs-decrypt-msg'); // clear all previous failure messages while (mkdocs_decrypt_msg.firstChild) { mkdocs_decrypt_msg.firstChild.remove(); } mkdocs_decrypt_msg.appendChild(decrypt_msg); password_input.value = ''; password_input.focus(); } } password_input.addEventListener('keydown', function(event) { if (event.key === \"Enter\") { event.preventDefault(); decrypt_action(); } }); }; document.addEventListener('DOMContentLoaded', init_decryptor); })();","title":"[Protected] Versioning your Web API"},{"location":"Standing%20Up%20an%20ASP.NET%20Core%20Web%20API/what-is-a-web-api/","text":"DfUO4Ati9OHzwYw+DkdKqA==;ZxM+OQWDMaSYd+Mkx86w6NkmbFyWn7oHzQHUugneYv96ujaW9bKAn24T5LzrmT+qZXzla98rxtUO3n3UwSJtUkOQ4xssvYipSt4kqoqx5vsu7ZxxV1JX781cgC/Vai8NDkt8H2/7boopL3vx88ndjUjeWYMHerLyNF9UG0Tk8417Tg8N+uU6GlqzcFOhHJreH8ZyPERF3D8bSR7XDE7IfA==;^ This content is protected with AES encryption. Contact your administrator for access to this page. (function() { var strip_padding = function(padded_content, padding_char) { /* Strips the padding character from decrypted content. */ for (var i = padded_content.length; i > 0; i--) { if (padded_content[i - 1] !== padding_char) { return padded_content.slice(0, i); } } }; var decrypt_content = function(password, iv_b64, ciphertext_b64, padding_char) { /* Decrypts the content from the ciphertext bundle. */ var key = CryptoJS.MD5(password), iv = CryptoJS.enc.Base64.parse(iv_b64), ciphertext = CryptoJS.enc.Base64.parse(ciphertext_b64), bundle = { key: key, iv: iv, ciphertext: ciphertext }; var plaintext = CryptoJS.AES.decrypt(bundle, key, { iv: iv, padding: CryptoJS.pad.NoPadding }); try { return strip_padding(plaintext.toString(CryptoJS.enc.Utf8), padding_char); } catch (err) { // encoding failed; wrong password return false; } }; // Reload scripts src after decryption process var reload_js = function(src) { $('script[src=\"' + src + '\"]').remove(); $('<script>').attr('src', src).appendTo('head'); }; var init_decryptor = function() { var password_input = document.getElementById('mkdocs-content-password'), encrypted_content = document.getElementById('mkdocs-encrypted-content'), decrypted_content = document.getElementById('mkdocs-decrypted-content'), decrypt_form = document.getElementById('mkdocs-decrypt-form'); // Adjust password field width to placeholder length let input = document.getElementById(\"mkdocs-content-password\"); input.setAttribute('size', input.getAttribute('placeholder').length); // Decrypt content var decrypt_action = function() { // grab the ciphertext bundle var parts = encrypted_content.innerHTML.split(';'); // decrypt it var content = decrypt_content( password_input.value, parts[0], parts[1], parts[2] ); if (content) { // success; display the decrypted content decrypted_content.innerHTML = content; encrypted_content.parentNode.removeChild(encrypted_content); // any post processing on the decrypted content should be done here MathJax.typesetPromise() } else { // create HTML element for the inform message var decrypt_msg = document.createElement('p'); decrypt_msg.setAttribute('id', 'mkdocs-decrypt-msg') var node = document.createTextNode('Invalid password.') decrypt_msg.appendChild(node) var mkdocs_decrypt_msg = document.getElementById('mkdocs-decrypt-msg'); // clear all previous failure messages while (mkdocs_decrypt_msg.firstChild) { mkdocs_decrypt_msg.firstChild.remove(); } mkdocs_decrypt_msg.appendChild(decrypt_msg); password_input.value = ''; password_input.focus(); } } password_input.addEventListener('keydown', function(event) { if (event.key === \"Enter\") { event.preventDefault(); decrypt_action(); } }); }; document.addEventListener('DOMContentLoaded', init_decryptor); })();","title":"[Protected] What is a Web API?"},{"location":"Standing%20Up%20an%20ASP.NET%20Core%20Web%20API/what-is-rest/","text":"QhyHnXKpXVKgnRm3Tw9h8Q==;wiexJ/Qd6YGdbJizZ+LS0g3hG5+2NAm2jOoKOmWeVJxn+iP+r++lLl9Mbse97E48DUdRZANQV9VrZbxRTHpxXfhOu5BOCa3EAdRQVs+IyefJfIwQk3FrCi6t55BxarRGDld4vsBvIClZwsueJ+Jx31RsG3nyUIzkHFn8C7bzlwI=;^ This content is protected with AES encryption. Contact your administrator for access to this page. (function() { var strip_padding = function(padded_content, padding_char) { /* Strips the padding character from decrypted content. */ for (var i = padded_content.length; i > 0; i--) { if (padded_content[i - 1] !== padding_char) { return padded_content.slice(0, i); } } }; var decrypt_content = function(password, iv_b64, ciphertext_b64, padding_char) { /* Decrypts the content from the ciphertext bundle. */ var key = CryptoJS.MD5(password), iv = CryptoJS.enc.Base64.parse(iv_b64), ciphertext = CryptoJS.enc.Base64.parse(ciphertext_b64), bundle = { key: key, iv: iv, ciphertext: ciphertext }; var plaintext = CryptoJS.AES.decrypt(bundle, key, { iv: iv, padding: CryptoJS.pad.NoPadding }); try { return strip_padding(plaintext.toString(CryptoJS.enc.Utf8), padding_char); } catch (err) { // encoding failed; wrong password return false; } }; // Reload scripts src after decryption process var reload_js = function(src) { $('script[src=\"' + src + '\"]').remove(); $('<script>').attr('src', src).appendTo('head'); }; var init_decryptor = function() { var password_input = document.getElementById('mkdocs-content-password'), encrypted_content = document.getElementById('mkdocs-encrypted-content'), decrypted_content = document.getElementById('mkdocs-decrypted-content'), decrypt_form = document.getElementById('mkdocs-decrypt-form'); // Adjust password field width to placeholder length let input = document.getElementById(\"mkdocs-content-password\"); input.setAttribute('size', input.getAttribute('placeholder').length); // Decrypt content var decrypt_action = function() { // grab the ciphertext bundle var parts = encrypted_content.innerHTML.split(';'); // decrypt it var content = decrypt_content( password_input.value, parts[0], parts[1], parts[2] ); if (content) { // success; display the decrypted content decrypted_content.innerHTML = content; encrypted_content.parentNode.removeChild(encrypted_content); // any post processing on the decrypted content should be done here MathJax.typesetPromise() } else { // create HTML element for the inform message var decrypt_msg = document.createElement('p'); decrypt_msg.setAttribute('id', 'mkdocs-decrypt-msg') var node = document.createTextNode('Invalid password.') decrypt_msg.appendChild(node) var mkdocs_decrypt_msg = document.getElementById('mkdocs-decrypt-msg'); // clear all previous failure messages while (mkdocs_decrypt_msg.firstChild) { mkdocs_decrypt_msg.firstChild.remove(); } mkdocs_decrypt_msg.appendChild(decrypt_msg); password_input.value = ''; password_input.focus(); } } password_input.addEventListener('keydown', function(event) { if (event.key === \"Enter\") { event.preventDefault(); decrypt_action(); } }); }; document.addEventListener('DOMContentLoaded', init_decryptor); })();","title":"[Protected] What is REST?"},{"location":"Standing%20Up%20an%20ASP.NET%20Core%20Web%20API/your-first-aspnet-core-web-api/","text":"GTdSX4dyoLP7nnuGH/747A==;rYDDry49zxl7lUpfKjACijVXbryklaPy2jIaNybaPHO03ydCee5frWGXlqML/hKIoY0Jrqacn9l6/ELzfSdmp1dIZVyijeDtIwwGdYI79D7TyVmn5ebWPt/DICi4BvbRkPlqnaEmOYq5E3W3BCCYSCxmMQsza7d2VLNkNWGlslnTGEbY5CGQNLNj59hnUiZngdqTBpIbSV2pBkJpv5bZPw==;^ This content is protected with AES encryption. Contact your administrator for access to this page. (function() { var strip_padding = function(padded_content, padding_char) { /* Strips the padding character from decrypted content. */ for (var i = padded_content.length; i > 0; i--) { if (padded_content[i - 1] !== padding_char) { return padded_content.slice(0, i); } } }; var decrypt_content = function(password, iv_b64, ciphertext_b64, padding_char) { /* Decrypts the content from the ciphertext bundle. */ var key = CryptoJS.MD5(password), iv = CryptoJS.enc.Base64.parse(iv_b64), ciphertext = CryptoJS.enc.Base64.parse(ciphertext_b64), bundle = { key: key, iv: iv, ciphertext: ciphertext }; var plaintext = CryptoJS.AES.decrypt(bundle, key, { iv: iv, padding: CryptoJS.pad.NoPadding }); try { return strip_padding(plaintext.toString(CryptoJS.enc.Utf8), padding_char); } catch (err) { // encoding failed; wrong password return false; } }; // Reload scripts src after decryption process var reload_js = function(src) { $('script[src=\"' + src + '\"]').remove(); $('<script>').attr('src', src).appendTo('head'); }; var init_decryptor = function() { var password_input = document.getElementById('mkdocs-content-password'), encrypted_content = document.getElementById('mkdocs-encrypted-content'), decrypted_content = document.getElementById('mkdocs-decrypted-content'), decrypt_form = document.getElementById('mkdocs-decrypt-form'); // Adjust password field width to placeholder length let input = document.getElementById(\"mkdocs-content-password\"); input.setAttribute('size', input.getAttribute('placeholder').length); // Decrypt content var decrypt_action = function() { // grab the ciphertext bundle var parts = encrypted_content.innerHTML.split(';'); // decrypt it var content = decrypt_content( password_input.value, parts[0], parts[1], parts[2] ); if (content) { // success; display the decrypted content decrypted_content.innerHTML = content; encrypted_content.parentNode.removeChild(encrypted_content); // any post processing on the decrypted content should be done here MathJax.typesetPromise() } else { // create HTML element for the inform message var decrypt_msg = document.createElement('p'); decrypt_msg.setAttribute('id', 'mkdocs-decrypt-msg') var node = document.createTextNode('Invalid password.') decrypt_msg.appendChild(node) var mkdocs_decrypt_msg = document.getElementById('mkdocs-decrypt-msg'); // clear all previous failure messages while (mkdocs_decrypt_msg.firstChild) { mkdocs_decrypt_msg.firstChild.remove(); } mkdocs_decrypt_msg.appendChild(decrypt_msg); password_input.value = ''; password_input.focus(); } } password_input.addEventListener('keydown', function(event) { if (event.key === \"Enter\") { event.preventDefault(); decrypt_action(); } }); }; document.addEventListener('DOMContentLoaded', init_decryptor); })();","title":"[Protected] Your first ASP.NET Core Web API"},{"location":"Testing%20Your%20AP/integration-testing/","text":"QLwN4d3nPqCYUR0oEzi16Q==;bjyhAwLvCNXPesF+jwRqat7th/bvMSnKJ8KMbV1U+bewp6SH/Lu+E1S8Cjqu627e+/aGsgBPoYjcOnJ1Zu9behTxSIpqKWWFLXii7jdE37jwfIOD6KfKaoo0OvKD5dff6pk9XDTaQqCbvDXkWXPI5T51s88GwQDXi7L2FGQ2DNycxzgLalVlQ14ZHBQGFh6iDdkxoTFMDE+ayxTyZn+twbVOY9ocPKBD1QbFLf9qdOXSfP4VBqOaKur23ne1wEXBFKnNprrjvSUt1xcKkgKcb5WjfemUiqkbeVFjPRR0dZ+gKtReh4dk95maqVjxdtnk0XNhfyCs+DMCpScDpOzDSQ==;^ This content is protected with AES encryption. Contact your administrator for access to this page. (function() { var strip_padding = function(padded_content, padding_char) { /* Strips the padding character from decrypted content. */ for (var i = padded_content.length; i > 0; i--) { if (padded_content[i - 1] !== padding_char) { return padded_content.slice(0, i); } } }; var decrypt_content = function(password, iv_b64, ciphertext_b64, padding_char) { /* Decrypts the content from the ciphertext bundle. */ var key = CryptoJS.MD5(password), iv = CryptoJS.enc.Base64.parse(iv_b64), ciphertext = CryptoJS.enc.Base64.parse(ciphertext_b64), bundle = { key: key, iv: iv, ciphertext: ciphertext }; var plaintext = CryptoJS.AES.decrypt(bundle, key, { iv: iv, padding: CryptoJS.pad.NoPadding }); try { return strip_padding(plaintext.toString(CryptoJS.enc.Utf8), padding_char); } catch (err) { // encoding failed; wrong password return false; } }; // Reload scripts src after decryption process var reload_js = function(src) { $('script[src=\"' + src + '\"]').remove(); $('<script>').attr('src', src).appendTo('head'); }; var init_decryptor = function() { var password_input = document.getElementById('mkdocs-content-password'), encrypted_content = document.getElementById('mkdocs-encrypted-content'), decrypted_content = document.getElementById('mkdocs-decrypted-content'), decrypt_form = document.getElementById('mkdocs-decrypt-form'); // Adjust password field width to placeholder length let input = document.getElementById(\"mkdocs-content-password\"); input.setAttribute('size', input.getAttribute('placeholder').length); // Decrypt content var decrypt_action = function() { // grab the ciphertext bundle var parts = encrypted_content.innerHTML.split(';'); // decrypt it var content = decrypt_content( password_input.value, parts[0], parts[1], parts[2] ); if (content) { // success; display the decrypted content decrypted_content.innerHTML = content; encrypted_content.parentNode.removeChild(encrypted_content); // any post processing on the decrypted content should be done here MathJax.typesetPromise() } else { // create HTML element for the inform message var decrypt_msg = document.createElement('p'); decrypt_msg.setAttribute('id', 'mkdocs-decrypt-msg') var node = document.createTextNode('Invalid password.') decrypt_msg.appendChild(node) var mkdocs_decrypt_msg = document.getElementById('mkdocs-decrypt-msg'); // clear all previous failure messages while (mkdocs_decrypt_msg.firstChild) { mkdocs_decrypt_msg.firstChild.remove(); } mkdocs_decrypt_msg.appendChild(decrypt_msg); password_input.value = ''; password_input.focus(); } } password_input.addEventListener('keydown', function(event) { if (event.key === \"Enter\") { event.preventDefault(); decrypt_action(); } }); }; document.addEventListener('DOMContentLoaded', init_decryptor); })();","title":"[Protected] Creating and using Integrating Testing for your API"},{"location":"Testing%20Your%20AP/unit-testing/","text":"QdnAsj9NgC/Fw6i+HdIJrQ==;94FWOuMAZAnzLpXp8F8vImtds+AoPf5YZSVtk3rcFAH7beQxaaSk7yzt2vW5TYMn5X5x+ORM+msUDlMZUQLVnFPdUG/eg9zKLwWP3jXKLSBySJASQmb8K2v6EzYbFHc4tStQmSGuqEnMs9KBEenSKTZXYWDvaSnVbommtVnnYB5fGI7fGoypUfT9/1xwsSGXV7jqzccCxeeULZepXUcHvSS3tht4EbTvT23LDPowm+U3D1gp3qS9zg4vkOVt4vxgsEGmKpx0MiCzjJP+KdU5zNshokoxg9WvZnRgIshWKv4=;^ This content is protected with AES encryption. Contact your administrator for access to this page. (function() { var strip_padding = function(padded_content, padding_char) { /* Strips the padding character from decrypted content. */ for (var i = padded_content.length; i > 0; i--) { if (padded_content[i - 1] !== padding_char) { return padded_content.slice(0, i); } } }; var decrypt_content = function(password, iv_b64, ciphertext_b64, padding_char) { /* Decrypts the content from the ciphertext bundle. */ var key = CryptoJS.MD5(password), iv = CryptoJS.enc.Base64.parse(iv_b64), ciphertext = CryptoJS.enc.Base64.parse(ciphertext_b64), bundle = { key: key, iv: iv, ciphertext: ciphertext }; var plaintext = CryptoJS.AES.decrypt(bundle, key, { iv: iv, padding: CryptoJS.pad.NoPadding }); try { return strip_padding(plaintext.toString(CryptoJS.enc.Utf8), padding_char); } catch (err) { // encoding failed; wrong password return false; } }; // Reload scripts src after decryption process var reload_js = function(src) { $('script[src=\"' + src + '\"]').remove(); $('<script>').attr('src', src).appendTo('head'); }; var init_decryptor = function() { var password_input = document.getElementById('mkdocs-content-password'), encrypted_content = document.getElementById('mkdocs-encrypted-content'), decrypted_content = document.getElementById('mkdocs-decrypted-content'), decrypt_form = document.getElementById('mkdocs-decrypt-form'); // Adjust password field width to placeholder length let input = document.getElementById(\"mkdocs-content-password\"); input.setAttribute('size', input.getAttribute('placeholder').length); // Decrypt content var decrypt_action = function() { // grab the ciphertext bundle var parts = encrypted_content.innerHTML.split(';'); // decrypt it var content = decrypt_content( password_input.value, parts[0], parts[1], parts[2] ); if (content) { // success; display the decrypted content decrypted_content.innerHTML = content; encrypted_content.parentNode.removeChild(encrypted_content); // any post processing on the decrypted content should be done here MathJax.typesetPromise() } else { // create HTML element for the inform message var decrypt_msg = document.createElement('p'); decrypt_msg.setAttribute('id', 'mkdocs-decrypt-msg') var node = document.createTextNode('Invalid password.') decrypt_msg.appendChild(node) var mkdocs_decrypt_msg = document.getElementById('mkdocs-decrypt-msg'); // clear all previous failure messages while (mkdocs_decrypt_msg.firstChild) { mkdocs_decrypt_msg.firstChild.remove(); } mkdocs_decrypt_msg.appendChild(decrypt_msg); password_input.value = ''; password_input.focus(); } } password_input.addEventListener('keydown', function(event) { if (event.key === \"Enter\") { event.preventDefault(); decrypt_action(); } }); }; document.addEventListener('DOMContentLoaded', init_decryptor); })();","title":"[Protected] Creating and using Unit Testing for your API"}]}