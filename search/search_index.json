{"config":{"indexing":"full","lang":["en"],"min_search_length":3,"prebuild_index":false,"separator":"[\\s\\-]+"},"docs":[{"location":"","text":"Workshop Home \u00b6 For the source code for the workshop visit the ASP.NET 5 Web API Workshop GitHub repo. Interested in learning about designing, architecting and developing Web APIs using ASP.NET 5? Sign up for the VSLive! 2-Day Hands-On Training Seminar at Learn to Produce Effective Web APIs with ASP.NET 5 Workshop","title":"Home"},{"location":"#workshop-home","text":"For the source code for the workshop visit the ASP.NET 5 Web API Workshop GitHub repo. Interested in learning about designing, architecting and developing Web APIs using ASP.NET 5? Sign up for the VSLive! 2-Day Hands-On Training Seminar at Learn to Produce Effective Web APIs with ASP.NET 5 Workshop","title":"Workshop Home"},{"location":"about/","text":"About the Workshop \u00b6","title":"About"},{"location":"about/#about-the-workshop","text":"","title":"About the Workshop"},{"location":"installing-aspnet-5/","text":"Installing .NET 5 and ASP.NET 5 \u00b6 This page will instruct you how to download and install the .NET 5 SDK that includes ASP.NET 5 Web API. First, download the .NET SDK on your computer. Installing the SDK for .NET 5 \u00b6 Next install the .NET SDK on your computer. Next, open a terminal such as PowerShell , Command Prompt , or bash . Enter the following dotnet commands to verify that .NET 5 has been installed: dotnet --version You see the following output: 5.0.4 Congratulations! You're ready to create your first ASP.NET Web API. Next steps \u00b6 If you need some introduction to developing .NET applications, you can following the step-by-step tutorial or by watching .NET 101 videos on YouTube.","title":"Installing ASP.NET 5"},{"location":"installing-aspnet-5/#installing-net-5-and-aspnet-5","text":"This page will instruct you how to download and install the .NET 5 SDK that includes ASP.NET 5 Web API. First, download the .NET SDK on your computer.","title":"Installing .NET 5 and ASP.NET 5"},{"location":"installing-aspnet-5/#installing-the-sdk-for-net-5","text":"Next install the .NET SDK on your computer. Next, open a terminal such as PowerShell , Command Prompt , or bash . Enter the following dotnet commands to verify that .NET 5 has been installed: dotnet --version You see the following output: 5.0.4 Congratulations! You're ready to create your first ASP.NET Web API.","title":"Installing the SDK for .NET 5"},{"location":"installing-aspnet-5/#next-steps","text":"If you need some introduction to developing .NET applications, you can following the step-by-step tutorial or by watching .NET 101 videos on YouTube.","title":"Next steps"},{"location":"installing-mssql/","text":"Installing and Setting Up SQL Server 2019 \u00b6 Go to the Try SQL Server 2019 page and download the Developer version. Install locally. Creating the Chinook in MSSQL 2019 \u00b6 Get the Chinook database for this workshop in the GitHub repo. The file is a BAK backup so we will restore it to where you have MSSQL 2019 installed. It contains all data for the workshop and will be the starting point for the learning. Use SQL Server Management Studio to restore the database.","title":"Installing SQL Server"},{"location":"installing-mssql/#installing-and-setting-up-sql-server-2019","text":"Go to the Try SQL Server 2019 page and download the Developer version. Install locally.","title":"Installing and Setting Up SQL Server 2019"},{"location":"installing-mssql/#creating-the-chinook-in-mssql-2019","text":"Get the Chinook database for this workshop in the GitHub repo. The file is a BAK backup so we will restore it to where you have MSSQL 2019 installed. It contains all data for the workshop and will be the starting point for the learning. Use SQL Server Management Studio to restore the database.","title":"Creating the Chinook in MSSQL 2019"},{"location":"installing-postman/","text":"Installing and Setting Up Postman \u00b6 Download and install Postman for labs.","title":"Installing Postman"},{"location":"installing-postman/#installing-and-setting-up-postman","text":"Download and install Postman for labs.","title":"Installing and Setting Up Postman"},{"location":"introduction/","text":"Introduction to the Workshop \u00b6","title":"Introduction"},{"location":"introduction/#introduction-to-the-workshop","text":"","title":"Introduction to the Workshop"},{"location":"required-tech/","text":"Required Technologies for the Workshop \u00b6 Tech Where to download .NET 5 Download SQL Server Download Azure Account (optional) Create Account Postman Download","title":"Required Technology"},{"location":"required-tech/#required-technologies-for-the-workshop","text":"Tech Where to download .NET 5 Download SQL Server Download Azure Account (optional) Create Account Postman Download","title":"Required Technologies for the Workshop"},{"location":"setting-up-azure-sql/","text":"Creating and Setting up Your Azure Account for Azure SQL \u00b6","title":"Setting up Azure SQL"},{"location":"setting-up-azure-sql/#creating-and-setting-up-your-azure-account-for-azure-sql","text":"","title":"Creating and Setting up Your Azure Account for Azure SQL"},{"location":"Consuming%20ASP.NET%20Web%20API/consuming-web-api-in-dotnet/","text":"Consuming ASP.NET Web API in .NET \u00b6","title":"Consuming ASP.NET Web API in .NET"},{"location":"Consuming%20ASP.NET%20Web%20API/consuming-web-api-in-dotnet/#consuming-aspnet-web-api-in-net","text":"","title":"Consuming ASP.NET Web API in .NET"},{"location":"Consuming%20ASP.NET%20Web%20API/consuming-web-api-in-javascript/","text":"Consuming ASP.NET Web API in Javascript \u00b6","title":"Consuming ASP.NET Web API in Javascript"},{"location":"Consuming%20ASP.NET%20Web%20API/consuming-web-api-in-javascript/#consuming-aspnet-web-api-in-javascript","text":"","title":"Consuming ASP.NET Web API in Javascript"},{"location":"Consuming%20ASP.NET%20Web%20API/consuming-web-api-with-openapi/","text":"Consuming ASP.NET Web API with OpenAPI Document \u00b6","title":"Consuming ASP.NET Web API with OpenAPI Document"},{"location":"Consuming%20ASP.NET%20Web%20API/consuming-web-api-with-openapi/#consuming-aspnet-web-api-with-openapi-document","text":"","title":"Consuming ASP.NET Web API with OpenAPI Document"},{"location":"Standing%20Up%20an%20ASP.NET%20Core%20Web%20API/api-business-rules/","text":"Developing the Web API Business Rules \u00b6 START FROM PREVIOUS MODULE\"S END \u00b6 Developing the API endpoints ADD CROSS ORIGIN RESOURCE SHARING (CORS) TO API PROJECT \u00b6 ADD ADDCORS() TO SERVICESCONFIGURATION.CS \u00b6 public static void AddCORS ( this IServiceCollection services ) { services . AddCors ( options => { options . AddPolicy ( \"CorsPolicy\" , builder => builder . AllowAnyOrigin () . AllowAnyMethod () . AllowAnyHeader ()); }); } UPDATE STARTUP.CS public void ConfigureServices ( IServiceCollection services ) { services . AddConnectionProvider ( Configuration ); services . AddAppSettings ( Configuration ); services . ConfigureRepositories (); services . ConfigureSupervisor (); services . ConfigureValidators (); services . AddAPILogging (); services . AddCORS (); services . AddHealthChecks (); services . AddControllers (); } // This method gets called by the runtime. Use this method to configure the HTTP request pipeline. public void Configure ( IApplicationBuilder app , IWebHostEnvironment env ) { if ( env . IsDevelopment ()) { app . UseDeveloperExceptionPage (); } app . UseHttpsRedirection (); app . UseRouting (); app . UseCors (); app . UseAuthorization (); app . UseEndpoints ( endpoints => { endpoints . MapControllers (); }); } ADD FLUENTVALIDATION NUGET TO API AND DOMAIN PROJECTS \u00b6 dotnet add package FluentValidation ADD VALIDATORS TO DOMAIN PROJECT \u00b6 using ChinookASPNETWebAPI.Domain.ApiModels ; using FluentValidation ; namespace ChinookASPNETWebAPI.Domain.Validation { public class AlbumValidator : AbstractValidator < AlbumApiModel > { public AlbumValidator () { RuleFor ( a => a . Title ). NotNull (); RuleFor ( a => a . Title ). MinimumLength ( 3 ); RuleFor ( a => a . Title ). MaximumLength ( 160 ); RuleFor ( a => a . ArtistId ). NotNull (); } } } ADD CODE TO CALL VALIDATION IN SUPERVISOR \u00b6 public async Task < AlbumApiModel > AddAlbum ( AlbumApiModel newAlbumApiModel ) { await _albumValidator . ValidateAndThrowAsync ( newAlbumApiModel ); var album = newAlbumApiModel . Convert (); album = await _albumRepository . Add ( album ); newAlbumApiModel . Id = album . Id ; return newAlbumApiModel ; } public async Task < bool > UpdateAlbum ( AlbumApiModel albumApiModel ) { await _albumValidator . ValidateAndThrowAsync ( albumApiModel ); var album = await _albumRepository . GetById ( albumApiModel . Id ); if ( album is null ) return false ; album . Id = albumApiModel . Id ; album . Title = albumApiModel . Title ; album . ArtistId = albumApiModel . ArtistId ; return await _albumRepository . Update ( album ); } ADD ERROR HANDLING IN ACTIONS \u00b6 [Route(\"api/[controller] \")] [ApiController] [EnableCors(\"CorsPolicy\")] public class AlbumController : ControllerBase { private readonly IChinookSupervisor _chinookSupervisor ; private readonly ILogger < AlbumController > _logger ; public AlbumController ( IChinookSupervisor chinookSupervisor , ILogger < AlbumController > logger ) { _chinookSupervisor = chinookSupervisor ; _logger = logger ; } [HttpGet] [Produces(typeof(List<AlbumApiModel>))] public async Task < ActionResult < List < AlbumApiModel >>> Get () { try { var albums = await _chinookSupervisor . GetAllAlbum (); if ( albums . Any ()) { return Ok ( albums ); } else { return StatusCode (( int ) HttpStatusCode . NotFound , \"No Albums Could Be Found\" ); } } catch ( Exception ex ) { _logger . LogError ( $ \"Something went wrong inside the AlbumController Get action: {ex}\" ); return StatusCode (( int ) HttpStatusCode . InternalServerError , \"Error occurred while executing Get All Albums\" ); } } [HttpGet(\"{id}\", Name = \"GetAlbumById\")] public async Task < ActionResult < AlbumApiModel >> Get ( int id ) { try { var album = await _chinookSupervisor . GetAlbumById ( id ); if ( album != null ) { return Ok ( album ); } else { return StatusCode (( int ) HttpStatusCode . NotFound , \"Album Not Found\" ); } } catch ( Exception ex ) { _logger . LogError ( $ \"Something went wrong inside the AlbumController GetById action: {ex}\" ); return StatusCode (( int ) HttpStatusCode . InternalServerError , \"Error occurred while executing Get Album By Id\" ); } } [HttpPost] [Produces(\"application/json\")] [Consumes(\"application/json\")] public async Task < ActionResult < AlbumApiModel >> Post ([ FromBody ] AlbumApiModel input ) { try { if ( input == null ) { return StatusCode (( int ) HttpStatusCode . BadRequest , \"Given Album is null\" ); } else { return Ok ( await _chinookSupervisor . AddAlbum ( input )); } } catch ( ValidationException ex ) { _logger . LogError ( $ \"Something went wrong inside the AlbumController Add Album action: {ex}\" ); return StatusCode (( int ) HttpStatusCode . InternalServerError , \"Error occurred while executing Add Albums\" ); } catch ( Exception ex ) { _logger . LogError ( $ \"Something went wrong inside the AlbumController Add Album action: {ex}\" ); return StatusCode (( int ) HttpStatusCode . InternalServerError , \"Error occurred while executing Add Albums\" ); } } [HttpPut(\"{id}\")] [Produces(\"application/json\")] [Consumes(\"application/json\")] public async Task < ActionResult < AlbumApiModel >> Put ( int id , [ FromBody ] AlbumApiModel input ) { try { if ( input == null ) { return StatusCode (( int ) HttpStatusCode . BadRequest , \"Given Album is null\" ); } else { return Ok ( await _chinookSupervisor . UpdateAlbum ( input )); } } catch ( ValidationException ex ) { _logger . LogError ( $ \"Something went wrong inside the AlbumController Update Album action: {ex}\" ); return StatusCode (( int ) HttpStatusCode . InternalServerError , \"Error occurred while executing Update Albums\" ); } catch ( Exception ex ) { _logger . LogError ( $ \"Something went wrong inside the AlbumController Update Album action: {ex}\" ); return StatusCode (( int ) HttpStatusCode . InternalServerError , \"Error occurred while executing Update Albums\" ); } } [HttpDelete(\"{id}\")] public async Task < ActionResult > Delete ( int id ) { try { return Ok ( await _chinookSupervisor . DeleteAlbum ( id )); } catch ( Exception ex ) { _logger . LogError ( $ \"Something went wrong inside the AlbumController Delete action: {ex}\" ); return StatusCode (( int ) HttpStatusCode . InternalServerError , \"Error occurred while executing Delete Album\" ); } } [HttpGet(\"artist/{id}\")] public async Task < ActionResult < List < AlbumApiModel >>> GetByArtistId ( int id ) { try { var albums = await _chinookSupervisor . GetAlbumByArtistId ( id ); if ( albums . Any ()) { return Ok ( albums ); } else { return StatusCode (( int ) HttpStatusCode . NotFound , \"No Albums Could Be Found for the Artist\" ); } } catch ( Exception ex ) { _logger . LogError ( $ \"Something went wrong inside the AlbumController Get By Artist action: {ex}\" ); return StatusCode (( int ) HttpStatusCode . InternalServerError , \"Error occurred while executing Get All Albums for Artist\" ); } } }","title":"Developing the API Business Rules"},{"location":"Standing%20Up%20an%20ASP.NET%20Core%20Web%20API/api-business-rules/#developing-the-web-api-business-rules","text":"","title":"Developing the Web API Business Rules"},{"location":"Standing%20Up%20an%20ASP.NET%20Core%20Web%20API/api-business-rules/#start-from-previous-modules-end","text":"Developing the API endpoints","title":"START FROM PREVIOUS MODULE\"S END"},{"location":"Standing%20Up%20an%20ASP.NET%20Core%20Web%20API/api-business-rules/#add-cross-origin-resource-sharing-cors-to-api-project","text":"","title":"ADD CROSS ORIGIN RESOURCE SHARING (CORS) TO API PROJECT"},{"location":"Standing%20Up%20an%20ASP.NET%20Core%20Web%20API/api-business-rules/#add-addcors-to-servicesconfigurationcs","text":"public static void AddCORS ( this IServiceCollection services ) { services . AddCors ( options => { options . AddPolicy ( \"CorsPolicy\" , builder => builder . AllowAnyOrigin () . AllowAnyMethod () . AllowAnyHeader ()); }); } UPDATE STARTUP.CS public void ConfigureServices ( IServiceCollection services ) { services . AddConnectionProvider ( Configuration ); services . AddAppSettings ( Configuration ); services . ConfigureRepositories (); services . ConfigureSupervisor (); services . ConfigureValidators (); services . AddAPILogging (); services . AddCORS (); services . AddHealthChecks (); services . AddControllers (); } // This method gets called by the runtime. Use this method to configure the HTTP request pipeline. public void Configure ( IApplicationBuilder app , IWebHostEnvironment env ) { if ( env . IsDevelopment ()) { app . UseDeveloperExceptionPage (); } app . UseHttpsRedirection (); app . UseRouting (); app . UseCors (); app . UseAuthorization (); app . UseEndpoints ( endpoints => { endpoints . MapControllers (); }); }","title":"ADD ADDCORS() TO SERVICESCONFIGURATION.CS"},{"location":"Standing%20Up%20an%20ASP.NET%20Core%20Web%20API/api-business-rules/#add-fluentvalidation-nuget-to-api-and-domain-projects","text":"dotnet add package FluentValidation","title":"ADD FLUENTVALIDATION NUGET TO API AND DOMAIN PROJECTS"},{"location":"Standing%20Up%20an%20ASP.NET%20Core%20Web%20API/api-business-rules/#add-validators-to-domain-project","text":"using ChinookASPNETWebAPI.Domain.ApiModels ; using FluentValidation ; namespace ChinookASPNETWebAPI.Domain.Validation { public class AlbumValidator : AbstractValidator < AlbumApiModel > { public AlbumValidator () { RuleFor ( a => a . Title ). NotNull (); RuleFor ( a => a . Title ). MinimumLength ( 3 ); RuleFor ( a => a . Title ). MaximumLength ( 160 ); RuleFor ( a => a . ArtistId ). NotNull (); } } }","title":"ADD VALIDATORS TO DOMAIN PROJECT"},{"location":"Standing%20Up%20an%20ASP.NET%20Core%20Web%20API/api-business-rules/#add-code-to-call-validation-in-supervisor","text":"public async Task < AlbumApiModel > AddAlbum ( AlbumApiModel newAlbumApiModel ) { await _albumValidator . ValidateAndThrowAsync ( newAlbumApiModel ); var album = newAlbumApiModel . Convert (); album = await _albumRepository . Add ( album ); newAlbumApiModel . Id = album . Id ; return newAlbumApiModel ; } public async Task < bool > UpdateAlbum ( AlbumApiModel albumApiModel ) { await _albumValidator . ValidateAndThrowAsync ( albumApiModel ); var album = await _albumRepository . GetById ( albumApiModel . Id ); if ( album is null ) return false ; album . Id = albumApiModel . Id ; album . Title = albumApiModel . Title ; album . ArtistId = albumApiModel . ArtistId ; return await _albumRepository . Update ( album ); }","title":"ADD CODE TO CALL VALIDATION IN SUPERVISOR"},{"location":"Standing%20Up%20an%20ASP.NET%20Core%20Web%20API/api-business-rules/#add-error-handling-in-actions","text":"[Route(\"api/[controller] \")] [ApiController] [EnableCors(\"CorsPolicy\")] public class AlbumController : ControllerBase { private readonly IChinookSupervisor _chinookSupervisor ; private readonly ILogger < AlbumController > _logger ; public AlbumController ( IChinookSupervisor chinookSupervisor , ILogger < AlbumController > logger ) { _chinookSupervisor = chinookSupervisor ; _logger = logger ; } [HttpGet] [Produces(typeof(List<AlbumApiModel>))] public async Task < ActionResult < List < AlbumApiModel >>> Get () { try { var albums = await _chinookSupervisor . GetAllAlbum (); if ( albums . Any ()) { return Ok ( albums ); } else { return StatusCode (( int ) HttpStatusCode . NotFound , \"No Albums Could Be Found\" ); } } catch ( Exception ex ) { _logger . LogError ( $ \"Something went wrong inside the AlbumController Get action: {ex}\" ); return StatusCode (( int ) HttpStatusCode . InternalServerError , \"Error occurred while executing Get All Albums\" ); } } [HttpGet(\"{id}\", Name = \"GetAlbumById\")] public async Task < ActionResult < AlbumApiModel >> Get ( int id ) { try { var album = await _chinookSupervisor . GetAlbumById ( id ); if ( album != null ) { return Ok ( album ); } else { return StatusCode (( int ) HttpStatusCode . NotFound , \"Album Not Found\" ); } } catch ( Exception ex ) { _logger . LogError ( $ \"Something went wrong inside the AlbumController GetById action: {ex}\" ); return StatusCode (( int ) HttpStatusCode . InternalServerError , \"Error occurred while executing Get Album By Id\" ); } } [HttpPost] [Produces(\"application/json\")] [Consumes(\"application/json\")] public async Task < ActionResult < AlbumApiModel >> Post ([ FromBody ] AlbumApiModel input ) { try { if ( input == null ) { return StatusCode (( int ) HttpStatusCode . BadRequest , \"Given Album is null\" ); } else { return Ok ( await _chinookSupervisor . AddAlbum ( input )); } } catch ( ValidationException ex ) { _logger . LogError ( $ \"Something went wrong inside the AlbumController Add Album action: {ex}\" ); return StatusCode (( int ) HttpStatusCode . InternalServerError , \"Error occurred while executing Add Albums\" ); } catch ( Exception ex ) { _logger . LogError ( $ \"Something went wrong inside the AlbumController Add Album action: {ex}\" ); return StatusCode (( int ) HttpStatusCode . InternalServerError , \"Error occurred while executing Add Albums\" ); } } [HttpPut(\"{id}\")] [Produces(\"application/json\")] [Consumes(\"application/json\")] public async Task < ActionResult < AlbumApiModel >> Put ( int id , [ FromBody ] AlbumApiModel input ) { try { if ( input == null ) { return StatusCode (( int ) HttpStatusCode . BadRequest , \"Given Album is null\" ); } else { return Ok ( await _chinookSupervisor . UpdateAlbum ( input )); } } catch ( ValidationException ex ) { _logger . LogError ( $ \"Something went wrong inside the AlbumController Update Album action: {ex}\" ); return StatusCode (( int ) HttpStatusCode . InternalServerError , \"Error occurred while executing Update Albums\" ); } catch ( Exception ex ) { _logger . LogError ( $ \"Something went wrong inside the AlbumController Update Album action: {ex}\" ); return StatusCode (( int ) HttpStatusCode . InternalServerError , \"Error occurred while executing Update Albums\" ); } } [HttpDelete(\"{id}\")] public async Task < ActionResult > Delete ( int id ) { try { return Ok ( await _chinookSupervisor . DeleteAlbum ( id )); } catch ( Exception ex ) { _logger . LogError ( $ \"Something went wrong inside the AlbumController Delete action: {ex}\" ); return StatusCode (( int ) HttpStatusCode . InternalServerError , \"Error occurred while executing Delete Album\" ); } } [HttpGet(\"artist/{id}\")] public async Task < ActionResult < List < AlbumApiModel >>> GetByArtistId ( int id ) { try { var albums = await _chinookSupervisor . GetAlbumByArtistId ( id ); if ( albums . Any ()) { return Ok ( albums ); } else { return StatusCode (( int ) HttpStatusCode . NotFound , \"No Albums Could Be Found for the Artist\" ); } } catch ( Exception ex ) { _logger . LogError ( $ \"Something went wrong inside the AlbumController Get By Artist action: {ex}\" ); return StatusCode (( int ) HttpStatusCode . InternalServerError , \"Error occurred while executing Get All Albums for Artist\" ); } } }","title":"ADD ERROR HANDLING IN ACTIONS"},{"location":"Standing%20Up%20an%20ASP.NET%20Core%20Web%20API/caching-data/","text":"Caching Data in Your API \u00b6 START FROM PREVIOUS MODULE\"S END \u00b6 Developing the Web API Business Rules RESPONSE CACHING \u00b6 ADD RESPONSE CACHING TO ADDCACHING() IN SERVICESCONFIGURATION.CS \u00b6 public static void AddCaching ( this IServiceCollection services , IConfiguration configuration ) { services . AddResponseCaching (); } ADD TO CONFIGURE() IN STARTUP.CS \u00b6 **** Note: needs to go after CORS** public void Configure ( IApplicationBuilder app , IWebHostEnvironment env ) { if ( env . IsDevelopment ()) { app . UseDeveloperExceptionPage (); } app . UseHttpsRedirection (); app . UseRouting (); app . UseCors ( \"CorsPolicy\" ); app . UseResponseCaching (); app . UseAuthorization (); app . UseEndpoints ( endpoints => { endpoints . MapControllers (); }); } ADD TO CONTROLLERS OR ACTIONS \u00b6 [Route(\"api/[controller] \")] [ApiController] [EnableCors(\"CorsPolicy\")] [ResponseCache(Duration = 604800)] public class GenreController : ControllerBase Note: 604800 is seconds and equals a week What is seen in the Response Header \u00b6 Response Header: Cache-Control: public,max-age=604800 Test in Postman and web browser to see how the API Consumer behaves. IN-MEMORY CACHING \u00b6 Install Microsoft.Extensions.Caching.Abstractions NuGet package to Domain \u00b6 dotnet add package Microsoft.Extensions.Caching.Abstractions ADD IN-MEMORY CACHING TO ADDCACHING() IN SERVICESCONFIGURATION.CS \u00b6 public static void AddCaching ( this IServiceCollection services , IConfiguration configuration ) { services . AddResponseCaching (); services . AddMemoryCache (); } ADD MEMORYCACHE TO SUPERVISOR AND GET FROM DI \u00b6 ChinookSupervisor.cs \u00b6 public partial class ChinookSupervisor : IChinookSupervisor { private readonly IAlbumRepository _albumRepository ; private readonly IArtistRepository _artistRepository ; private readonly ICustomerRepository _customerRepository ; private readonly IEmployeeRepository _employeeRepository ; private readonly IGenreRepository _genreRepository ; private readonly IInvoiceLineRepository _invoiceLineRepository ; private readonly IInvoiceRepository _invoiceRepository ; private readonly IMediaTypeRepository _mediaTypeRepository ; private readonly IPlaylistRepository _playlistRepository ; private readonly ITrackRepository _trackRepository ; private readonly IValidator < AlbumApiModel > _albumValidator ; private readonly IValidator < ArtistApiModel > _artistValidator ; private readonly IValidator < CustomerApiModel > _customerValidator ; private readonly IValidator < EmployeeApiModel > _employeeValidator ; private readonly IValidator < GenreApiModel > _genreValidator ; private readonly IValidator < InvoiceApiModel > _invoiceValidator ; private readonly IValidator < InvoiceLineApiModel > _invoiceLineValidator ; private readonly IValidator < MediaTypeApiModel > _mediaTypeValidator ; private readonly IValidator < PlaylistApiModel > _playlistValidator ; private readonly IValidator < TrackApiModel > _trackValidator ; private readonly IMemoryCache _cache ; public ChinookSupervisor ( IAlbumRepository albumRepository , IArtistRepository artistRepository , ICustomerRepository customerRepository , IEmployeeRepository employeeRepository , IGenreRepository genreRepository , IInvoiceLineRepository invoiceLineRepository , IInvoiceRepository invoiceRepository , IMediaTypeRepository mediaTypeRepository , IPlaylistRepository playlistRepository , ITrackRepository trackRepository , IValidator < AlbumApiModel > albumValidator , IValidator < ArtistApiModel > artistValidator , IValidator < CustomerApiModel > customerValidator , IValidator < EmployeeApiModel > employeeValidator , IValidator < GenreApiModel > genreValidator , IValidator < InvoiceApiModel > invoiceValidator , IValidator < InvoiceLineApiModel > invoiceLineValidator , IValidator < MediaTypeApiModel > mediaTypeValidator , IValidator < PlaylistApiModel > playlistValidator , IValidator < TrackApiModel > trackValidator , IMemoryCache memoryCache ) { _albumRepository = albumRepository ; _artistRepository = artistRepository ; _customerRepository = customerRepository ; _employeeRepository = employeeRepository ; _genreRepository = genreRepository ; _invoiceLineRepository = invoiceLineRepository ; _invoiceRepository = invoiceRepository ; _mediaTypeRepository = mediaTypeRepository ; _playlistRepository = playlistRepository ; _trackRepository = trackRepository ; _albumValidator = albumValidator ; _artistValidator = artistValidator ; _customerValidator = customerValidator ; _employeeValidator = employeeValidator ; _genreValidator = genreValidator ; _invoiceValidator = invoiceValidator ; _invoiceLineValidator = invoiceLineValidator ; _mediaTypeValidator = mediaTypeValidator ; _playlistValidator = playlistValidator ; _trackValidator = trackValidator ; _cache = memoryCache ; } } ADD CODE TO SUPERVISOR FOR EACH ENTITY TYPE NEEDED \u00b6 ChinookSupervisorAlbum.cs \u00b6 public async Task < IEnumerable < AlbumApiModel >> GetAllAlbum () { List < Album > albums = await _albumRepository . GetAll (); var albumApiModels = albums . ConvertAll (); foreach ( var album in albumApiModels ) { var cacheEntryOptions = new MemoryCacheEntryOptions (). SetSlidingExpiration ( TimeSpan . FromSeconds ( 604800 )) . AbsoluteExpirationRelativeToNow = TimeSpan . FromSeconds ( 604800 );; _cache . Set ( string . Concat ( \"Album-\" , album . Id ), album , ( TimeSpan ) cacheEntryOptions ); } return albumApiModels ; } public async Task < AlbumApiModel > GetAlbumById ( int id ) { var albumApiModelCached = _cache . Get < AlbumApiModel >( string . Concat ( \"Album-\" , id )); if ( albumApiModelCached != null ) { return albumApiModelCached ; } else { var album = await _albumRepository . GetById ( id ); if ( album == null ) return null ; var albumApiModel = album . Convert (); albumApiModel . ArtistName = ( _artistRepository . GetById ( album . ArtistId )). Result . Name ; albumApiModel . Tracks = ( await GetTrackByAlbumId ( id )). ToList (); var cacheEntryOptions = new MemoryCacheEntryOptions (). SetSlidingExpiration ( TimeSpan . FromSeconds ( 604800 )) . AbsoluteExpirationRelativeToNow = TimeSpan . FromSeconds ( 604800 );; _cache . Set ( string . Concat ( \"Album-\" , albumApiModel . Id ), albumApiModel , ( TimeSpan ) cacheEntryOptions ); return albumApiModel ; } } DISTRIBUTED CACHING \u00b6 Install tool for MSSQL distrubuted caching using the commend in Command Prompt \u00b6 dotnet tool install --global dotnet-sql-cache Run from Command Prompt \u00b6 dotnet sql-cache create \"Data Source=.;Initial Catalog=ChinookCacheDb;Integrated Security=True;\" dbo ChinookCache Install Microsoft.Extensions.Caching.SqlServer NuGet package to Domain \u00b6 dotnet add package Microsoft.Extensions.Caching.SqlServer ADD DISTRIBUTED CACHING TO ADDCACHING() IN SERVICESCONFIGURATION.CS \u00b6 public static void AddCaching ( this IServiceCollection services , IConfiguration configuration ) { services . AddResponseCaching (); services . AddMemoryCache (); services . AddDistributedSqlServerCache ( options => { options . ConnectionString = configuration . GetConnectionString ( \"ChinookSQLCache\" ); options . SchemaName = \"dbo\" ; options . TableName = \"ChinookCache\" ; }); } ADD DISTRIBUTEDCACHE TO SUPERVISOR AND GET FROM DI \u00b6 ChinookSupervisor.cs \u00b6 public partial class ChinookSupervisor : IChinookSupervisor { private readonly IAlbumRepository _albumRepository ; private readonly IArtistRepository _artistRepository ; private readonly ICustomerRepository _customerRepository ; private readonly IEmployeeRepository _employeeRepository ; private readonly IGenreRepository _genreRepository ; private readonly IInvoiceLineRepository _invoiceLineRepository ; private readonly IInvoiceRepository _invoiceRepository ; private readonly IMediaTypeRepository _mediaTypeRepository ; private readonly IPlaylistRepository _playlistRepository ; private readonly ITrackRepository _trackRepository ; private readonly IValidator < AlbumApiModel > _albumValidator ; private readonly IValidator < ArtistApiModel > _artistValidator ; private readonly IValidator < CustomerApiModel > _customerValidator ; private readonly IValidator < EmployeeApiModel > _employeeValidator ; private readonly IValidator < GenreApiModel > _genreValidator ; private readonly IValidator < InvoiceApiModel > _invoiceValidator ; private readonly IValidator < InvoiceLineApiModel > _invoiceLineValidator ; private readonly IValidator < MediaTypeApiModel > _mediaTypeValidator ; private readonly IValidator < PlaylistApiModel > _playlistValidator ; private readonly IValidator < TrackApiModel > _trackValidator ; private readonly IMemoryCache _cache ; private readonly IDistributedCache _distributedCache ; public ChinookSupervisor ( IAlbumRepository albumRepository , IArtistRepository artistRepository , ICustomerRepository customerRepository , IEmployeeRepository employeeRepository , IGenreRepository genreRepository , IInvoiceLineRepository invoiceLineRepository , IInvoiceRepository invoiceRepository , IMediaTypeRepository mediaTypeRepository , IPlaylistRepository playlistRepository , ITrackRepository trackRepository , IValidator < AlbumApiModel > albumValidator , IValidator < ArtistApiModel > artistValidator , IValidator < CustomerApiModel > customerValidator , IValidator < EmployeeApiModel > employeeValidator , IValidator < GenreApiModel > genreValidator , IValidator < InvoiceApiModel > invoiceValidator , IValidator < InvoiceLineApiModel > invoiceLineValidator , IValidator < MediaTypeApiModel > mediaTypeValidator , IValidator < PlaylistApiModel > playlistValidator , IValidator < TrackApiModel > trackValidator , IMemoryCache memoryCache , IDistributedCache distributedCache ) { _albumRepository = albumRepository ; _artistRepository = artistRepository ; _customerRepository = customerRepository ; _employeeRepository = employeeRepository ; _genreRepository = genreRepository ; _invoiceLineRepository = invoiceLineRepository ; _invoiceRepository = invoiceRepository ; _mediaTypeRepository = mediaTypeRepository ; _playlistRepository = playlistRepository ; _trackRepository = trackRepository ; _albumValidator = albumValidator ; _artistValidator = artistValidator ; _customerValidator = customerValidator ; _employeeValidator = employeeValidator ; _genreValidator = genreValidator ; _invoiceValidator = invoiceValidator ; _invoiceLineValidator = invoiceLineValidator ; _mediaTypeValidator = mediaTypeValidator ; _playlistValidator = playlistValidator ; _trackValidator = trackValidator ; _cache = memoryCache ; _distributedCache = distributedCache ; } } ADD CODE TO SUPERVISOR FOR EACH ENTITY TYPE NEEDED \u00b6 ChinookSupervisorTrack.cs \u00b6 public async Task < IEnumerable < TrackApiModel >> GetAllTrack () { List < Track > tracks = await _trackRepository . GetAll (); var trackApiModels = tracks . ConvertAll (); foreach ( var track in trackApiModels ) { DistributedCacheEntryOptions cacheEntryOptions = new DistributedCacheEntryOptions (); cacheEntryOptions . SetSlidingExpiration ( TimeSpan . FromSeconds ( 3600 )); cacheEntryOptions . AbsoluteExpirationRelativeToNow = TimeSpan . FromSeconds ( 86400 ); await _distributedCache . SetStringAsync ( $ \"Track-{track.Id}\" , JsonSerializer . Serialize ( track ), cacheEntryOptions ); } return trackApiModels ; } public async Task < TrackApiModel > GetTrackById ( int id ) { var trackApiModelCached = await _distributedCache . GetStringAsync ( $ \"Track-{id}\" ); if ( trackApiModelCached != null ) { return JsonSerializer . Deserialize < TrackApiModel >( trackApiModelCached ); } else { var track = await _trackRepository . GetById ( id ); if ( track == null ) return null ; var trackApiModel = track . Convert (); trackApiModel . Genre = await GetGenreById ( trackApiModel . GenreId ); trackApiModel . Album = await GetAlbumById ( trackApiModel . AlbumId ); trackApiModel . MediaType = await GetMediaTypeById ( trackApiModel . MediaTypeId ); if ( trackApiModel . Album != null ) { trackApiModel . AlbumName = trackApiModel . Album . Title ; } trackApiModel . MediaTypeName = trackApiModel . MediaType . Name ; if ( trackApiModel . Genre != null ) { trackApiModel . GenreName = trackApiModel . Genre . Name ; } DistributedCacheEntryOptions cacheEntryOptions = new DistributedCacheEntryOptions (); cacheEntryOptions . SetSlidingExpiration ( TimeSpan . FromSeconds ( 3600 )); cacheEntryOptions . AbsoluteExpirationRelativeToNow = TimeSpan . FromSeconds ( 86400 ); await _distributedCache . SetStringAsync ( $ \"Track-{track.Id}\" , JsonSerializer . Serialize ( trackApiModel ), cacheEntryOptions ); return trackApiModel ; } }","title":"Caching Data in your API"},{"location":"Standing%20Up%20an%20ASP.NET%20Core%20Web%20API/caching-data/#caching-data-in-your-api","text":"","title":"Caching Data in Your API"},{"location":"Standing%20Up%20an%20ASP.NET%20Core%20Web%20API/caching-data/#start-from-previous-modules-end","text":"Developing the Web API Business Rules","title":"START FROM PREVIOUS MODULE\"S END"},{"location":"Standing%20Up%20an%20ASP.NET%20Core%20Web%20API/caching-data/#response-caching","text":"","title":"RESPONSE CACHING"},{"location":"Standing%20Up%20an%20ASP.NET%20Core%20Web%20API/caching-data/#add-response-caching-to-addcaching-in-servicesconfigurationcs","text":"public static void AddCaching ( this IServiceCollection services , IConfiguration configuration ) { services . AddResponseCaching (); }","title":"ADD RESPONSE CACHING TO ADDCACHING() IN SERVICESCONFIGURATION.CS"},{"location":"Standing%20Up%20an%20ASP.NET%20Core%20Web%20API/caching-data/#add-to-configure-in-startupcs","text":"**** Note: needs to go after CORS** public void Configure ( IApplicationBuilder app , IWebHostEnvironment env ) { if ( env . IsDevelopment ()) { app . UseDeveloperExceptionPage (); } app . UseHttpsRedirection (); app . UseRouting (); app . UseCors ( \"CorsPolicy\" ); app . UseResponseCaching (); app . UseAuthorization (); app . UseEndpoints ( endpoints => { endpoints . MapControllers (); }); }","title":"ADD TO CONFIGURE() IN STARTUP.CS"},{"location":"Standing%20Up%20an%20ASP.NET%20Core%20Web%20API/caching-data/#add-to-controllers-or-actions","text":"[Route(\"api/[controller] \")] [ApiController] [EnableCors(\"CorsPolicy\")] [ResponseCache(Duration = 604800)] public class GenreController : ControllerBase Note: 604800 is seconds and equals a week","title":"ADD TO CONTROLLERS OR ACTIONS"},{"location":"Standing%20Up%20an%20ASP.NET%20Core%20Web%20API/caching-data/#what-is-seen-in-the-response-header","text":"Response Header: Cache-Control: public,max-age=604800 Test in Postman and web browser to see how the API Consumer behaves.","title":"What is seen in the Response Header"},{"location":"Standing%20Up%20an%20ASP.NET%20Core%20Web%20API/caching-data/#in-memory-caching","text":"","title":"IN-MEMORY CACHING"},{"location":"Standing%20Up%20an%20ASP.NET%20Core%20Web%20API/caching-data/#install-microsoftextensionscachingabstractions-nuget-package-to-domain","text":"dotnet add package Microsoft.Extensions.Caching.Abstractions","title":"Install Microsoft.Extensions.Caching.Abstractions NuGet package to Domain"},{"location":"Standing%20Up%20an%20ASP.NET%20Core%20Web%20API/caching-data/#add-in-memory-caching-to-addcaching-in-servicesconfigurationcs","text":"public static void AddCaching ( this IServiceCollection services , IConfiguration configuration ) { services . AddResponseCaching (); services . AddMemoryCache (); }","title":"ADD IN-MEMORY CACHING TO ADDCACHING() IN SERVICESCONFIGURATION.CS"},{"location":"Standing%20Up%20an%20ASP.NET%20Core%20Web%20API/caching-data/#add-memorycache-to-supervisor-and-get-from-di","text":"","title":"ADD MEMORYCACHE TO SUPERVISOR AND GET FROM DI"},{"location":"Standing%20Up%20an%20ASP.NET%20Core%20Web%20API/caching-data/#chinooksupervisorcs","text":"public partial class ChinookSupervisor : IChinookSupervisor { private readonly IAlbumRepository _albumRepository ; private readonly IArtistRepository _artistRepository ; private readonly ICustomerRepository _customerRepository ; private readonly IEmployeeRepository _employeeRepository ; private readonly IGenreRepository _genreRepository ; private readonly IInvoiceLineRepository _invoiceLineRepository ; private readonly IInvoiceRepository _invoiceRepository ; private readonly IMediaTypeRepository _mediaTypeRepository ; private readonly IPlaylistRepository _playlistRepository ; private readonly ITrackRepository _trackRepository ; private readonly IValidator < AlbumApiModel > _albumValidator ; private readonly IValidator < ArtistApiModel > _artistValidator ; private readonly IValidator < CustomerApiModel > _customerValidator ; private readonly IValidator < EmployeeApiModel > _employeeValidator ; private readonly IValidator < GenreApiModel > _genreValidator ; private readonly IValidator < InvoiceApiModel > _invoiceValidator ; private readonly IValidator < InvoiceLineApiModel > _invoiceLineValidator ; private readonly IValidator < MediaTypeApiModel > _mediaTypeValidator ; private readonly IValidator < PlaylistApiModel > _playlistValidator ; private readonly IValidator < TrackApiModel > _trackValidator ; private readonly IMemoryCache _cache ; public ChinookSupervisor ( IAlbumRepository albumRepository , IArtistRepository artistRepository , ICustomerRepository customerRepository , IEmployeeRepository employeeRepository , IGenreRepository genreRepository , IInvoiceLineRepository invoiceLineRepository , IInvoiceRepository invoiceRepository , IMediaTypeRepository mediaTypeRepository , IPlaylistRepository playlistRepository , ITrackRepository trackRepository , IValidator < AlbumApiModel > albumValidator , IValidator < ArtistApiModel > artistValidator , IValidator < CustomerApiModel > customerValidator , IValidator < EmployeeApiModel > employeeValidator , IValidator < GenreApiModel > genreValidator , IValidator < InvoiceApiModel > invoiceValidator , IValidator < InvoiceLineApiModel > invoiceLineValidator , IValidator < MediaTypeApiModel > mediaTypeValidator , IValidator < PlaylistApiModel > playlistValidator , IValidator < TrackApiModel > trackValidator , IMemoryCache memoryCache ) { _albumRepository = albumRepository ; _artistRepository = artistRepository ; _customerRepository = customerRepository ; _employeeRepository = employeeRepository ; _genreRepository = genreRepository ; _invoiceLineRepository = invoiceLineRepository ; _invoiceRepository = invoiceRepository ; _mediaTypeRepository = mediaTypeRepository ; _playlistRepository = playlistRepository ; _trackRepository = trackRepository ; _albumValidator = albumValidator ; _artistValidator = artistValidator ; _customerValidator = customerValidator ; _employeeValidator = employeeValidator ; _genreValidator = genreValidator ; _invoiceValidator = invoiceValidator ; _invoiceLineValidator = invoiceLineValidator ; _mediaTypeValidator = mediaTypeValidator ; _playlistValidator = playlistValidator ; _trackValidator = trackValidator ; _cache = memoryCache ; } }","title":"ChinookSupervisor.cs"},{"location":"Standing%20Up%20an%20ASP.NET%20Core%20Web%20API/caching-data/#add-code-to-supervisor-for-each-entity-type-needed","text":"","title":"ADD CODE TO SUPERVISOR FOR EACH ENTITY TYPE NEEDED"},{"location":"Standing%20Up%20an%20ASP.NET%20Core%20Web%20API/caching-data/#chinooksupervisoralbumcs","text":"public async Task < IEnumerable < AlbumApiModel >> GetAllAlbum () { List < Album > albums = await _albumRepository . GetAll (); var albumApiModels = albums . ConvertAll (); foreach ( var album in albumApiModels ) { var cacheEntryOptions = new MemoryCacheEntryOptions (). SetSlidingExpiration ( TimeSpan . FromSeconds ( 604800 )) . AbsoluteExpirationRelativeToNow = TimeSpan . FromSeconds ( 604800 );; _cache . Set ( string . Concat ( \"Album-\" , album . Id ), album , ( TimeSpan ) cacheEntryOptions ); } return albumApiModels ; } public async Task < AlbumApiModel > GetAlbumById ( int id ) { var albumApiModelCached = _cache . Get < AlbumApiModel >( string . Concat ( \"Album-\" , id )); if ( albumApiModelCached != null ) { return albumApiModelCached ; } else { var album = await _albumRepository . GetById ( id ); if ( album == null ) return null ; var albumApiModel = album . Convert (); albumApiModel . ArtistName = ( _artistRepository . GetById ( album . ArtistId )). Result . Name ; albumApiModel . Tracks = ( await GetTrackByAlbumId ( id )). ToList (); var cacheEntryOptions = new MemoryCacheEntryOptions (). SetSlidingExpiration ( TimeSpan . FromSeconds ( 604800 )) . AbsoluteExpirationRelativeToNow = TimeSpan . FromSeconds ( 604800 );; _cache . Set ( string . Concat ( \"Album-\" , albumApiModel . Id ), albumApiModel , ( TimeSpan ) cacheEntryOptions ); return albumApiModel ; } }","title":"ChinookSupervisorAlbum.cs"},{"location":"Standing%20Up%20an%20ASP.NET%20Core%20Web%20API/caching-data/#distributed-caching","text":"","title":"DISTRIBUTED CACHING"},{"location":"Standing%20Up%20an%20ASP.NET%20Core%20Web%20API/caching-data/#install-tool-for-mssql-distrubuted-caching-using-the-commend-in-command-prompt","text":"dotnet tool install --global dotnet-sql-cache","title":"Install tool for MSSQL distrubuted caching using the commend in Command Prompt"},{"location":"Standing%20Up%20an%20ASP.NET%20Core%20Web%20API/caching-data/#run-from-command-prompt","text":"dotnet sql-cache create \"Data Source=.;Initial Catalog=ChinookCacheDb;Integrated Security=True;\" dbo ChinookCache","title":"Run from Command Prompt"},{"location":"Standing%20Up%20an%20ASP.NET%20Core%20Web%20API/caching-data/#install-microsoftextensionscachingsqlserver-nuget-package-to-domain","text":"dotnet add package Microsoft.Extensions.Caching.SqlServer","title":"Install Microsoft.Extensions.Caching.SqlServer NuGet package to Domain"},{"location":"Standing%20Up%20an%20ASP.NET%20Core%20Web%20API/caching-data/#add-distributed-caching-to-addcaching-in-servicesconfigurationcs","text":"public static void AddCaching ( this IServiceCollection services , IConfiguration configuration ) { services . AddResponseCaching (); services . AddMemoryCache (); services . AddDistributedSqlServerCache ( options => { options . ConnectionString = configuration . GetConnectionString ( \"ChinookSQLCache\" ); options . SchemaName = \"dbo\" ; options . TableName = \"ChinookCache\" ; }); }","title":"ADD DISTRIBUTED CACHING TO ADDCACHING() IN SERVICESCONFIGURATION.CS"},{"location":"Standing%20Up%20an%20ASP.NET%20Core%20Web%20API/caching-data/#add-distributedcache-to-supervisor-and-get-from-di","text":"","title":"ADD DISTRIBUTEDCACHE TO SUPERVISOR AND GET FROM DI"},{"location":"Standing%20Up%20an%20ASP.NET%20Core%20Web%20API/caching-data/#chinooksupervisorcs_1","text":"public partial class ChinookSupervisor : IChinookSupervisor { private readonly IAlbumRepository _albumRepository ; private readonly IArtistRepository _artistRepository ; private readonly ICustomerRepository _customerRepository ; private readonly IEmployeeRepository _employeeRepository ; private readonly IGenreRepository _genreRepository ; private readonly IInvoiceLineRepository _invoiceLineRepository ; private readonly IInvoiceRepository _invoiceRepository ; private readonly IMediaTypeRepository _mediaTypeRepository ; private readonly IPlaylistRepository _playlistRepository ; private readonly ITrackRepository _trackRepository ; private readonly IValidator < AlbumApiModel > _albumValidator ; private readonly IValidator < ArtistApiModel > _artistValidator ; private readonly IValidator < CustomerApiModel > _customerValidator ; private readonly IValidator < EmployeeApiModel > _employeeValidator ; private readonly IValidator < GenreApiModel > _genreValidator ; private readonly IValidator < InvoiceApiModel > _invoiceValidator ; private readonly IValidator < InvoiceLineApiModel > _invoiceLineValidator ; private readonly IValidator < MediaTypeApiModel > _mediaTypeValidator ; private readonly IValidator < PlaylistApiModel > _playlistValidator ; private readonly IValidator < TrackApiModel > _trackValidator ; private readonly IMemoryCache _cache ; private readonly IDistributedCache _distributedCache ; public ChinookSupervisor ( IAlbumRepository albumRepository , IArtistRepository artistRepository , ICustomerRepository customerRepository , IEmployeeRepository employeeRepository , IGenreRepository genreRepository , IInvoiceLineRepository invoiceLineRepository , IInvoiceRepository invoiceRepository , IMediaTypeRepository mediaTypeRepository , IPlaylistRepository playlistRepository , ITrackRepository trackRepository , IValidator < AlbumApiModel > albumValidator , IValidator < ArtistApiModel > artistValidator , IValidator < CustomerApiModel > customerValidator , IValidator < EmployeeApiModel > employeeValidator , IValidator < GenreApiModel > genreValidator , IValidator < InvoiceApiModel > invoiceValidator , IValidator < InvoiceLineApiModel > invoiceLineValidator , IValidator < MediaTypeApiModel > mediaTypeValidator , IValidator < PlaylistApiModel > playlistValidator , IValidator < TrackApiModel > trackValidator , IMemoryCache memoryCache , IDistributedCache distributedCache ) { _albumRepository = albumRepository ; _artistRepository = artistRepository ; _customerRepository = customerRepository ; _employeeRepository = employeeRepository ; _genreRepository = genreRepository ; _invoiceLineRepository = invoiceLineRepository ; _invoiceRepository = invoiceRepository ; _mediaTypeRepository = mediaTypeRepository ; _playlistRepository = playlistRepository ; _trackRepository = trackRepository ; _albumValidator = albumValidator ; _artistValidator = artistValidator ; _customerValidator = customerValidator ; _employeeValidator = employeeValidator ; _genreValidator = genreValidator ; _invoiceValidator = invoiceValidator ; _invoiceLineValidator = invoiceLineValidator ; _mediaTypeValidator = mediaTypeValidator ; _playlistValidator = playlistValidator ; _trackValidator = trackValidator ; _cache = memoryCache ; _distributedCache = distributedCache ; } }","title":"ChinookSupervisor.cs"},{"location":"Standing%20Up%20an%20ASP.NET%20Core%20Web%20API/caching-data/#add-code-to-supervisor-for-each-entity-type-needed_1","text":"","title":"ADD CODE TO SUPERVISOR FOR EACH ENTITY TYPE NEEDED"},{"location":"Standing%20Up%20an%20ASP.NET%20Core%20Web%20API/caching-data/#chinooksupervisortrackcs","text":"public async Task < IEnumerable < TrackApiModel >> GetAllTrack () { List < Track > tracks = await _trackRepository . GetAll (); var trackApiModels = tracks . ConvertAll (); foreach ( var track in trackApiModels ) { DistributedCacheEntryOptions cacheEntryOptions = new DistributedCacheEntryOptions (); cacheEntryOptions . SetSlidingExpiration ( TimeSpan . FromSeconds ( 3600 )); cacheEntryOptions . AbsoluteExpirationRelativeToNow = TimeSpan . FromSeconds ( 86400 ); await _distributedCache . SetStringAsync ( $ \"Track-{track.Id}\" , JsonSerializer . Serialize ( track ), cacheEntryOptions ); } return trackApiModels ; } public async Task < TrackApiModel > GetTrackById ( int id ) { var trackApiModelCached = await _distributedCache . GetStringAsync ( $ \"Track-{id}\" ); if ( trackApiModelCached != null ) { return JsonSerializer . Deserialize < TrackApiModel >( trackApiModelCached ); } else { var track = await _trackRepository . GetById ( id ); if ( track == null ) return null ; var trackApiModel = track . Convert (); trackApiModel . Genre = await GetGenreById ( trackApiModel . GenreId ); trackApiModel . Album = await GetAlbumById ( trackApiModel . AlbumId ); trackApiModel . MediaType = await GetMediaTypeById ( trackApiModel . MediaTypeId ); if ( trackApiModel . Album != null ) { trackApiModel . AlbumName = trackApiModel . Album . Title ; } trackApiModel . MediaTypeName = trackApiModel . MediaType . Name ; if ( trackApiModel . Genre != null ) { trackApiModel . GenreName = trackApiModel . Genre . Name ; } DistributedCacheEntryOptions cacheEntryOptions = new DistributedCacheEntryOptions (); cacheEntryOptions . SetSlidingExpiration ( TimeSpan . FromSeconds ( 3600 )); cacheEntryOptions . AbsoluteExpirationRelativeToNow = TimeSpan . FromSeconds ( 86400 ); await _distributedCache . SetStringAsync ( $ \"Track-{track.Id}\" , JsonSerializer . Serialize ( trackApiModel ), cacheEntryOptions ); return trackApiModel ; } }","title":"ChinookSupervisorTrack.cs"},{"location":"Standing%20Up%20an%20ASP.NET%20Core%20Web%20API/designing-ntier-api/","text":"Designing the NTier API \u00b6 START FROM PREVIOUS MODULE\"S END \u00b6 Your First ASP.NET 5 Web API CREATE NEW PROJECTS FOR DATA AND DOMAIN \u00b6","title":"Designing the NTier API"},{"location":"Standing%20Up%20an%20ASP.NET%20Core%20Web%20API/designing-ntier-api/#designing-the-ntier-api","text":"","title":"Designing the NTier API"},{"location":"Standing%20Up%20an%20ASP.NET%20Core%20Web%20API/designing-ntier-api/#start-from-previous-modules-end","text":"Your First ASP.NET 5 Web API","title":"START FROM PREVIOUS MODULE\"S END"},{"location":"Standing%20Up%20an%20ASP.NET%20Core%20Web%20API/designing-ntier-api/#create-new-projects-for-data-and-domain","text":"","title":"CREATE NEW PROJECTS FOR DATA AND DOMAIN"},{"location":"Standing%20Up%20an%20ASP.NET%20Core%20Web%20API/documenting-with-openapi/","text":"Documenting your API with OpenAPI \u00b6 START FROM PREVIOUS MODULE\"S END \u00b6 Versioning your Web API ADD OPENAPI/SWAGGER NUGET PACKAGES TO API \u00b6 dotnet add package Swashbuckle.AspNetCore.Swagger dotnet add package Swashbuckle.AspNetCore.SwaggerGen dotnet add package Swashbuckle.AspNetCore.SwaggerUI dotnet add package Swashbuckle.AspNetCore.Annotations ADD OPENAPI/SWAGGER TO STARTUP CONFIGURESERVICES \u00b6 ServicesConfiguration.cs \u00b6 services . AddSwaggerGen ( c => { c . SwaggerDoc ( \"v1\" , new OpenApiInfo { Version = \"v1\" , Title = \"Chinook Music Store API\" , Description = \"A simple example ASP.NET Core Web API\" , TermsOfService = new Uri ( \"https://example.com/terms\" ), Contact = new OpenApiContact { Name = \"Chris Woodruff\" , Email = string . Empty , Url = new Uri ( \"https://chriswoodruff.com\" ) }, License = new OpenApiLicense { Name = \"Use under MIT\" , Url = new Uri ( \"https://opensource.org/licenses/MIT\" ) } }); c . EnableAnnotations (); }); ADD OPENAPI/SWAGGER TO STARTUP CONFIGURE() \u00b6 app . UseSwagger (); app . UseSwaggerUI ( s => s . SwaggerEndpoint ( \"/swagger/v1/swagger.json\" , \"v1 docs\" )); DISCOVER THAT OUR SWAGGER SETUP DOES NOT WORK WITH OUR VERSIONING \u00b6 DECORATE EVERY VERSION 2.0 CONTROLLER ACTION ENDPOINT WITH VERSIONING \u00b6 [Route( \"api/v{version:apiVersion}/[controller] \" )] [ApiController] [EnableCors(\"CorsPolicy\")] [ApiVersion( \"2.0\" )] public class CustomerController : ControllerBase INSTALL APIEXPLORER NUGET PACKAGE IN API PROJECT \u00b6 dotnet add package Microsoft.AspNetCore.Mvc.Versioning.ApiExplorer ADD APIEXPLORER TO SERVICES IN CONFIGURESERVICES IN STARTUP \u00b6 ServicesConfiguration.cs \u00b6 services.AddVersionedApiExplorer(setup => { setup.GroupNameFormat = \"'v'VVV\"; setup.SubstituteApiVersionInUrl = true; }); ADD IApiVersionDescriptionProvider TO CONFIGURE PARAMS IN STARTUP \u00b6 public void Configure ( IApplicationBuilder app , IWebHostEnvironment env , IApiVersionDescriptionProvider provider ) { app . UseAuthentication (); if ( env . IsDevelopment ()) { app . UseDeveloperExceptionPage (); } ADD ConfigureSwaggerOptions AND MODIFY THE SWAGGER CODE TO DOCUMENT EACH VERSION'S SWAGGER FILE \u00b6 ServicesConfiguration.cs \u00b6 public static void AddSwaggerServices ( this IServiceCollection services ) { services . AddSwaggerGen (); services . ConfigureOptions < ConfigureSwaggerOptions >(); } public static void AddApiExplorer ( this IServiceCollection services ) { services . AddVersionedApiExplorer ( setup => { setup . GroupNameFormat = \"'v'VVV\" ; setup . SubstituteApiVersionInUrl = true ; }); } Add ConfigureSwaggerOptions class to ServicesConfiguration.cs \u00b6 public class ConfigureSwaggerOptions : IConfigureNamedOptions < SwaggerGenOptions > { private readonly IApiVersionDescriptionProvider provider ; public ConfigureSwaggerOptions ( IApiVersionDescriptionProvider provider ) { this . provider = provider ; } public void Configure ( SwaggerGenOptions options ) { // add swagger document for every API version discovered foreach ( var description in provider . ApiVersionDescriptions ) { options . SwaggerDoc ( description . GroupName , CreateVersionInfo ( description )); options . EnableAnnotations (); } } public void Configure ( string name , SwaggerGenOptions options ) { Configure ( options ); } private OpenApiInfo CreateVersionInfo ( ApiVersionDescription description ) { var info = new OpenApiInfo () { Version = \"v1\" , Title = \"Chinook Music Store API\" , Description = \"A simple example ASP.NET Core Web API\" , TermsOfService = new Uri ( \"https://example.com/terms\" ), Contact = new OpenApiContact { Name = \"Chris Woodruff\" , Email = string . Empty , Url = new Uri ( \"https://chriswoodruff.com\" ) }, License = new OpenApiLicense { Name = \"Use under MIT\" , Url = new Uri ( \"https://opensource.org/licenses/MIT\" ) } }; if ( description . IsDeprecated ) { info . Description += \" This API version has been deprecated.\" ; } return info ; } } CHANGE launchSettings.json IN PROPERTIES FOLDER TO LAUNCH SWAGGER ON RUN \u00b6 \"IIS Express\" : { \"commandName\" : \"IISExpress\" , \"launchBrowser\" : true , \"launchUrl\" : \"swagger/\" , \"environmentVariables\" : { \"ASPNETCORE_ENVIRONMENT\" : \"Development\" } } SWAGGER FOR V1 \u00b6 SWAGGER FOR V2 \u00b6 NOTE: Solution for versioning issues from @referbruv https://www.referbruv.com/blog/posts/integrating-aspnet-core-api-versions-with-swagger-ui","title":"Documenting your API with OpenAPI"},{"location":"Standing%20Up%20an%20ASP.NET%20Core%20Web%20API/documenting-with-openapi/#documenting-your-api-with-openapi","text":"","title":"Documenting your API with OpenAPI"},{"location":"Standing%20Up%20an%20ASP.NET%20Core%20Web%20API/documenting-with-openapi/#start-from-previous-modules-end","text":"Versioning your Web API","title":"START FROM PREVIOUS MODULE\"S END"},{"location":"Standing%20Up%20an%20ASP.NET%20Core%20Web%20API/documenting-with-openapi/#add-openapiswagger-nuget-packages-to-api","text":"dotnet add package Swashbuckle.AspNetCore.Swagger dotnet add package Swashbuckle.AspNetCore.SwaggerGen dotnet add package Swashbuckle.AspNetCore.SwaggerUI dotnet add package Swashbuckle.AspNetCore.Annotations","title":"ADD OPENAPI/SWAGGER NUGET PACKAGES TO API"},{"location":"Standing%20Up%20an%20ASP.NET%20Core%20Web%20API/documenting-with-openapi/#add-openapiswagger-to-startup-configureservices","text":"","title":"ADD OPENAPI/SWAGGER TO STARTUP CONFIGURESERVICES"},{"location":"Standing%20Up%20an%20ASP.NET%20Core%20Web%20API/documenting-with-openapi/#servicesconfigurationcs","text":"services . AddSwaggerGen ( c => { c . SwaggerDoc ( \"v1\" , new OpenApiInfo { Version = \"v1\" , Title = \"Chinook Music Store API\" , Description = \"A simple example ASP.NET Core Web API\" , TermsOfService = new Uri ( \"https://example.com/terms\" ), Contact = new OpenApiContact { Name = \"Chris Woodruff\" , Email = string . Empty , Url = new Uri ( \"https://chriswoodruff.com\" ) }, License = new OpenApiLicense { Name = \"Use under MIT\" , Url = new Uri ( \"https://opensource.org/licenses/MIT\" ) } }); c . EnableAnnotations (); });","title":"ServicesConfiguration.cs"},{"location":"Standing%20Up%20an%20ASP.NET%20Core%20Web%20API/documenting-with-openapi/#add-openapiswagger-to-startup-configure","text":"app . UseSwagger (); app . UseSwaggerUI ( s => s . SwaggerEndpoint ( \"/swagger/v1/swagger.json\" , \"v1 docs\" ));","title":"ADD OPENAPI/SWAGGER TO STARTUP CONFIGURE()"},{"location":"Standing%20Up%20an%20ASP.NET%20Core%20Web%20API/documenting-with-openapi/#discover-that-our-swagger-setup-does-not-work-with-our-versioning","text":"","title":"DISCOVER THAT OUR SWAGGER SETUP DOES NOT WORK WITH OUR VERSIONING"},{"location":"Standing%20Up%20an%20ASP.NET%20Core%20Web%20API/documenting-with-openapi/#decorate-every-version-20-controller-action-endpoint-with-versioning","text":"[Route( \"api/v{version:apiVersion}/[controller] \" )] [ApiController] [EnableCors(\"CorsPolicy\")] [ApiVersion( \"2.0\" )] public class CustomerController : ControllerBase","title":"DECORATE EVERY VERSION 2.0 CONTROLLER ACTION ENDPOINT WITH VERSIONING"},{"location":"Standing%20Up%20an%20ASP.NET%20Core%20Web%20API/documenting-with-openapi/#install-apiexplorer-nuget-package-in-api-project","text":"dotnet add package Microsoft.AspNetCore.Mvc.Versioning.ApiExplorer","title":"INSTALL APIEXPLORER NUGET PACKAGE IN API PROJECT"},{"location":"Standing%20Up%20an%20ASP.NET%20Core%20Web%20API/documenting-with-openapi/#add-apiexplorer-to-services-in-configureservices-in-startup","text":"","title":"ADD APIEXPLORER TO SERVICES IN CONFIGURESERVICES IN STARTUP"},{"location":"Standing%20Up%20an%20ASP.NET%20Core%20Web%20API/documenting-with-openapi/#servicesconfigurationcs_1","text":"services.AddVersionedApiExplorer(setup => { setup.GroupNameFormat = \"'v'VVV\"; setup.SubstituteApiVersionInUrl = true; });","title":"ServicesConfiguration.cs"},{"location":"Standing%20Up%20an%20ASP.NET%20Core%20Web%20API/documenting-with-openapi/#add-iapiversiondescriptionprovider-to-configure-params-in-startup","text":"public void Configure ( IApplicationBuilder app , IWebHostEnvironment env , IApiVersionDescriptionProvider provider ) { app . UseAuthentication (); if ( env . IsDevelopment ()) { app . UseDeveloperExceptionPage (); }","title":"ADD IApiVersionDescriptionProvider TO CONFIGURE PARAMS IN STARTUP"},{"location":"Standing%20Up%20an%20ASP.NET%20Core%20Web%20API/documenting-with-openapi/#add-configureswaggeroptions-and-modify-the-swagger-code-to-document-each-versions-swagger-file","text":"","title":"ADD ConfigureSwaggerOptions AND MODIFY THE SWAGGER CODE TO DOCUMENT EACH VERSION'S SWAGGER FILE"},{"location":"Standing%20Up%20an%20ASP.NET%20Core%20Web%20API/documenting-with-openapi/#servicesconfigurationcs_2","text":"public static void AddSwaggerServices ( this IServiceCollection services ) { services . AddSwaggerGen (); services . ConfigureOptions < ConfigureSwaggerOptions >(); } public static void AddApiExplorer ( this IServiceCollection services ) { services . AddVersionedApiExplorer ( setup => { setup . GroupNameFormat = \"'v'VVV\" ; setup . SubstituteApiVersionInUrl = true ; }); }","title":"ServicesConfiguration.cs"},{"location":"Standing%20Up%20an%20ASP.NET%20Core%20Web%20API/documenting-with-openapi/#add-configureswaggeroptions-class-to-servicesconfigurationcs","text":"public class ConfigureSwaggerOptions : IConfigureNamedOptions < SwaggerGenOptions > { private readonly IApiVersionDescriptionProvider provider ; public ConfigureSwaggerOptions ( IApiVersionDescriptionProvider provider ) { this . provider = provider ; } public void Configure ( SwaggerGenOptions options ) { // add swagger document for every API version discovered foreach ( var description in provider . ApiVersionDescriptions ) { options . SwaggerDoc ( description . GroupName , CreateVersionInfo ( description )); options . EnableAnnotations (); } } public void Configure ( string name , SwaggerGenOptions options ) { Configure ( options ); } private OpenApiInfo CreateVersionInfo ( ApiVersionDescription description ) { var info = new OpenApiInfo () { Version = \"v1\" , Title = \"Chinook Music Store API\" , Description = \"A simple example ASP.NET Core Web API\" , TermsOfService = new Uri ( \"https://example.com/terms\" ), Contact = new OpenApiContact { Name = \"Chris Woodruff\" , Email = string . Empty , Url = new Uri ( \"https://chriswoodruff.com\" ) }, License = new OpenApiLicense { Name = \"Use under MIT\" , Url = new Uri ( \"https://opensource.org/licenses/MIT\" ) } }; if ( description . IsDeprecated ) { info . Description += \" This API version has been deprecated.\" ; } return info ; } }","title":"Add ConfigureSwaggerOptions class to ServicesConfiguration.cs"},{"location":"Standing%20Up%20an%20ASP.NET%20Core%20Web%20API/documenting-with-openapi/#change-launchsettingsjson-in-properties-folder-to-launch-swagger-on-run","text":"\"IIS Express\" : { \"commandName\" : \"IISExpress\" , \"launchBrowser\" : true , \"launchUrl\" : \"swagger/\" , \"environmentVariables\" : { \"ASPNETCORE_ENVIRONMENT\" : \"Development\" } }","title":"CHANGE launchSettings.json IN PROPERTIES FOLDER TO LAUNCH SWAGGER ON RUN"},{"location":"Standing%20Up%20an%20ASP.NET%20Core%20Web%20API/documenting-with-openapi/#swagger-for-v1","text":"","title":"SWAGGER FOR V1"},{"location":"Standing%20Up%20an%20ASP.NET%20Core%20Web%20API/documenting-with-openapi/#swagger-for-v2","text":"NOTE: Solution for versioning issues from @referbruv https://www.referbruv.com/blog/posts/integrating-aspnet-core-api-versions-with-swagger-ui","title":"SWAGGER FOR V2"},{"location":"Standing%20Up%20an%20ASP.NET%20Core%20Web%20API/formatting-response-data/","text":"Formatting Response Data in your API \u00b6 START FROM PREVIOUS MODULE\"S END \u00b6 Documenting your API with OpenAPI","title":"Formatting Reponse Data in your API"},{"location":"Standing%20Up%20an%20ASP.NET%20Core%20Web%20API/formatting-response-data/#formatting-response-data-in-your-api","text":"","title":"Formatting Response Data in your API"},{"location":"Standing%20Up%20an%20ASP.NET%20Core%20Web%20API/formatting-response-data/#start-from-previous-modules-end","text":"Documenting your API with OpenAPI","title":"START FROM PREVIOUS MODULE\"S END"},{"location":"Standing%20Up%20an%20ASP.NET%20Core%20Web%20API/identity/","text":"Identity in your Web API \u00b6 START FROM PREVIOUS MODULE\"S END \u00b6 Caching Data in Your API INSTALL NUGET PACKAGES TO API PROJECT \u00b6 dotnet add package Microsoft.AspNetCore.Authentication.JwtBearer dotnet add package Microsoft.AspNetCore.Identity.EntityFrameworkCore dotnet add package Microsoft.AspNetCore.Identity.UI INSTALL NUGET PACKAGE TO DATA PROJECT \u00b6 dotnet add package Microsoft.AspNetCore.Identity.EntityFrameworkCore UPDATE OUR APPSETTINGS.JSON IN API PROJECT \u00b6 Note: Will need to generate your new 32 character string. \"JwtConfig\" : { \"SecretKey\" : \"jkbflfzogupbyhypamekltpwkumodlfa\" }, ** No te : h tt ps : //www.ra n dom.org/s tr i n g CREATE NEW CLASS IN CONFIGURATION FOLDER IN API PROJECT \u00b6 namespace ChinookASPNETWebAPI.API.Configurations { public class JwtConfig { public string Secret { get ; set ; } } } ADD IDENTITY AND JWT CODE TO STARTUP IN API PROJECT \u00b6 ServicesConfiguration.cs \u00b6 public static void AddIdentity ( this IServiceCollection services , IConfiguration configuration ) { services . Configure < JwtConfig >( configuration . GetSection ( \"JwtConfig\" )); services . AddAuthentication ( options => { options . DefaultAuthenticateScheme = JwtBearerDefaults . AuthenticationScheme ; options . DefaultScheme = JwtBearerDefaults . AuthenticationScheme ; options . DefaultChallengeScheme = JwtBearerDefaults . AuthenticationScheme ; }) . AddJwtBearer ( jwt => { var key = Encoding . ASCII . GetBytes ( configuration [ \"JwtConfig:Secret\" ]); jwt . SaveToken = true ; jwt . TokenValidationParameters = new TokenValidationParameters { ValidateIssuerSigningKey = true , IssuerSigningKey = new SymmetricSecurityKey ( key ), ValidateIssuer = false , ValidateAudience = false , RequireExpirationTime = false , ValidateLifetime = true }; }); services . AddDefaultIdentity < IdentityUser >( options => options . SignIn . RequireConfirmedAccount = true ) . AddEntityFrameworkStores < ChinookContext >(); } ADD TO STARTUP CONFIGURE IN API PROJECT \u00b6 app . UseAuthentication (); Note : Add to very first line and has to be before app.UseAuthorization(); ADD NEW CLASSES FOR IDENTITY IN IDENTITY FOLDER IN DOMAIN PROJECT \u00b6 AuthResult.cs \u00b6 using System.Collections.Generic ; namespace ChinookASPNETWebAPI.Domain.Identity { public class AuthResult { public string Token { get ; set ;} public bool Result { get ; set ; } public List < string > Errors { get ; set ; } } } RegisterModel.cs \u00b6 using System.ComponentModel.DataAnnotations ; namespace ChinookASPNETWebAPI.Domain.Identity { public class RegisterModel { [Required] public string Name { get ; set ; } [Required] public string Email { get ; set ; } [Required] public string Password { get ; set ; } } } RegistrationResponse.cs \u00b6 namespace ChinookASPNETWebAPI.Domain.Identity { public class RegistrationResponse : AuthResult { } } LoginModel.cs \u00b6 using System.ComponentModel.DataAnnotations ; namespace ChinookASPNETWebAPI.Domain.Identity { public class LoginModel { [Required] public string Email { get ; set ; } [Required] public string Password { get ; set ; } } } UPDATE DBCONTEXT TO DESCEND FROM IDENTITYDBCONTEXT \u00b6 ADD REGISTER ACTION AND LOGIN ACTION TO HOME CONTROLLER IN API POJECT \u00b6 [Route(\"api/[controller] \")] [ApiController] [EnableCors(\"CorsPolicy\")] [ApiVersion( \"1.0\" )] public class HomeController : ControllerBase { private readonly ILogger < HomeController > _logger ; private readonly UserManager < IdentityUser > _userManager ; private readonly JwtConfig _jwtConfig ; public HomeController ( ILogger < HomeController > logger , UserManager < IdentityUser > userManager , IOptionsMonitor < JwtConfig > optionsMonitor ) { _logger = logger ; _userManager = userManager ; _jwtConfig = optionsMonitor . CurrentValue ; } [HttpGet] public IActionResult Index () { return Ok (); } [HttpPost, Route(\"Register\")] public async Task < ActionResult < RegistrationResponse >> Register ([ FromBody ] RegisterModel user ) { // Check if the incoming request is valid if ( ModelState . IsValid ) { // check i the user with the same email exist var existingUser = await _userManager . FindByEmailAsync ( user . Email ); if ( existingUser != null ) return BadRequest ( new RegistrationResponse { Result = false , Errors = new List < string > { \"Email already exist\" } }); var newUser = new IdentityUser { Email = user . Email , UserName = user . Email }; var isCreated = await _userManager . CreateAsync ( newUser , user . Password ); if ( isCreated . Succeeded ) { var jwtToken = GenerateJwtToken ( newUser ); return Ok ( new RegistrationResponse { Result = true , Token = jwtToken }); } return new JsonResult ( new RegistrationResponse { Result = false , Errors = isCreated . Errors . Select ( x => x . Description ). ToList () } ) { StatusCode = 500 }; } return BadRequest ( new RegistrationResponse { Result = false , Errors = new List < string > { \"Invalid payload\" } }); } [HttpPost, Route(\"Login\")] public async Task < ActionResult < RegistrationResponse >> Login ([ FromBody ] LoginModel user ) { if ( ModelState . IsValid ) { // check if the user with the same email exist var existingUser = await _userManager . FindByEmailAsync ( user . Email ); if ( existingUser == null ) { // We dont want to give to much information on why the request has failed for security reasons return BadRequest ( new RegistrationResponse () { Result = false , Errors = new List < string >(){ \"Invalid authentication request\" }}); } // Now we need to check if the user has inputed the right password var isCorrect = await _userManager . CheckPasswordAsync ( existingUser , user . Password ); if ( isCorrect ) { var jwtToken = GenerateJwtToken ( existingUser ); return Ok ( new RegistrationResponse () { Result = true , Token = jwtToken }); } else { // We dont want to give to much information on why the request has failed for security reasons return BadRequest ( new RegistrationResponse () { Result = false , Errors = new List < string >(){ \"Invalid authentication request\" }}); } } return BadRequest ( new RegistrationResponse () { Result = false , Errors = new List < string >(){ \"Invalid payload\" }}); } private string GenerateJwtToken ( IdentityUser user ) { // Now its ime to define the jwt token which will be responsible of creating our tokens var jwtTokenHandler = new JwtSecurityTokenHandler (); // We get our secret from the appsettings var key = Encoding . ASCII . GetBytes ( _jwtConfig . Secret ); // we define our token descriptor // We need to utilise claims which are properties in our token which gives information about the token // which belong to the specific user who it belongs to // so it could contain their id, name, email the good part is that these information // are generated by our server and identity framework which is valid and trusted var tokenDescriptor = new SecurityTokenDescriptor { Subject = new ClaimsIdentity ( new [] { new Claim ( \"Id\" , user . Id ), new Claim ( JwtRegisteredClaimNames . Sub , user . Email ), new Claim ( JwtRegisteredClaimNames . Email , user . Email ), // the JTI is used for our refresh token which we will be convering in the next video new Claim ( JwtRegisteredClaimNames . Jti , Guid . NewGuid (). ToString ()) }), // the life span of the token needs to be shorter and utilise refresh token to keep the user signedin // but since this is a demo app we can extend it to fit our current need Expires = DateTime . UtcNow . AddHours ( 6 ), // here we are adding the encryption alogorithim information which will be used to decrypt our token SigningCredentials = new SigningCredentials ( new SymmetricSecurityKey ( key ), SecurityAlgorithms . HmacSha512Signature ) }; var token = jwtTokenHandler . CreateToken ( tokenDescriptor ); var jwtToken = jwtTokenHandler . WriteToken ( token ); return jwtToken ; } } AUTHORIZE THE ALBUM CONTROLLER FOR IDENTITY IN API POJECT \u00b6 TEST IN POSTMAN \u00b6 Payload for Register Endpoint \u00b6 { \"name\" : \"Chris Woodruff\" , \"email\" : \"cwoodruff@live.com\" , \"password\" : \"p@ssw0rd\" } Login endpoint in Postman \u00b6 Results from Album GetAll Endpoint using Identity \u00b6","title":"Identity in your Web API"},{"location":"Standing%20Up%20an%20ASP.NET%20Core%20Web%20API/identity/#identity-in-your-web-api","text":"","title":"Identity in your Web API"},{"location":"Standing%20Up%20an%20ASP.NET%20Core%20Web%20API/identity/#start-from-previous-modules-end","text":"Caching Data in Your API","title":"START FROM PREVIOUS MODULE\"S END"},{"location":"Standing%20Up%20an%20ASP.NET%20Core%20Web%20API/identity/#install-nuget-packages-to-api-project","text":"dotnet add package Microsoft.AspNetCore.Authentication.JwtBearer dotnet add package Microsoft.AspNetCore.Identity.EntityFrameworkCore dotnet add package Microsoft.AspNetCore.Identity.UI","title":"INSTALL NUGET PACKAGES TO API PROJECT"},{"location":"Standing%20Up%20an%20ASP.NET%20Core%20Web%20API/identity/#install-nuget-package-to-data-project","text":"dotnet add package Microsoft.AspNetCore.Identity.EntityFrameworkCore","title":"INSTALL NUGET PACKAGE TO DATA PROJECT"},{"location":"Standing%20Up%20an%20ASP.NET%20Core%20Web%20API/identity/#update-our-appsettingsjson-in-api-project","text":"Note: Will need to generate your new 32 character string. \"JwtConfig\" : { \"SecretKey\" : \"jkbflfzogupbyhypamekltpwkumodlfa\" }, ** No te : h tt ps : //www.ra n dom.org/s tr i n g","title":"UPDATE OUR APPSETTINGS.JSON IN API PROJECT"},{"location":"Standing%20Up%20an%20ASP.NET%20Core%20Web%20API/identity/#create-new-class-in-configuration-folder-in-api-project","text":"namespace ChinookASPNETWebAPI.API.Configurations { public class JwtConfig { public string Secret { get ; set ; } } }","title":"CREATE NEW CLASS IN CONFIGURATION FOLDER IN API PROJECT"},{"location":"Standing%20Up%20an%20ASP.NET%20Core%20Web%20API/identity/#add-identity-and-jwt-code-to-startup-in-api-project","text":"","title":"ADD IDENTITY AND JWT CODE TO STARTUP IN API PROJECT"},{"location":"Standing%20Up%20an%20ASP.NET%20Core%20Web%20API/identity/#servicesconfigurationcs","text":"public static void AddIdentity ( this IServiceCollection services , IConfiguration configuration ) { services . Configure < JwtConfig >( configuration . GetSection ( \"JwtConfig\" )); services . AddAuthentication ( options => { options . DefaultAuthenticateScheme = JwtBearerDefaults . AuthenticationScheme ; options . DefaultScheme = JwtBearerDefaults . AuthenticationScheme ; options . DefaultChallengeScheme = JwtBearerDefaults . AuthenticationScheme ; }) . AddJwtBearer ( jwt => { var key = Encoding . ASCII . GetBytes ( configuration [ \"JwtConfig:Secret\" ]); jwt . SaveToken = true ; jwt . TokenValidationParameters = new TokenValidationParameters { ValidateIssuerSigningKey = true , IssuerSigningKey = new SymmetricSecurityKey ( key ), ValidateIssuer = false , ValidateAudience = false , RequireExpirationTime = false , ValidateLifetime = true }; }); services . AddDefaultIdentity < IdentityUser >( options => options . SignIn . RequireConfirmedAccount = true ) . AddEntityFrameworkStores < ChinookContext >(); }","title":"ServicesConfiguration.cs"},{"location":"Standing%20Up%20an%20ASP.NET%20Core%20Web%20API/identity/#add-to-startup-configure-in-api-project","text":"app . UseAuthentication (); Note : Add to very first line and has to be before app.UseAuthorization();","title":"ADD TO STARTUP CONFIGURE IN API PROJECT"},{"location":"Standing%20Up%20an%20ASP.NET%20Core%20Web%20API/identity/#add-new-classes-for-identity-in-identity-folder-in-domain-project","text":"","title":"ADD NEW CLASSES FOR IDENTITY IN IDENTITY FOLDER IN DOMAIN PROJECT"},{"location":"Standing%20Up%20an%20ASP.NET%20Core%20Web%20API/identity/#authresultcs","text":"using System.Collections.Generic ; namespace ChinookASPNETWebAPI.Domain.Identity { public class AuthResult { public string Token { get ; set ;} public bool Result { get ; set ; } public List < string > Errors { get ; set ; } } }","title":"AuthResult.cs"},{"location":"Standing%20Up%20an%20ASP.NET%20Core%20Web%20API/identity/#registermodelcs","text":"using System.ComponentModel.DataAnnotations ; namespace ChinookASPNETWebAPI.Domain.Identity { public class RegisterModel { [Required] public string Name { get ; set ; } [Required] public string Email { get ; set ; } [Required] public string Password { get ; set ; } } }","title":"RegisterModel.cs"},{"location":"Standing%20Up%20an%20ASP.NET%20Core%20Web%20API/identity/#registrationresponsecs","text":"namespace ChinookASPNETWebAPI.Domain.Identity { public class RegistrationResponse : AuthResult { } }","title":"RegistrationResponse.cs"},{"location":"Standing%20Up%20an%20ASP.NET%20Core%20Web%20API/identity/#loginmodelcs","text":"using System.ComponentModel.DataAnnotations ; namespace ChinookASPNETWebAPI.Domain.Identity { public class LoginModel { [Required] public string Email { get ; set ; } [Required] public string Password { get ; set ; } } }","title":"LoginModel.cs"},{"location":"Standing%20Up%20an%20ASP.NET%20Core%20Web%20API/identity/#update-dbcontext-to-descend-from-identitydbcontext","text":"","title":"UPDATE DBCONTEXT TO DESCEND FROM IDENTITYDBCONTEXT"},{"location":"Standing%20Up%20an%20ASP.NET%20Core%20Web%20API/identity/#add-register-action-and-login-action-to-home-controller-in-api-poject","text":"[Route(\"api/[controller] \")] [ApiController] [EnableCors(\"CorsPolicy\")] [ApiVersion( \"1.0\" )] public class HomeController : ControllerBase { private readonly ILogger < HomeController > _logger ; private readonly UserManager < IdentityUser > _userManager ; private readonly JwtConfig _jwtConfig ; public HomeController ( ILogger < HomeController > logger , UserManager < IdentityUser > userManager , IOptionsMonitor < JwtConfig > optionsMonitor ) { _logger = logger ; _userManager = userManager ; _jwtConfig = optionsMonitor . CurrentValue ; } [HttpGet] public IActionResult Index () { return Ok (); } [HttpPost, Route(\"Register\")] public async Task < ActionResult < RegistrationResponse >> Register ([ FromBody ] RegisterModel user ) { // Check if the incoming request is valid if ( ModelState . IsValid ) { // check i the user with the same email exist var existingUser = await _userManager . FindByEmailAsync ( user . Email ); if ( existingUser != null ) return BadRequest ( new RegistrationResponse { Result = false , Errors = new List < string > { \"Email already exist\" } }); var newUser = new IdentityUser { Email = user . Email , UserName = user . Email }; var isCreated = await _userManager . CreateAsync ( newUser , user . Password ); if ( isCreated . Succeeded ) { var jwtToken = GenerateJwtToken ( newUser ); return Ok ( new RegistrationResponse { Result = true , Token = jwtToken }); } return new JsonResult ( new RegistrationResponse { Result = false , Errors = isCreated . Errors . Select ( x => x . Description ). ToList () } ) { StatusCode = 500 }; } return BadRequest ( new RegistrationResponse { Result = false , Errors = new List < string > { \"Invalid payload\" } }); } [HttpPost, Route(\"Login\")] public async Task < ActionResult < RegistrationResponse >> Login ([ FromBody ] LoginModel user ) { if ( ModelState . IsValid ) { // check if the user with the same email exist var existingUser = await _userManager . FindByEmailAsync ( user . Email ); if ( existingUser == null ) { // We dont want to give to much information on why the request has failed for security reasons return BadRequest ( new RegistrationResponse () { Result = false , Errors = new List < string >(){ \"Invalid authentication request\" }}); } // Now we need to check if the user has inputed the right password var isCorrect = await _userManager . CheckPasswordAsync ( existingUser , user . Password ); if ( isCorrect ) { var jwtToken = GenerateJwtToken ( existingUser ); return Ok ( new RegistrationResponse () { Result = true , Token = jwtToken }); } else { // We dont want to give to much information on why the request has failed for security reasons return BadRequest ( new RegistrationResponse () { Result = false , Errors = new List < string >(){ \"Invalid authentication request\" }}); } } return BadRequest ( new RegistrationResponse () { Result = false , Errors = new List < string >(){ \"Invalid payload\" }}); } private string GenerateJwtToken ( IdentityUser user ) { // Now its ime to define the jwt token which will be responsible of creating our tokens var jwtTokenHandler = new JwtSecurityTokenHandler (); // We get our secret from the appsettings var key = Encoding . ASCII . GetBytes ( _jwtConfig . Secret ); // we define our token descriptor // We need to utilise claims which are properties in our token which gives information about the token // which belong to the specific user who it belongs to // so it could contain their id, name, email the good part is that these information // are generated by our server and identity framework which is valid and trusted var tokenDescriptor = new SecurityTokenDescriptor { Subject = new ClaimsIdentity ( new [] { new Claim ( \"Id\" , user . Id ), new Claim ( JwtRegisteredClaimNames . Sub , user . Email ), new Claim ( JwtRegisteredClaimNames . Email , user . Email ), // the JTI is used for our refresh token which we will be convering in the next video new Claim ( JwtRegisteredClaimNames . Jti , Guid . NewGuid (). ToString ()) }), // the life span of the token needs to be shorter and utilise refresh token to keep the user signedin // but since this is a demo app we can extend it to fit our current need Expires = DateTime . UtcNow . AddHours ( 6 ), // here we are adding the encryption alogorithim information which will be used to decrypt our token SigningCredentials = new SigningCredentials ( new SymmetricSecurityKey ( key ), SecurityAlgorithms . HmacSha512Signature ) }; var token = jwtTokenHandler . CreateToken ( tokenDescriptor ); var jwtToken = jwtTokenHandler . WriteToken ( token ); return jwtToken ; } }","title":"ADD REGISTER ACTION AND LOGIN ACTION TO HOME CONTROLLER IN API POJECT"},{"location":"Standing%20Up%20an%20ASP.NET%20Core%20Web%20API/identity/#authorize-the-album-controller-for-identity-in-api-poject","text":"","title":"AUTHORIZE THE ALBUM CONTROLLER FOR IDENTITY IN API POJECT"},{"location":"Standing%20Up%20an%20ASP.NET%20Core%20Web%20API/identity/#test-in-postman","text":"","title":"TEST IN POSTMAN"},{"location":"Standing%20Up%20an%20ASP.NET%20Core%20Web%20API/identity/#payload-for-register-endpoint","text":"{ \"name\" : \"Chris Woodruff\" , \"email\" : \"cwoodruff@live.com\" , \"password\" : \"p@ssw0rd\" }","title":"Payload for Register Endpoint"},{"location":"Standing%20Up%20an%20ASP.NET%20Core%20Web%20API/identity/#login-endpoint-in-postman","text":"","title":"Login endpoint in Postman"},{"location":"Standing%20Up%20an%20ASP.NET%20Core%20Web%20API/identity/#results-from-album-getall-endpoint-using-identity","text":"","title":"Results from Album GetAll Endpoint using Identity"},{"location":"Standing%20Up%20an%20ASP.NET%20Core%20Web%20API/ntier-api-endpoints/","text":"Developing the API endpoints \u00b6 START FROM PREVIOUS MODULE\"S END \u00b6 Developing the API Data access ADD APIMODELS TO DOMAIN \u00b6 using System.Collections.Generic ; namespace ChinookASPNETWebAPI.Domain.ApiModels { public class AlbumApiModel { public int Id { get ; set ; } public string Title { get ; set ; } public int ArtistId { get ; set ; } public string ArtistName { get ; set ; } public ArtistApiModel Artist { get ; set ; } public IList < TrackApiModel > Tracks { get ; set ; } } } ADD IConvertModel TO DOMAIN \u00b6 using System.Threading.Tasks ; namespace ChinookASPNETWebAPI.Domain.Converters { public interface IConvertModel < TSource , TTarget > { TTarget Convert (); } } ADD ConvertExtensions TO DOMAIN \u00b6 using System.Collections.Generic ; using System.Linq ; using System.Threading.Tasks ; using ChinookASPNETWebAPI.Domain.Converters ; namespace ChinookASPNETWebAPI.Domain.Extensions { public static class ConvertExtensions { public static IEnumerable < TTarget > ConvertAll < TSource , TTarget >( this IEnumerable < IConvertModel < TSource , TTarget >> values ) => values . Select ( value => value . Convert ()); } } ADD CONVERT CODE APIMODELS IN DOMAIN \u00b6 using System.Collections.Generic ; using System.Threading.Tasks ; using ChinookASPNETWebAPI.Domain.Converters ; using ChinookASPNETWebAPI.Domain.Entities ; namespace ChinookASPNETWebAPI.Domain.ApiModels { public class AlbumApiModel : IConvertModel < AlbumApiModel , Album > { public int Id { get ; set ; } public string Title { get ; set ; } public int ArtistId { get ; set ; } public string ArtistName { get ; set ; } public ArtistApiModel Artist { get ; set ; } public IList < TrackApiModel > Tracks { get ; set ; } public Album Convert () => new () { Id = Id , ArtistId = ArtistId , Title = Title ?? string . Empty }; } } ADD CONVERT CODE ENTITIES IN DOMAIN \u00b6 using System.Collections.Generic ; using ChinookASPNETWebAPI.Domain.ApiModels ; using ChinookASPNETWebAPI.Domain.Converters ; # nullable disable namespace ChinookASPNETWebAPI.Domain.Entities { public partial class Album : IConvertModel < Album , AlbumApiModel > { public Album () { Tracks = new HashSet < Track >(); } public int Id { get ; set ; } public string Title { get ; set ; } public int ArtistId { get ; set ; } public virtual Artist Artist { get ; set ; } public virtual ICollection < Track > Tracks { get ; set ; } public AlbumApiModel Convert () => new () { Id = Id , ArtistId = ArtistId , Title = Title }; } } ADD SUPERVISOR TO DOMAIN \u00b6 Take a look at the code here for the logic of the Supervisor ADD APPSETTINGS TO API PROJECT \u00b6 appsettings.json \u00b6 { \"Logging\" : { \"LogLevel\" : { \"Default\" : \"Information\" , \"Microsoft\" : \"Warning\" , \"Microsoft.Hosting.Lifetime\" : \"Information\" } }, \"ConnectionStrings\" : { \"ChinookDbWindows\" : \"Server=.;Database=Chinook;Trusted_Connection=True;Application Name=ChinookASPNETCoreAPINTier\" , \"ChinookDbDocker\" : \"Server=localhost,1433;Database=Chinook;User=sa;Password=P@55w0rd;Trusted_Connection=False;Application Name=ChinookASPNETCoreAPINTier\" }, \"AllowedHosts\" : \"*\" } AppSettings.cs \u00b6 namespace ChinookASPNETWebAPI.API.Configurations { public abstract class AppSettings { } } ConfigureAppSettings.cs \u00b6 using Microsoft.Extensions.Configuration ; using Microsoft.Extensions.DependencyInjection ; namespace ChinookASPNETWebAPI.API.Configurations { public static class ConfigureAppSettings { public static IServiceCollection AddAppSettings ( this IServiceCollection services , IConfiguration configuration ) { services . Configure < AppSettings >( _ => configuration . GetSection ( \"AppSettings\" ). Bind ( _ )); return services ; } } } ADD SERVICESCONFIGURATION TO API PROJECT \u00b6 public static class ServicesConfiguration { public static void ConfigureRepositories ( this IServiceCollection services ) { services . AddScoped < IAlbumRepository , AlbumRepository >() . AddScoped < IArtistRepository , ArtistRepository >() . AddScoped < ICustomerRepository , CustomerRepository >() . AddScoped < IEmployeeRepository , EmployeeRepository >() . AddScoped < IGenreRepository , GenreRepository >() . AddScoped < IInvoiceRepository , InvoiceRepository >() . AddScoped < IInvoiceLineRepository , InvoiceLineRepository >() . AddScoped < IMediaTypeRepository , MediaTypeRepository >() . AddScoped < IPlaylistRepository , PlaylistRepository >() . AddScoped < ITrackRepository , TrackRepository >(); } public static void ConfigureSupervisor ( this IServiceCollection services ) { services . AddScoped < IChinookSupervisor , ChinookSupervisor >(); } } ADD CONTROLLERS TO API \u00b6 ADD ACTIONS TO CONTROLLERS \u00b6 [Route(\"api/[controller] \")] [ApiController] public class AlbumController : ControllerBase { private readonly IChinookSupervisor _chinookSupervisor ; private readonly ILogger < AlbumController > _logger ; public AlbumController ( IChinookSupervisor chinookSupervisor , ILogger < AlbumController > logger ) { _chinookSupervisor = chinookSupervisor ; _logger = logger ; } [HttpGet] [Produces(typeof(List<AlbumApiModel>))] public async Task < ActionResult < List < AlbumApiModel >>> Get () { return Ok ( await _chinookSupervisor . GetAllAlbum ()); } [HttpGet(\"{id}\", Name = \"GetAlbumById\")] public async Task < ActionResult < AlbumApiModel >> Get ( int id ) { return Ok ( await _chinookSupervisor . GetAlbumById ( id )); } [HttpGet(\"artist/{id}\", Name = \"GetByArtistId\")] public async Task < ActionResult < List < AlbumApiModel >>> GetByArtistId ( int id ) { return Ok ( await _chinookSupervisor . GetAlbumByArtistId ( id )); } [HttpPost] [Produces(\"application/json\")] [Consumes(\"application/json\")] public async Task < ActionResult < AlbumApiModel >> Post ([ FromBody ] AlbumApiModel input ) { return Ok ( await _chinookSupervisor . AddAlbum ( input )); } [HttpPut(\"{id}\")] [Produces(\"application/json\")] [Consumes(\"application/json\")] public async Task < ActionResult < AlbumApiModel >> Put ( int id , [ FromBody ] AlbumApiModel input ) { return Ok ( await _chinookSupervisor . UpdateAlbum ( input )); } [HttpDelete(\"{id}\")] public async Task < ActionResult > Delete ( int id ) { return Ok ( await _chinookSupervisor . DeleteAlbum ( id )); } }","title":"Developing the API Endpoints"},{"location":"Standing%20Up%20an%20ASP.NET%20Core%20Web%20API/ntier-api-endpoints/#developing-the-api-endpoints","text":"","title":"Developing the API endpoints"},{"location":"Standing%20Up%20an%20ASP.NET%20Core%20Web%20API/ntier-api-endpoints/#start-from-previous-modules-end","text":"Developing the API Data access","title":"START FROM PREVIOUS MODULE\"S END"},{"location":"Standing%20Up%20an%20ASP.NET%20Core%20Web%20API/ntier-api-endpoints/#add-apimodels-to-domain","text":"using System.Collections.Generic ; namespace ChinookASPNETWebAPI.Domain.ApiModels { public class AlbumApiModel { public int Id { get ; set ; } public string Title { get ; set ; } public int ArtistId { get ; set ; } public string ArtistName { get ; set ; } public ArtistApiModel Artist { get ; set ; } public IList < TrackApiModel > Tracks { get ; set ; } } }","title":"ADD APIMODELS TO DOMAIN"},{"location":"Standing%20Up%20an%20ASP.NET%20Core%20Web%20API/ntier-api-endpoints/#add-iconvertmodel-to-domain","text":"using System.Threading.Tasks ; namespace ChinookASPNETWebAPI.Domain.Converters { public interface IConvertModel < TSource , TTarget > { TTarget Convert (); } }","title":"ADD IConvertModel TO DOMAIN"},{"location":"Standing%20Up%20an%20ASP.NET%20Core%20Web%20API/ntier-api-endpoints/#add-convertextensions-to-domain","text":"using System.Collections.Generic ; using System.Linq ; using System.Threading.Tasks ; using ChinookASPNETWebAPI.Domain.Converters ; namespace ChinookASPNETWebAPI.Domain.Extensions { public static class ConvertExtensions { public static IEnumerable < TTarget > ConvertAll < TSource , TTarget >( this IEnumerable < IConvertModel < TSource , TTarget >> values ) => values . Select ( value => value . Convert ()); } }","title":"ADD ConvertExtensions TO DOMAIN"},{"location":"Standing%20Up%20an%20ASP.NET%20Core%20Web%20API/ntier-api-endpoints/#add-convert-code-apimodels-in-domain","text":"using System.Collections.Generic ; using System.Threading.Tasks ; using ChinookASPNETWebAPI.Domain.Converters ; using ChinookASPNETWebAPI.Domain.Entities ; namespace ChinookASPNETWebAPI.Domain.ApiModels { public class AlbumApiModel : IConvertModel < AlbumApiModel , Album > { public int Id { get ; set ; } public string Title { get ; set ; } public int ArtistId { get ; set ; } public string ArtistName { get ; set ; } public ArtistApiModel Artist { get ; set ; } public IList < TrackApiModel > Tracks { get ; set ; } public Album Convert () => new () { Id = Id , ArtistId = ArtistId , Title = Title ?? string . Empty }; } }","title":"ADD CONVERT CODE APIMODELS IN DOMAIN"},{"location":"Standing%20Up%20an%20ASP.NET%20Core%20Web%20API/ntier-api-endpoints/#add-convert-code-entities-in-domain","text":"using System.Collections.Generic ; using ChinookASPNETWebAPI.Domain.ApiModels ; using ChinookASPNETWebAPI.Domain.Converters ; # nullable disable namespace ChinookASPNETWebAPI.Domain.Entities { public partial class Album : IConvertModel < Album , AlbumApiModel > { public Album () { Tracks = new HashSet < Track >(); } public int Id { get ; set ; } public string Title { get ; set ; } public int ArtistId { get ; set ; } public virtual Artist Artist { get ; set ; } public virtual ICollection < Track > Tracks { get ; set ; } public AlbumApiModel Convert () => new () { Id = Id , ArtistId = ArtistId , Title = Title }; } }","title":"ADD CONVERT CODE ENTITIES IN DOMAIN"},{"location":"Standing%20Up%20an%20ASP.NET%20Core%20Web%20API/ntier-api-endpoints/#add-supervisor-to-domain","text":"Take a look at the code here for the logic of the Supervisor","title":"ADD SUPERVISOR TO DOMAIN"},{"location":"Standing%20Up%20an%20ASP.NET%20Core%20Web%20API/ntier-api-endpoints/#add-appsettings-to-api-project","text":"","title":"ADD APPSETTINGS TO  API PROJECT"},{"location":"Standing%20Up%20an%20ASP.NET%20Core%20Web%20API/ntier-api-endpoints/#appsettingsjson","text":"{ \"Logging\" : { \"LogLevel\" : { \"Default\" : \"Information\" , \"Microsoft\" : \"Warning\" , \"Microsoft.Hosting.Lifetime\" : \"Information\" } }, \"ConnectionStrings\" : { \"ChinookDbWindows\" : \"Server=.;Database=Chinook;Trusted_Connection=True;Application Name=ChinookASPNETCoreAPINTier\" , \"ChinookDbDocker\" : \"Server=localhost,1433;Database=Chinook;User=sa;Password=P@55w0rd;Trusted_Connection=False;Application Name=ChinookASPNETCoreAPINTier\" }, \"AllowedHosts\" : \"*\" }","title":"appsettings.json"},{"location":"Standing%20Up%20an%20ASP.NET%20Core%20Web%20API/ntier-api-endpoints/#appsettingscs","text":"namespace ChinookASPNETWebAPI.API.Configurations { public abstract class AppSettings { } }","title":"AppSettings.cs"},{"location":"Standing%20Up%20an%20ASP.NET%20Core%20Web%20API/ntier-api-endpoints/#configureappsettingscs","text":"using Microsoft.Extensions.Configuration ; using Microsoft.Extensions.DependencyInjection ; namespace ChinookASPNETWebAPI.API.Configurations { public static class ConfigureAppSettings { public static IServiceCollection AddAppSettings ( this IServiceCollection services , IConfiguration configuration ) { services . Configure < AppSettings >( _ => configuration . GetSection ( \"AppSettings\" ). Bind ( _ )); return services ; } } }","title":"ConfigureAppSettings.cs"},{"location":"Standing%20Up%20an%20ASP.NET%20Core%20Web%20API/ntier-api-endpoints/#add-servicesconfiguration-to-api-project","text":"public static class ServicesConfiguration { public static void ConfigureRepositories ( this IServiceCollection services ) { services . AddScoped < IAlbumRepository , AlbumRepository >() . AddScoped < IArtistRepository , ArtistRepository >() . AddScoped < ICustomerRepository , CustomerRepository >() . AddScoped < IEmployeeRepository , EmployeeRepository >() . AddScoped < IGenreRepository , GenreRepository >() . AddScoped < IInvoiceRepository , InvoiceRepository >() . AddScoped < IInvoiceLineRepository , InvoiceLineRepository >() . AddScoped < IMediaTypeRepository , MediaTypeRepository >() . AddScoped < IPlaylistRepository , PlaylistRepository >() . AddScoped < ITrackRepository , TrackRepository >(); } public static void ConfigureSupervisor ( this IServiceCollection services ) { services . AddScoped < IChinookSupervisor , ChinookSupervisor >(); } }","title":"ADD SERVICESCONFIGURATION TO API PROJECT"},{"location":"Standing%20Up%20an%20ASP.NET%20Core%20Web%20API/ntier-api-endpoints/#add-controllers-to-api","text":"","title":"ADD CONTROLLERS TO API"},{"location":"Standing%20Up%20an%20ASP.NET%20Core%20Web%20API/ntier-api-endpoints/#add-actions-to-controllers","text":"[Route(\"api/[controller] \")] [ApiController] public class AlbumController : ControllerBase { private readonly IChinookSupervisor _chinookSupervisor ; private readonly ILogger < AlbumController > _logger ; public AlbumController ( IChinookSupervisor chinookSupervisor , ILogger < AlbumController > logger ) { _chinookSupervisor = chinookSupervisor ; _logger = logger ; } [HttpGet] [Produces(typeof(List<AlbumApiModel>))] public async Task < ActionResult < List < AlbumApiModel >>> Get () { return Ok ( await _chinookSupervisor . GetAllAlbum ()); } [HttpGet(\"{id}\", Name = \"GetAlbumById\")] public async Task < ActionResult < AlbumApiModel >> Get ( int id ) { return Ok ( await _chinookSupervisor . GetAlbumById ( id )); } [HttpGet(\"artist/{id}\", Name = \"GetByArtistId\")] public async Task < ActionResult < List < AlbumApiModel >>> GetByArtistId ( int id ) { return Ok ( await _chinookSupervisor . GetAlbumByArtistId ( id )); } [HttpPost] [Produces(\"application/json\")] [Consumes(\"application/json\")] public async Task < ActionResult < AlbumApiModel >> Post ([ FromBody ] AlbumApiModel input ) { return Ok ( await _chinookSupervisor . AddAlbum ( input )); } [HttpPut(\"{id}\")] [Produces(\"application/json\")] [Consumes(\"application/json\")] public async Task < ActionResult < AlbumApiModel >> Put ( int id , [ FromBody ] AlbumApiModel input ) { return Ok ( await _chinookSupervisor . UpdateAlbum ( input )); } [HttpDelete(\"{id}\")] public async Task < ActionResult > Delete ( int id ) { return Ok ( await _chinookSupervisor . DeleteAlbum ( id )); } }","title":"ADD ACTIONS TO CONTROLLERS"},{"location":"Standing%20Up%20an%20ASP.NET%20Core%20Web%20API/ntier-data-access/","text":"Developing the API Data access \u00b6 START FROM PREVIOUS MODULE\"S END \u00b6 Designing the NTier API ADD PROJECT REFERENCE FOR API PROJECT \u00b6 ADD PROJECT REFERENCE FOR DATA PROJECT \u00b6 INSTALL OR UPDATE THR EF CORE CLI \u00b6 dotnet tool install --global dotnet-ef dotnet tool update --global dotnet-ef ADD NUGET PACKAGES TO DATA PROJECT \u00b6 dotnet add package Microsoft.EntityFrameworkCore.SqlServer dotnet add package Microsoft.EntityFrameworkCore.Design SCAFFOLD DBCONTEXT AND ENTITIES FROM CHINOOK DATABASE \u00b6 Run the following command in Developer Command Prompt dotnet ef dbcontext scaffold \"Server=.;Database=Chinook;Trusted_Connection=True;\" Microsoft.EntityFrameworkCore.SqlServer --context-dir Data --output-dir Entities MOVE ENTITIES IN DATA PROJECT TO DOMAIN \u00b6 Adjust the namespace for the Entities Add using reference in DBContext to Entities in Domain ADD REPOSITORY INTERFACES TO DOMAIN \u00b6 using System ; using System.Collections.Generic ; using System.Threading.Tasks ; using ChinookASPNETWebAPI.Domain.Entities ; namespace ChinookASPNETWebAPI.Domain.Repositories { public interface IAlbumRepository : IDisposable { Task < List < Album >> GetAll (); Task < Album > GetById ( int? id ); Task < List < Album >> GetByArtistId ( int id ); Task < Album > Add ( Album newAlbum ); Task < bool > Update ( Album album ); Task < bool > Delete ( int id ); } } ADD REPOSITORIES TO DATA \u00b6 using System.Collections.Generic ; using System.Linq ; using System.Threading.Tasks ; using ChinookASPNETWebAPI.Data.Data ; using ChinookASPNETWebAPI.Domain.Entities ; using ChinookASPNETWebAPI.Domain.Repositories ; using Microsoft.EntityFrameworkCore ; namespace ChinookASPNETWebAPI.Data.Repositories { public class AlbumRepository : IAlbumRepository { private readonly ChinookContext _context ; public AlbumRepository ( ChinookContext context ) { _context = context ; } private async Task < bool > AlbumExists ( int id ) => await _context . Albums . AnyAsync ( a => a . Id == id ); public void Dispose () => _context . Dispose (); public async Task < List < Album >> GetAll () => await _context . Albums . AsNoTrackingWithIdentityResolution (). ToListAsync (); public async Task < Album > GetById ( int? id ) { var dbAlbum = await _context . Albums . FindAsync ( id ); return dbAlbum ; } public async Task < Album > Add ( Album newAlbum ) { await _context . Albums . AddAsync ( newAlbum ); await _context . SaveChangesAsync (); return newAlbum ; } public async Task < bool > Update ( Album album ) { if (! await AlbumExists ( album . Id )) return false ; _context . Albums . Update ( album ); await _context . SaveChangesAsync (); return true ; } public async Task < bool > Delete ( int id ) { if (! await AlbumExists ( id )) return false ; var toRemove = await _context . Albums . FindAsync ( id ); _context . Albums . Remove ( toRemove ); await _context . SaveChangesAsync (); return true ; } public async Task < List < Album >> GetByArtistId ( int id ) => await _context . Albums . Where ( a => a . ArtistId == id ). AsNoTrackingWithIdentityResolution (). ToListAsync (); } } ADD DBCONTEXT TO DEPENDANCY INJECTION IN API PROJECT \u00b6 public static IServiceCollection AddConnectionProvider ( this IServiceCollection services , IConfiguration configuration ) { var connection = String . Empty ; if ( RuntimeInformation . IsOSPlatform ( OSPlatform . Windows )) { connection = configuration . GetConnectionString ( \"ChinookDbWindows\" ) ?? \"Server=.;Database=Chinook;Trusted_Connection=True;Application Name=ChinookASPNETCoreAPINTier\" ; } else if ( RuntimeInformation . IsOSPlatform ( OSPlatform . Linux ) || RuntimeInformation . IsOSPlatform ( OSPlatform . OSX )) { connection = configuration . GetConnectionString ( \"ChinookDbDocker\" ) ?? \"Server=localhost,1433;Database=Chinook;User=sa;Password=P@55w0rd;Trusted_Connection=False;Application Name=ChinookASPNETCoreAPINTier\" ; } services . AddDbContextPool < ChinookContext >( options => options . UseSqlServer ( connection )); return services ; } CALL ADDCONNECTIONPROVIDER() IN CONFIGURESERVICES IN API PROJECT'S StartUP \u00b6 services . AddConnectionProvider ( Configuration ); REMOVE ONCONFIGURING() FROM DBCONTEXT \u00b6 REMOVE THE DBCONTEXT CONSTRUCTOR W/O A PARAMETER \u00b6","title":"Developing Data Access for your Web API"},{"location":"Standing%20Up%20an%20ASP.NET%20Core%20Web%20API/ntier-data-access/#developing-the-api-data-access","text":"","title":"Developing the API Data access"},{"location":"Standing%20Up%20an%20ASP.NET%20Core%20Web%20API/ntier-data-access/#start-from-previous-modules-end","text":"Designing the NTier API","title":"START FROM PREVIOUS MODULE\"S END"},{"location":"Standing%20Up%20an%20ASP.NET%20Core%20Web%20API/ntier-data-access/#add-project-reference-for-api-project","text":"","title":"ADD PROJECT REFERENCE FOR API PROJECT"},{"location":"Standing%20Up%20an%20ASP.NET%20Core%20Web%20API/ntier-data-access/#add-project-reference-for-data-project","text":"","title":"ADD PROJECT REFERENCE FOR DATA PROJECT"},{"location":"Standing%20Up%20an%20ASP.NET%20Core%20Web%20API/ntier-data-access/#install-or-update-thr-ef-core-cli","text":"dotnet tool install --global dotnet-ef dotnet tool update --global dotnet-ef","title":"INSTALL OR UPDATE THR EF CORE CLI"},{"location":"Standing%20Up%20an%20ASP.NET%20Core%20Web%20API/ntier-data-access/#add-nuget-packages-to-data-project","text":"dotnet add package Microsoft.EntityFrameworkCore.SqlServer dotnet add package Microsoft.EntityFrameworkCore.Design","title":"ADD NUGET PACKAGES TO DATA PROJECT"},{"location":"Standing%20Up%20an%20ASP.NET%20Core%20Web%20API/ntier-data-access/#scaffold-dbcontext-and-entities-from-chinook-database","text":"Run the following command in Developer Command Prompt dotnet ef dbcontext scaffold \"Server=.;Database=Chinook;Trusted_Connection=True;\" Microsoft.EntityFrameworkCore.SqlServer --context-dir Data --output-dir Entities","title":"SCAFFOLD DBCONTEXT AND ENTITIES FROM CHINOOK DATABASE"},{"location":"Standing%20Up%20an%20ASP.NET%20Core%20Web%20API/ntier-data-access/#move-entities-in-data-project-to-domain","text":"Adjust the namespace for the Entities Add using reference in DBContext to Entities in Domain","title":"MOVE ENTITIES IN DATA PROJECT TO DOMAIN"},{"location":"Standing%20Up%20an%20ASP.NET%20Core%20Web%20API/ntier-data-access/#add-repository-interfaces-to-domain","text":"using System ; using System.Collections.Generic ; using System.Threading.Tasks ; using ChinookASPNETWebAPI.Domain.Entities ; namespace ChinookASPNETWebAPI.Domain.Repositories { public interface IAlbumRepository : IDisposable { Task < List < Album >> GetAll (); Task < Album > GetById ( int? id ); Task < List < Album >> GetByArtistId ( int id ); Task < Album > Add ( Album newAlbum ); Task < bool > Update ( Album album ); Task < bool > Delete ( int id ); } }","title":"ADD REPOSITORY INTERFACES TO DOMAIN"},{"location":"Standing%20Up%20an%20ASP.NET%20Core%20Web%20API/ntier-data-access/#add-repositories-to-data","text":"using System.Collections.Generic ; using System.Linq ; using System.Threading.Tasks ; using ChinookASPNETWebAPI.Data.Data ; using ChinookASPNETWebAPI.Domain.Entities ; using ChinookASPNETWebAPI.Domain.Repositories ; using Microsoft.EntityFrameworkCore ; namespace ChinookASPNETWebAPI.Data.Repositories { public class AlbumRepository : IAlbumRepository { private readonly ChinookContext _context ; public AlbumRepository ( ChinookContext context ) { _context = context ; } private async Task < bool > AlbumExists ( int id ) => await _context . Albums . AnyAsync ( a => a . Id == id ); public void Dispose () => _context . Dispose (); public async Task < List < Album >> GetAll () => await _context . Albums . AsNoTrackingWithIdentityResolution (). ToListAsync (); public async Task < Album > GetById ( int? id ) { var dbAlbum = await _context . Albums . FindAsync ( id ); return dbAlbum ; } public async Task < Album > Add ( Album newAlbum ) { await _context . Albums . AddAsync ( newAlbum ); await _context . SaveChangesAsync (); return newAlbum ; } public async Task < bool > Update ( Album album ) { if (! await AlbumExists ( album . Id )) return false ; _context . Albums . Update ( album ); await _context . SaveChangesAsync (); return true ; } public async Task < bool > Delete ( int id ) { if (! await AlbumExists ( id )) return false ; var toRemove = await _context . Albums . FindAsync ( id ); _context . Albums . Remove ( toRemove ); await _context . SaveChangesAsync (); return true ; } public async Task < List < Album >> GetByArtistId ( int id ) => await _context . Albums . Where ( a => a . ArtistId == id ). AsNoTrackingWithIdentityResolution (). ToListAsync (); } }","title":"ADD REPOSITORIES TO DATA"},{"location":"Standing%20Up%20an%20ASP.NET%20Core%20Web%20API/ntier-data-access/#add-dbcontext-to-dependancy-injection-in-api-project","text":"public static IServiceCollection AddConnectionProvider ( this IServiceCollection services , IConfiguration configuration ) { var connection = String . Empty ; if ( RuntimeInformation . IsOSPlatform ( OSPlatform . Windows )) { connection = configuration . GetConnectionString ( \"ChinookDbWindows\" ) ?? \"Server=.;Database=Chinook;Trusted_Connection=True;Application Name=ChinookASPNETCoreAPINTier\" ; } else if ( RuntimeInformation . IsOSPlatform ( OSPlatform . Linux ) || RuntimeInformation . IsOSPlatform ( OSPlatform . OSX )) { connection = configuration . GetConnectionString ( \"ChinookDbDocker\" ) ?? \"Server=localhost,1433;Database=Chinook;User=sa;Password=P@55w0rd;Trusted_Connection=False;Application Name=ChinookASPNETCoreAPINTier\" ; } services . AddDbContextPool < ChinookContext >( options => options . UseSqlServer ( connection )); return services ; }","title":"ADD DBCONTEXT TO DEPENDANCY INJECTION IN API PROJECT"},{"location":"Standing%20Up%20an%20ASP.NET%20Core%20Web%20API/ntier-data-access/#call-addconnectionprovider-in-configureservices-in-api-projects-startup","text":"services . AddConnectionProvider ( Configuration );","title":"CALL ADDCONNECTIONPROVIDER() IN CONFIGURESERVICES IN API PROJECT'S StartUP"},{"location":"Standing%20Up%20an%20ASP.NET%20Core%20Web%20API/ntier-data-access/#remove-onconfiguring-from-dbcontext","text":"","title":"REMOVE ONCONFIGURING() FROM DBCONTEXT"},{"location":"Standing%20Up%20an%20ASP.NET%20Core%20Web%20API/ntier-data-access/#remove-the-dbcontext-constructor-wo-a-parameter","text":"","title":"REMOVE THE DBCONTEXT CONSTRUCTOR W/O A PARAMETER"},{"location":"Standing%20Up%20an%20ASP.NET%20Core%20Web%20API/using-patch-request/","text":"Using the PATCH HTTP Request in your API \u00b6 START FROM PREVIOUS MODULE\"S END \u00b6 Formatting Response Data in your API ADD NEWTONSOFTJSON NUGET PACKAGES TO API PROJECT \u00b6 dotnet add package Microsoft.AspNetCore.Mvc.NewtonsoftJson ADD PATCH ACTION TO TRACK CONTROLLER \u00b6 [HttpPatch(\"{id}\")] public async Task < ActionResult < TrackApiModel >> Patch ( int id , [ FromBody ] JsonPatchDocument < TrackApiModel > input ) { var track = await _chinookSupervisor . GetTrackById ( id ); if ( track == null ) { return NotFound (); } input . ApplyTo ( track , ModelState ); // Must have Microsoft.AspNetCore.Mvc.NewtonsoftJson installed if (! ModelState . IsValid ) { return BadRequest ( ModelState ); } try { await _chinookSupervisor . UpdateTrack ( track ); //Update in the database } catch ( DbUpdateConcurrencyException ) { return NotFound (); } return Ok ( track ); } TEST PATCH ADD OPERATION \u00b6 For Id = 41 { \"value\" : \"Hand In My Pocket (Live)\" , \"path\" : \"/Name\" , \"op\" : \"add\" } TEST PATCH REMOVE OPERATION \u00b6 For Id = 41 { \"path\" : \"/Name\" , \"op\" : \"remove\" } TEST PATCH REPLACE OPERATION \u00b6 For Id = 41 { \"value\" : \"221599\" , \"path\" : \"/Milliseconds\" , \"op\" : \"replace\" }","title":"Using the PATCH HTTP Request in your API"},{"location":"Standing%20Up%20an%20ASP.NET%20Core%20Web%20API/using-patch-request/#using-the-patch-http-request-in-your-api","text":"","title":"Using the PATCH HTTP Request in your API"},{"location":"Standing%20Up%20an%20ASP.NET%20Core%20Web%20API/using-patch-request/#start-from-previous-modules-end","text":"Formatting Response Data in your API","title":"START FROM PREVIOUS MODULE\"S END"},{"location":"Standing%20Up%20an%20ASP.NET%20Core%20Web%20API/using-patch-request/#add-newtonsoftjson-nuget-packages-to-api-project","text":"dotnet add package Microsoft.AspNetCore.Mvc.NewtonsoftJson","title":"ADD NEWTONSOFTJSON NUGET PACKAGES TO API PROJECT"},{"location":"Standing%20Up%20an%20ASP.NET%20Core%20Web%20API/using-patch-request/#add-patch-action-to-track-controller","text":"[HttpPatch(\"{id}\")] public async Task < ActionResult < TrackApiModel >> Patch ( int id , [ FromBody ] JsonPatchDocument < TrackApiModel > input ) { var track = await _chinookSupervisor . GetTrackById ( id ); if ( track == null ) { return NotFound (); } input . ApplyTo ( track , ModelState ); // Must have Microsoft.AspNetCore.Mvc.NewtonsoftJson installed if (! ModelState . IsValid ) { return BadRequest ( ModelState ); } try { await _chinookSupervisor . UpdateTrack ( track ); //Update in the database } catch ( DbUpdateConcurrencyException ) { return NotFound (); } return Ok ( track ); }","title":"ADD PATCH ACTION TO TRACK CONTROLLER"},{"location":"Standing%20Up%20an%20ASP.NET%20Core%20Web%20API/using-patch-request/#test-patch-add-operation","text":"For Id = 41 { \"value\" : \"Hand In My Pocket (Live)\" , \"path\" : \"/Name\" , \"op\" : \"add\" }","title":"TEST PATCH ADD OPERATION"},{"location":"Standing%20Up%20an%20ASP.NET%20Core%20Web%20API/using-patch-request/#test-patch-remove-operation","text":"For Id = 41 { \"path\" : \"/Name\" , \"op\" : \"remove\" }","title":"TEST PATCH REMOVE OPERATION"},{"location":"Standing%20Up%20an%20ASP.NET%20Core%20Web%20API/using-patch-request/#test-patch-replace-operation","text":"For Id = 41 { \"value\" : \"221599\" , \"path\" : \"/Milliseconds\" , \"op\" : \"replace\" }","title":"TEST PATCH REPLACE OPERATION"},{"location":"Standing%20Up%20an%20ASP.NET%20Core%20Web%20API/versioning/","text":"Versioning your Web API \u00b6 START FROM PREVIOUS MODULE\"S END \u00b6 [Identity in your Web API]](identity.md) ADD VERSIONING NUGET PACKAGE TO API PROJECT \u00b6 dotnet add package Microsoft.AspNetCore.Mvc.Versioning ADD API VERSIONING TO STARTUP CONFIGURESERVICES IN API PROJECT \u00b6 services . AddApiVersioning (); ADD VERSIONING TO STARTUP IN API PROJECT \u00b6 ServicesConfiguration.cs \u00b6 services . AddApiVersioning ( options => { options . AssumeDefaultVersionWhenUnspecified = true ; options . DefaultApiVersion = new ApiVersion ( 1 , 0 ); //options.DefaultApiVersion = new ApiVersion( new DateTime( 2020, 9, 22 ) ); //options.DefaultApiVersion = // new ApiVersion(new DateTime( 2020, 9, 22 ), \"LetoII\", 1, \"Beta\"); options . ReportApiVersions = true ; //options.ApiVersionReader = new HeaderApiVersionReader(\"api-version\"); }); MODIFY CONTROLLER FOR VERSIONING IN API PROJECT \u00b6 [Route( \"api/v{version:apiVersion}/[controller] \" )] [ApiController] [EnableCors(\"CorsPolicy\")] [ApiVersion( \"1.0\", Deprecated = true)] public class CustomerController : ControllerBase TEST IN POSTMAN \u00b6 Version 1 Endpoint \u00b6 https://localhost:44320/api/v1/Customer Version 2 Endpoint \u00b6 https://localhost:44320/api/v2/Customer","title":"Versioning your Web API"},{"location":"Standing%20Up%20an%20ASP.NET%20Core%20Web%20API/versioning/#versioning-your-web-api","text":"","title":"Versioning your Web API"},{"location":"Standing%20Up%20an%20ASP.NET%20Core%20Web%20API/versioning/#start-from-previous-modules-end","text":"[Identity in your Web API]](identity.md)","title":"START FROM PREVIOUS MODULE\"S END"},{"location":"Standing%20Up%20an%20ASP.NET%20Core%20Web%20API/versioning/#add-versioning-nuget-package-to-api-project","text":"dotnet add package Microsoft.AspNetCore.Mvc.Versioning","title":"ADD VERSIONING NUGET PACKAGE TO API PROJECT"},{"location":"Standing%20Up%20an%20ASP.NET%20Core%20Web%20API/versioning/#add-api-versioning-to-startup-configureservices-in-api-project","text":"services . AddApiVersioning ();","title":"ADD API VERSIONING TO STARTUP CONFIGURESERVICES IN API PROJECT"},{"location":"Standing%20Up%20an%20ASP.NET%20Core%20Web%20API/versioning/#add-versioning-to-startup-in-api-project","text":"","title":"ADD VERSIONING TO STARTUP IN API PROJECT"},{"location":"Standing%20Up%20an%20ASP.NET%20Core%20Web%20API/versioning/#servicesconfigurationcs","text":"services . AddApiVersioning ( options => { options . AssumeDefaultVersionWhenUnspecified = true ; options . DefaultApiVersion = new ApiVersion ( 1 , 0 ); //options.DefaultApiVersion = new ApiVersion( new DateTime( 2020, 9, 22 ) ); //options.DefaultApiVersion = // new ApiVersion(new DateTime( 2020, 9, 22 ), \"LetoII\", 1, \"Beta\"); options . ReportApiVersions = true ; //options.ApiVersionReader = new HeaderApiVersionReader(\"api-version\"); });","title":"ServicesConfiguration.cs"},{"location":"Standing%20Up%20an%20ASP.NET%20Core%20Web%20API/versioning/#modify-controller-for-versioning-in-api-project","text":"[Route( \"api/v{version:apiVersion}/[controller] \" )] [ApiController] [EnableCors(\"CorsPolicy\")] [ApiVersion( \"1.0\", Deprecated = true)] public class CustomerController : ControllerBase","title":"MODIFY CONTROLLER FOR VERSIONING IN API PROJECT"},{"location":"Standing%20Up%20an%20ASP.NET%20Core%20Web%20API/versioning/#test-in-postman","text":"","title":"TEST IN POSTMAN"},{"location":"Standing%20Up%20an%20ASP.NET%20Core%20Web%20API/versioning/#version-1-endpoint","text":"https://localhost:44320/api/v1/Customer","title":"Version 1 Endpoint"},{"location":"Standing%20Up%20an%20ASP.NET%20Core%20Web%20API/versioning/#version-2-endpoint","text":"https://localhost:44320/api/v2/Customer","title":"Version 2 Endpoint"},{"location":"Standing%20Up%20an%20ASP.NET%20Core%20Web%20API/what-is-a-web-api/","text":"What is a Web API? \u00b6","title":"What is a Web API?"},{"location":"Standing%20Up%20an%20ASP.NET%20Core%20Web%20API/what-is-a-web-api/#what-is-a-web-api","text":"","title":"What is a Web API?"},{"location":"Standing%20Up%20an%20ASP.NET%20Core%20Web%20API/what-is-rest/","text":"What is REST? \u00b6","title":"What is REST?"},{"location":"Standing%20Up%20an%20ASP.NET%20Core%20Web%20API/what-is-rest/#what-is-rest","text":"","title":"What is REST?"},{"location":"Standing%20Up%20an%20ASP.NET%20Core%20Web%20API/your-first-aspnet-core-web-api/","text":"Your First ASP.NET 5 Web API \u00b6 Create a new ASP.NET Core Web API solution and project \u00b6 Configure the Solution and API Project for Workshop \u00b6 Solution name is ChinookASPNETWebAPI Project name is ChinookASPNETWebAPI.API Set Details for the Solution and API Project \u00b6 Target Framework is .NET 5.0 Authentication Type is None Set Configure for HTTPS to True Set Enable Docker to False Set Enable OpenAPI support to False A View of the Solution and API Project \u00b6 Results when you run the API Project \u00b6 Note -- I use a JSON Formatter in Chrome to make the Results look good. Delete the Existing Files in API Project \u00b6 Delete the following files in API project: * WeatherForcastController.cs * WeatherForcast.cs","title":"Your first ASP.NET Core Web API"},{"location":"Standing%20Up%20an%20ASP.NET%20Core%20Web%20API/your-first-aspnet-core-web-api/#your-first-aspnet-5-web-api","text":"","title":"Your First ASP.NET 5 Web API"},{"location":"Standing%20Up%20an%20ASP.NET%20Core%20Web%20API/your-first-aspnet-core-web-api/#create-a-new-aspnet-core-web-api-solution-and-project","text":"","title":"Create a new ASP.NET Core Web API solution and project"},{"location":"Standing%20Up%20an%20ASP.NET%20Core%20Web%20API/your-first-aspnet-core-web-api/#configure-the-solution-and-api-project-for-workshop","text":"Solution name is ChinookASPNETWebAPI Project name is ChinookASPNETWebAPI.API","title":"Configure the Solution and API Project for Workshop"},{"location":"Standing%20Up%20an%20ASP.NET%20Core%20Web%20API/your-first-aspnet-core-web-api/#set-details-for-the-solution-and-api-project","text":"Target Framework is .NET 5.0 Authentication Type is None Set Configure for HTTPS to True Set Enable Docker to False Set Enable OpenAPI support to False","title":"Set Details for the Solution and API Project"},{"location":"Standing%20Up%20an%20ASP.NET%20Core%20Web%20API/your-first-aspnet-core-web-api/#a-view-of-the-solution-and-api-project","text":"","title":"A View of the Solution and API Project"},{"location":"Standing%20Up%20an%20ASP.NET%20Core%20Web%20API/your-first-aspnet-core-web-api/#results-when-you-run-the-api-project","text":"Note -- I use a JSON Formatter in Chrome to make the Results look good.","title":"Results when you run the API Project"},{"location":"Standing%20Up%20an%20ASP.NET%20Core%20Web%20API/your-first-aspnet-core-web-api/#delete-the-existing-files-in-api-project","text":"Delete the following files in API project: * WeatherForcastController.cs * WeatherForcast.cs","title":"Delete the Existing Files in API Project"},{"location":"Testing%20Your%20AP/httprepl-testing/","text":"","title":"Test your APIs with the HttpRepl"},{"location":"Testing%20Your%20AP/integration-testing/","text":"Creating and using Integrating Testing for your API \u00b6","title":"Creating and using Integrating Testing for your API"},{"location":"Testing%20Your%20AP/integration-testing/#creating-and-using-integrating-testing-for-your-api","text":"","title":"Creating and using Integrating Testing for your API"},{"location":"Testing%20Your%20AP/testing-with-httprepl/","text":"Testing your API with HttpRepl \u00b6","title":"Testing your API with HttpRepl"},{"location":"Testing%20Your%20AP/testing-with-httprepl/#testing-your-api-with-httprepl","text":"","title":"Testing your API with HttpRepl"},{"location":"Testing%20Your%20AP/unit-testing/","text":"Creating and using Unit Testing for your API \u00b6","title":"Creating and using Unit Testing for your API"},{"location":"Testing%20Your%20AP/unit-testing/#creating-and-using-unit-testing-for-your-api","text":"","title":"Creating and using Unit Testing for your API"}]}