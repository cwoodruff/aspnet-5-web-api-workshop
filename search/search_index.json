{"config":{"indexing":"full","lang":["en"],"min_search_length":3,"prebuild_index":false,"separator":"[\\s\\-]+"},"docs":[{"location":"","text":"Workshop Home \u00b6 For the source code for the workshop visit the ASP.NET 5 Web API Workshop GitHub repo. Interested in learning about designing, architecting and developing Web APIs using ASP.NET 5? Sign up for the VSLive! 2-Day Hands-On Training Seminar at Learn to Produce Effective Web APIs with ASP.NET 5 Workshop","title":"Home"},{"location":"#workshop-home","text":"For the source code for the workshop visit the ASP.NET 5 Web API Workshop GitHub repo. Interested in learning about designing, architecting and developing Web APIs using ASP.NET 5? Sign up for the VSLive! 2-Day Hands-On Training Seminar at Learn to Produce Effective Web APIs with ASP.NET 5 Workshop","title":"Workshop Home"},{"location":"about/","text":"About the Workshop \u00b6","title":"About"},{"location":"about/#about-the-workshop","text":"","title":"About the Workshop"},{"location":"installing-aspnet-5/","text":"Installing .NET 5 and ASP.NET 5 \u00b6 This page will instruct you how to download and install the .NET 5 SDK that includes ASP.NET 5 Web API. First, download the .NET SDK on your computer. Installing the SDK for .NET 5 \u00b6 Next install the .NET SDK on your computer. Next, open a terminal such as PowerShell , Command Prompt , or bash . Enter the following dotnet commands to verify that .NET 5 has been installed: dotnet --version You see the following output: 5.0.4 Congratulations! You're ready to create your first ASP.NET Web API. Next steps \u00b6 If you need some introduction to developing .NET applications, you can following the step-by-step tutorial or by watching .NET 101 videos on YouTube.","title":"Installing ASP.NET 5"},{"location":"installing-aspnet-5/#installing-net-5-and-aspnet-5","text":"This page will instruct you how to download and install the .NET 5 SDK that includes ASP.NET 5 Web API. First, download the .NET SDK on your computer.","title":"Installing .NET 5 and ASP.NET 5"},{"location":"installing-aspnet-5/#installing-the-sdk-for-net-5","text":"Next install the .NET SDK on your computer. Next, open a terminal such as PowerShell , Command Prompt , or bash . Enter the following dotnet commands to verify that .NET 5 has been installed: dotnet --version You see the following output: 5.0.4 Congratulations! You're ready to create your first ASP.NET Web API.","title":"Installing the SDK for .NET 5"},{"location":"installing-aspnet-5/#next-steps","text":"If you need some introduction to developing .NET applications, you can following the step-by-step tutorial or by watching .NET 101 videos on YouTube.","title":"Next steps"},{"location":"installing-mssql/","text":"Installing and Setting Up SQL Server 2019 \u00b6 Go to the Try SQL Server 2019 page and download the Developer version. Install locally. Creating the Chinook in MSSQL 2019 \u00b6 Get the Chinook database for this workshop in the GitHub repo. The file is a BAK backup so we will restore it to where you have MSSQL 2019 installed. It contains all data for the workshop and will be the starting point for the learning. Use SQL Server Management Studio to restore the database.","title":"Installing SQL Server"},{"location":"installing-mssql/#installing-and-setting-up-sql-server-2019","text":"Go to the Try SQL Server 2019 page and download the Developer version. Install locally.","title":"Installing and Setting Up SQL Server 2019"},{"location":"installing-mssql/#creating-the-chinook-in-mssql-2019","text":"Get the Chinook database for this workshop in the GitHub repo. The file is a BAK backup so we will restore it to where you have MSSQL 2019 installed. It contains all data for the workshop and will be the starting point for the learning. Use SQL Server Management Studio to restore the database.","title":"Creating the Chinook in MSSQL 2019"},{"location":"installing-postman/","text":"Installing and Setting Up Postman \u00b6 Download and install Postman for labs.","title":"Installing Postman"},{"location":"installing-postman/#installing-and-setting-up-postman","text":"Download and install Postman for labs.","title":"Installing and Setting Up Postman"},{"location":"introduction/","text":"Introduction to the Workshop \u00b6","title":"Introduction"},{"location":"introduction/#introduction-to-the-workshop","text":"","title":"Introduction to the Workshop"},{"location":"required-tech/","text":"Required Technologies for the Workshop \u00b6 Tech Where to download .NET 5 Download SQL Server Download Azure Account (optional) Create Account Postman Download","title":"Required Technology"},{"location":"required-tech/#required-technologies-for-the-workshop","text":"Tech Where to download .NET 5 Download SQL Server Download Azure Account (optional) Create Account Postman Download","title":"Required Technologies for the Workshop"},{"location":"setting-up-azure-sql/","text":"Creating and Setting up Your Azure Account for Azure SQL \u00b6","title":"Setting up Azure SQL"},{"location":"setting-up-azure-sql/#creating-and-setting-up-your-azure-account-for-azure-sql","text":"","title":"Creating and Setting up Your Azure Account for Azure SQL"},{"location":"Standing%20Up%20an%20ASP.NET%20Core%20Web%20API/api-business-rules/","text":"Developing the Web API Business Rules \u00b6 ADD CROSS ORIGIN RESOURCE SHARING (CORS) TO API PROJECT \u00b6 ADD ADDCORS() TO SERVICESCONFIGURATION.CS \u00b6 public static void AddCORS ( this IServiceCollection services ) { services . AddCors ( options => { options . AddPolicy ( \"CorsPolicy\" , builder => builder . AllowAnyOrigin () . AllowAnyMethod () . AllowAnyHeader ()); }); } UPDATE STARTUP.CS public void ConfigureServices ( IServiceCollection services ) { services . AddConnectionProvider ( Configuration ); services . AddAppSettings ( Configuration ); services . ConfigureRepositories (); services . ConfigureSupervisor (); services . ConfigureValidators (); services . AddAPILogging (); services . AddCORS (); services . AddHealthChecks (); services . AddControllers (); } // This method gets called by the runtime. Use this method to configure the HTTP request pipeline. public void Configure ( IApplicationBuilder app , IWebHostEnvironment env ) { if ( env . IsDevelopment ()) { app . UseDeveloperExceptionPage (); } app . UseHttpsRedirection (); app . UseRouting (); app . UseCors (); app . UseAuthorization (); app . UseEndpoints ( endpoints => { endpoints . MapControllers (); }); } ADD FLUENTVALIDATION NUGET TO API AND DOMAIN PROJECTS \u00b6 dotnet add package FluentValidation ADD VALIDATORS TO DOMAIN PROJECT \u00b6 using ChinookASPNETWebAPI.Domain.ApiModels ; using FluentValidation ; namespace ChinookASPNETWebAPI.Domain.Validation { public class AlbumValidator : AbstractValidator < AlbumApiModel > { public AlbumValidator () { RuleFor ( a => a . Title ). NotNull (); RuleFor ( a => a . Title ). MinimumLength ( 3 ); RuleFor ( a => a . Title ). MaximumLength ( 160 ); RuleFor ( a => a . ArtistId ). NotNull (); } } } ADD CODE TO CALL VALIDATION IN SUPERVISOR \u00b6 public async Task < AlbumApiModel > AddAlbum ( AlbumApiModel newAlbumApiModel ) { await _albumValidator . ValidateAndThrowAsync ( newAlbumApiModel ); var album = newAlbumApiModel . Convert (); album = await _albumRepository . Add ( album ); newAlbumApiModel . Id = album . Id ; return newAlbumApiModel ; } public async Task < bool > UpdateAlbum ( AlbumApiModel albumApiModel ) { await _albumValidator . ValidateAndThrowAsync ( albumApiModel ); var album = await _albumRepository . GetById ( albumApiModel . Id ); if ( album is null ) return false ; album . Id = albumApiModel . Id ; album . Title = albumApiModel . Title ; album . ArtistId = albumApiModel . ArtistId ; return await _albumRepository . Update ( album ); } ADD ERROR HANDLING IN ACTIONS \u00b6 [Route(\"api/[controller] \")] [ApiController] [EnableCors(\"CorsPolicy\")] public class AlbumController : ControllerBase { private readonly IChinookSupervisor _chinookSupervisor ; private readonly ILogger < AlbumController > _logger ; public AlbumController ( IChinookSupervisor chinookSupervisor , ILogger < AlbumController > logger ) { _chinookSupervisor = chinookSupervisor ; _logger = logger ; } [HttpGet] [Produces(typeof(List<AlbumApiModel>))] public async Task < ActionResult < List < AlbumApiModel >>> Get () { try { var albums = await _chinookSupervisor . GetAllAlbum (); if ( albums . Any ()) { return Ok ( albums ); } else { return StatusCode (( int ) HttpStatusCode . NotFound , \"No Albums Could Be Found\" ); } } catch ( Exception ex ) { _logger . LogError ( $ \"Something went wrong inside the AlbumController Get action: {ex}\" ); return StatusCode (( int ) HttpStatusCode . InternalServerError , \"Error occurred while executing Get All Albums\" ); } } [HttpGet(\"{id}\", Name = \"GetAlbumById\")] public async Task < ActionResult < AlbumApiModel >> Get ( int id ) { try { var album = await _chinookSupervisor . GetAlbumById ( id ); if ( album != null ) { return Ok ( album ); } else { return StatusCode (( int ) HttpStatusCode . NotFound , \"Album Not Found\" ); } } catch ( Exception ex ) { _logger . LogError ( $ \"Something went wrong inside the AlbumController GetById action: {ex}\" ); return StatusCode (( int ) HttpStatusCode . InternalServerError , \"Error occurred while executing Get Album By Id\" ); } } [HttpPost] [Produces(\"application/json\")] [Consumes(\"application/json\")] public async Task < ActionResult < AlbumApiModel >> Post ([ FromBody ] AlbumApiModel input ) { try { if ( input == null ) { return StatusCode (( int ) HttpStatusCode . BadRequest , \"Given Album is null\" ); } else { return Ok ( await _chinookSupervisor . AddAlbum ( input )); } } catch ( ValidationException ex ) { _logger . LogError ( $ \"Something went wrong inside the AlbumController Add Album action: {ex}\" ); return StatusCode (( int ) HttpStatusCode . InternalServerError , \"Error occurred while executing Add Albums\" ); } catch ( Exception ex ) { _logger . LogError ( $ \"Something went wrong inside the AlbumController Add Album action: {ex}\" ); return StatusCode (( int ) HttpStatusCode . InternalServerError , \"Error occurred while executing Add Albums\" ); } } [HttpPut(\"{id}\")] [Produces(\"application/json\")] [Consumes(\"application/json\")] public async Task < ActionResult < AlbumApiModel >> Put ( int id , [ FromBody ] AlbumApiModel input ) { try { if ( input == null ) { return StatusCode (( int ) HttpStatusCode . BadRequest , \"Given Album is null\" ); } else { return Ok ( await _chinookSupervisor . UpdateAlbum ( input )); } } catch ( ValidationException ex ) { _logger . LogError ( $ \"Something went wrong inside the AlbumController Update Album action: {ex}\" ); return StatusCode (( int ) HttpStatusCode . InternalServerError , \"Error occurred while executing Update Albums\" ); } catch ( Exception ex ) { _logger . LogError ( $ \"Something went wrong inside the AlbumController Update Album action: {ex}\" ); return StatusCode (( int ) HttpStatusCode . InternalServerError , \"Error occurred while executing Update Albums\" ); } } [HttpDelete(\"{id}\")] public async Task < ActionResult > Delete ( int id ) { try { return Ok ( await _chinookSupervisor . DeleteAlbum ( id )); } catch ( Exception ex ) { _logger . LogError ( $ \"Something went wrong inside the AlbumController Delete action: {ex}\" ); return StatusCode (( int ) HttpStatusCode . InternalServerError , \"Error occurred while executing Delete Album\" ); } } [HttpGet(\"artist/{id}\")] public async Task < ActionResult < List < AlbumApiModel >>> GetByArtistId ( int id ) { try { var albums = await _chinookSupervisor . GetAlbumByArtistId ( id ); if ( albums . Any ()) { return Ok ( albums ); } else { return StatusCode (( int ) HttpStatusCode . NotFound , \"No Albums Could Be Found for the Artist\" ); } } catch ( Exception ex ) { _logger . LogError ( $ \"Something went wrong inside the AlbumController Get By Artist action: {ex}\" ); return StatusCode (( int ) HttpStatusCode . InternalServerError , \"Error occurred while executing Get All Albums for Artist\" ); } } }","title":"Developing the API Business Rules"},{"location":"Standing%20Up%20an%20ASP.NET%20Core%20Web%20API/api-business-rules/#developing-the-web-api-business-rules","text":"","title":"Developing the Web API Business Rules"},{"location":"Standing%20Up%20an%20ASP.NET%20Core%20Web%20API/api-business-rules/#add-cross-origin-resource-sharing-cors-to-api-project","text":"","title":"ADD CROSS ORIGIN RESOURCE SHARING (CORS) TO API PROJECT"},{"location":"Standing%20Up%20an%20ASP.NET%20Core%20Web%20API/api-business-rules/#add-addcors-to-servicesconfigurationcs","text":"public static void AddCORS ( this IServiceCollection services ) { services . AddCors ( options => { options . AddPolicy ( \"CorsPolicy\" , builder => builder . AllowAnyOrigin () . AllowAnyMethod () . AllowAnyHeader ()); }); } UPDATE STARTUP.CS public void ConfigureServices ( IServiceCollection services ) { services . AddConnectionProvider ( Configuration ); services . AddAppSettings ( Configuration ); services . ConfigureRepositories (); services . ConfigureSupervisor (); services . ConfigureValidators (); services . AddAPILogging (); services . AddCORS (); services . AddHealthChecks (); services . AddControllers (); } // This method gets called by the runtime. Use this method to configure the HTTP request pipeline. public void Configure ( IApplicationBuilder app , IWebHostEnvironment env ) { if ( env . IsDevelopment ()) { app . UseDeveloperExceptionPage (); } app . UseHttpsRedirection (); app . UseRouting (); app . UseCors (); app . UseAuthorization (); app . UseEndpoints ( endpoints => { endpoints . MapControllers (); }); }","title":"ADD ADDCORS() TO SERVICESCONFIGURATION.CS"},{"location":"Standing%20Up%20an%20ASP.NET%20Core%20Web%20API/api-business-rules/#add-fluentvalidation-nuget-to-api-and-domain-projects","text":"dotnet add package FluentValidation","title":"ADD FLUENTVALIDATION NUGET TO API AND DOMAIN PROJECTS"},{"location":"Standing%20Up%20an%20ASP.NET%20Core%20Web%20API/api-business-rules/#add-validators-to-domain-project","text":"using ChinookASPNETWebAPI.Domain.ApiModels ; using FluentValidation ; namespace ChinookASPNETWebAPI.Domain.Validation { public class AlbumValidator : AbstractValidator < AlbumApiModel > { public AlbumValidator () { RuleFor ( a => a . Title ). NotNull (); RuleFor ( a => a . Title ). MinimumLength ( 3 ); RuleFor ( a => a . Title ). MaximumLength ( 160 ); RuleFor ( a => a . ArtistId ). NotNull (); } } }","title":"ADD VALIDATORS TO DOMAIN PROJECT"},{"location":"Standing%20Up%20an%20ASP.NET%20Core%20Web%20API/api-business-rules/#add-code-to-call-validation-in-supervisor","text":"public async Task < AlbumApiModel > AddAlbum ( AlbumApiModel newAlbumApiModel ) { await _albumValidator . ValidateAndThrowAsync ( newAlbumApiModel ); var album = newAlbumApiModel . Convert (); album = await _albumRepository . Add ( album ); newAlbumApiModel . Id = album . Id ; return newAlbumApiModel ; } public async Task < bool > UpdateAlbum ( AlbumApiModel albumApiModel ) { await _albumValidator . ValidateAndThrowAsync ( albumApiModel ); var album = await _albumRepository . GetById ( albumApiModel . Id ); if ( album is null ) return false ; album . Id = albumApiModel . Id ; album . Title = albumApiModel . Title ; album . ArtistId = albumApiModel . ArtistId ; return await _albumRepository . Update ( album ); }","title":"ADD CODE TO CALL VALIDATION IN SUPERVISOR"},{"location":"Standing%20Up%20an%20ASP.NET%20Core%20Web%20API/api-business-rules/#add-error-handling-in-actions","text":"[Route(\"api/[controller] \")] [ApiController] [EnableCors(\"CorsPolicy\")] public class AlbumController : ControllerBase { private readonly IChinookSupervisor _chinookSupervisor ; private readonly ILogger < AlbumController > _logger ; public AlbumController ( IChinookSupervisor chinookSupervisor , ILogger < AlbumController > logger ) { _chinookSupervisor = chinookSupervisor ; _logger = logger ; } [HttpGet] [Produces(typeof(List<AlbumApiModel>))] public async Task < ActionResult < List < AlbumApiModel >>> Get () { try { var albums = await _chinookSupervisor . GetAllAlbum (); if ( albums . Any ()) { return Ok ( albums ); } else { return StatusCode (( int ) HttpStatusCode . NotFound , \"No Albums Could Be Found\" ); } } catch ( Exception ex ) { _logger . LogError ( $ \"Something went wrong inside the AlbumController Get action: {ex}\" ); return StatusCode (( int ) HttpStatusCode . InternalServerError , \"Error occurred while executing Get All Albums\" ); } } [HttpGet(\"{id}\", Name = \"GetAlbumById\")] public async Task < ActionResult < AlbumApiModel >> Get ( int id ) { try { var album = await _chinookSupervisor . GetAlbumById ( id ); if ( album != null ) { return Ok ( album ); } else { return StatusCode (( int ) HttpStatusCode . NotFound , \"Album Not Found\" ); } } catch ( Exception ex ) { _logger . LogError ( $ \"Something went wrong inside the AlbumController GetById action: {ex}\" ); return StatusCode (( int ) HttpStatusCode . InternalServerError , \"Error occurred while executing Get Album By Id\" ); } } [HttpPost] [Produces(\"application/json\")] [Consumes(\"application/json\")] public async Task < ActionResult < AlbumApiModel >> Post ([ FromBody ] AlbumApiModel input ) { try { if ( input == null ) { return StatusCode (( int ) HttpStatusCode . BadRequest , \"Given Album is null\" ); } else { return Ok ( await _chinookSupervisor . AddAlbum ( input )); } } catch ( ValidationException ex ) { _logger . LogError ( $ \"Something went wrong inside the AlbumController Add Album action: {ex}\" ); return StatusCode (( int ) HttpStatusCode . InternalServerError , \"Error occurred while executing Add Albums\" ); } catch ( Exception ex ) { _logger . LogError ( $ \"Something went wrong inside the AlbumController Add Album action: {ex}\" ); return StatusCode (( int ) HttpStatusCode . InternalServerError , \"Error occurred while executing Add Albums\" ); } } [HttpPut(\"{id}\")] [Produces(\"application/json\")] [Consumes(\"application/json\")] public async Task < ActionResult < AlbumApiModel >> Put ( int id , [ FromBody ] AlbumApiModel input ) { try { if ( input == null ) { return StatusCode (( int ) HttpStatusCode . BadRequest , \"Given Album is null\" ); } else { return Ok ( await _chinookSupervisor . UpdateAlbum ( input )); } } catch ( ValidationException ex ) { _logger . LogError ( $ \"Something went wrong inside the AlbumController Update Album action: {ex}\" ); return StatusCode (( int ) HttpStatusCode . InternalServerError , \"Error occurred while executing Update Albums\" ); } catch ( Exception ex ) { _logger . LogError ( $ \"Something went wrong inside the AlbumController Update Album action: {ex}\" ); return StatusCode (( int ) HttpStatusCode . InternalServerError , \"Error occurred while executing Update Albums\" ); } } [HttpDelete(\"{id}\")] public async Task < ActionResult > Delete ( int id ) { try { return Ok ( await _chinookSupervisor . DeleteAlbum ( id )); } catch ( Exception ex ) { _logger . LogError ( $ \"Something went wrong inside the AlbumController Delete action: {ex}\" ); return StatusCode (( int ) HttpStatusCode . InternalServerError , \"Error occurred while executing Delete Album\" ); } } [HttpGet(\"artist/{id}\")] public async Task < ActionResult < List < AlbumApiModel >>> GetByArtistId ( int id ) { try { var albums = await _chinookSupervisor . GetAlbumByArtistId ( id ); if ( albums . Any ()) { return Ok ( albums ); } else { return StatusCode (( int ) HttpStatusCode . NotFound , \"No Albums Could Be Found for the Artist\" ); } } catch ( Exception ex ) { _logger . LogError ( $ \"Something went wrong inside the AlbumController Get By Artist action: {ex}\" ); return StatusCode (( int ) HttpStatusCode . InternalServerError , \"Error occurred while executing Get All Albums for Artist\" ); } } }","title":"ADD ERROR HANDLING IN ACTIONS"},{"location":"Standing%20Up%20an%20ASP.NET%20Core%20Web%20API/caching-data/","text":"Caching Data in Your API \u00b6 RESPONSE CACHING \u00b6 ADD RESPONSE CACHING TO ADDCACHING() IN SERVICESCONFIGURATION.CS \u00b6 public static void AddCaching ( this IServiceCollection services , IConfiguration configuration ) { services . AddResponseCaching (); } ADD TO CONFIGURE() IN STARTUP.CS \u00b6 **** Note: needs to go after CORS** public void Configure ( IApplicationBuilder app , IWebHostEnvironment env ) { if ( env . IsDevelopment ()) { app . UseDeveloperExceptionPage (); } app . UseHttpsRedirection (); app . UseRouting (); app . UseCors ( \"CorsPolicy\" ); app . UseResponseCaching (); app . UseAuthorization (); app . UseEndpoints ( endpoints => { endpoints . MapControllers (); }); } ADD TO CONTROLLERS OR ACTIONS \u00b6 [Route(\"api/[controller] \")] [ApiController] [EnableCors(\"CorsPolicy\")] [ResponseCache(Duration = 604800)] public class GenreController : ControllerBase Note: 604800 is seconds and equals a week What is seen in the Response Header \u00b6 Response Header: Cache-Control: public,max-age=604800 Test in Postman and web browser to see how the API Consumer behaves. IN-MEMORY CACHING \u00b6 Install Microsoft.Extensions.Caching.Abstractions NuGet package to Domain \u00b6 dotnet add package Microsoft.Extensions.Caching.Abstractions ADD IN-MEMORY CACHING TO ADDCACHING() IN SERVICESCONFIGURATION.CS \u00b6 public static void AddCaching ( this IServiceCollection services , IConfiguration configuration ) { services . AddResponseCaching (); services . AddMemoryCache (); } ADD MEMORYCACHE TO SUPERVISOR AND GET FROM DI \u00b6 ChinookSupervisor.cs \u00b6 public partial class ChinookSupervisor : IChinookSupervisor { private readonly IAlbumRepository _albumRepository ; private readonly IArtistRepository _artistRepository ; private readonly ICustomerRepository _customerRepository ; private readonly IEmployeeRepository _employeeRepository ; private readonly IGenreRepository _genreRepository ; private readonly IInvoiceLineRepository _invoiceLineRepository ; private readonly IInvoiceRepository _invoiceRepository ; private readonly IMediaTypeRepository _mediaTypeRepository ; private readonly IPlaylistRepository _playlistRepository ; private readonly ITrackRepository _trackRepository ; private readonly IValidator < AlbumApiModel > _albumValidator ; private readonly IValidator < ArtistApiModel > _artistValidator ; private readonly IValidator < CustomerApiModel > _customerValidator ; private readonly IValidator < EmployeeApiModel > _employeeValidator ; private readonly IValidator < GenreApiModel > _genreValidator ; private readonly IValidator < InvoiceApiModel > _invoiceValidator ; private readonly IValidator < InvoiceLineApiModel > _invoiceLineValidator ; private readonly IValidator < MediaTypeApiModel > _mediaTypeValidator ; private readonly IValidator < PlaylistApiModel > _playlistValidator ; private readonly IValidator < TrackApiModel > _trackValidator ; private readonly IMemoryCache _cache ; public ChinookSupervisor ( IAlbumRepository albumRepository , IArtistRepository artistRepository , ICustomerRepository customerRepository , IEmployeeRepository employeeRepository , IGenreRepository genreRepository , IInvoiceLineRepository invoiceLineRepository , IInvoiceRepository invoiceRepository , IMediaTypeRepository mediaTypeRepository , IPlaylistRepository playlistRepository , ITrackRepository trackRepository , IValidator < AlbumApiModel > albumValidator , IValidator < ArtistApiModel > artistValidator , IValidator < CustomerApiModel > customerValidator , IValidator < EmployeeApiModel > employeeValidator , IValidator < GenreApiModel > genreValidator , IValidator < InvoiceApiModel > invoiceValidator , IValidator < InvoiceLineApiModel > invoiceLineValidator , IValidator < MediaTypeApiModel > mediaTypeValidator , IValidator < PlaylistApiModel > playlistValidator , IValidator < TrackApiModel > trackValidator , IMemoryCache memoryCache ) { _albumRepository = albumRepository ; _artistRepository = artistRepository ; _customerRepository = customerRepository ; _employeeRepository = employeeRepository ; _genreRepository = genreRepository ; _invoiceLineRepository = invoiceLineRepository ; _invoiceRepository = invoiceRepository ; _mediaTypeRepository = mediaTypeRepository ; _playlistRepository = playlistRepository ; _trackRepository = trackRepository ; _albumValidator = albumValidator ; _artistValidator = artistValidator ; _customerValidator = customerValidator ; _employeeValidator = employeeValidator ; _genreValidator = genreValidator ; _invoiceValidator = invoiceValidator ; _invoiceLineValidator = invoiceLineValidator ; _mediaTypeValidator = mediaTypeValidator ; _playlistValidator = playlistValidator ; _trackValidator = trackValidator ; _cache = memoryCache ; } } ADD CODE TO SUPERVISOR FOR EACH ENTITY TYPE NEEDED \u00b6 ChinookSupervisorAlbum.cs \u00b6 public async Task < IEnumerable < AlbumApiModel >> GetAllAlbum () { List < Album > albums = await _albumRepository . GetAll (); var albumApiModels = albums . ConvertAll (); foreach ( var album in albumApiModels ) { var cacheEntryOptions = new MemoryCacheEntryOptions (). SetSlidingExpiration ( TimeSpan . FromSeconds ( 604800 )) . AbsoluteExpirationRelativeToNow = TimeSpan . FromSeconds ( 604800 );; _cache . Set ( string . Concat ( \"Album-\" , album . Id ), album , ( TimeSpan ) cacheEntryOptions ); } return albumApiModels ; } public async Task < AlbumApiModel > GetAlbumById ( int id ) { var albumApiModelCached = _cache . Get < AlbumApiModel >( string . Concat ( \"Album-\" , id )); if ( albumApiModelCached != null ) { return albumApiModelCached ; } else { var album = await _albumRepository . GetById ( id ); if ( album == null ) return null ; var albumApiModel = album . Convert (); albumApiModel . ArtistName = ( _artistRepository . GetById ( album . ArtistId )). Result . Name ; albumApiModel . Tracks = ( await GetTrackByAlbumId ( id )). ToList (); var cacheEntryOptions = new MemoryCacheEntryOptions (). SetSlidingExpiration ( TimeSpan . FromSeconds ( 604800 )) . AbsoluteExpirationRelativeToNow = TimeSpan . FromSeconds ( 604800 );; _cache . Set ( string . Concat ( \"Album-\" , albumApiModel . Id ), albumApiModel , ( TimeSpan ) cacheEntryOptions ); return albumApiModel ; } } DISTRIBUTED CACHING \u00b6 Install tool for MSSQL distrubuted caching using the commend in Command Prompt \u00b6 dotnet tool install --global dotnet-sql-cache Run from Command Prompt \u00b6 dotnet sql-cache create \"Data Source=.;Initial Catalog=ChinookCacheDb;Integrated Security=True;\" dbo ChinookCache Install Microsoft.Extensions.Caching.SqlServer NuGet package to Domain \u00b6 dotnet add package Microsoft.Extensions.Caching.SqlServer ADD DISTRIBUTED CACHING TO ADDCACHING() IN SERVICESCONFIGURATION.CS \u00b6 public static void AddCaching ( this IServiceCollection services , IConfiguration configuration ) { services . AddResponseCaching (); services . AddMemoryCache (); services . AddDistributedSqlServerCache ( options => { options . ConnectionString = configuration . GetConnectionString ( \"ChinookSQLCache\" ); options . SchemaName = \"dbo\" ; options . TableName = \"ChinookCache\" ; }); } ADD DISTRIBUTEDCACHE TO SUPERVISOR AND GET FROM DI \u00b6 ChinookSupervisor.cs \u00b6 public partial class ChinookSupervisor : IChinookSupervisor { private readonly IAlbumRepository _albumRepository ; private readonly IArtistRepository _artistRepository ; private readonly ICustomerRepository _customerRepository ; private readonly IEmployeeRepository _employeeRepository ; private readonly IGenreRepository _genreRepository ; private readonly IInvoiceLineRepository _invoiceLineRepository ; private readonly IInvoiceRepository _invoiceRepository ; private readonly IMediaTypeRepository _mediaTypeRepository ; private readonly IPlaylistRepository _playlistRepository ; private readonly ITrackRepository _trackRepository ; private readonly IValidator < AlbumApiModel > _albumValidator ; private readonly IValidator < ArtistApiModel > _artistValidator ; private readonly IValidator < CustomerApiModel > _customerValidator ; private readonly IValidator < EmployeeApiModel > _employeeValidator ; private readonly IValidator < GenreApiModel > _genreValidator ; private readonly IValidator < InvoiceApiModel > _invoiceValidator ; private readonly IValidator < InvoiceLineApiModel > _invoiceLineValidator ; private readonly IValidator < MediaTypeApiModel > _mediaTypeValidator ; private readonly IValidator < PlaylistApiModel > _playlistValidator ; private readonly IValidator < TrackApiModel > _trackValidator ; private readonly IMemoryCache _cache ; private readonly IDistributedCache _distributedCache ; public ChinookSupervisor ( IAlbumRepository albumRepository , IArtistRepository artistRepository , ICustomerRepository customerRepository , IEmployeeRepository employeeRepository , IGenreRepository genreRepository , IInvoiceLineRepository invoiceLineRepository , IInvoiceRepository invoiceRepository , IMediaTypeRepository mediaTypeRepository , IPlaylistRepository playlistRepository , ITrackRepository trackRepository , IValidator < AlbumApiModel > albumValidator , IValidator < ArtistApiModel > artistValidator , IValidator < CustomerApiModel > customerValidator , IValidator < EmployeeApiModel > employeeValidator , IValidator < GenreApiModel > genreValidator , IValidator < InvoiceApiModel > invoiceValidator , IValidator < InvoiceLineApiModel > invoiceLineValidator , IValidator < MediaTypeApiModel > mediaTypeValidator , IValidator < PlaylistApiModel > playlistValidator , IValidator < TrackApiModel > trackValidator , IMemoryCache memoryCache , IDistributedCache distributedCache ) { _albumRepository = albumRepository ; _artistRepository = artistRepository ; _customerRepository = customerRepository ; _employeeRepository = employeeRepository ; _genreRepository = genreRepository ; _invoiceLineRepository = invoiceLineRepository ; _invoiceRepository = invoiceRepository ; _mediaTypeRepository = mediaTypeRepository ; _playlistRepository = playlistRepository ; _trackRepository = trackRepository ; _albumValidator = albumValidator ; _artistValidator = artistValidator ; _customerValidator = customerValidator ; _employeeValidator = employeeValidator ; _genreValidator = genreValidator ; _invoiceValidator = invoiceValidator ; _invoiceLineValidator = invoiceLineValidator ; _mediaTypeValidator = mediaTypeValidator ; _playlistValidator = playlistValidator ; _trackValidator = trackValidator ; _cache = memoryCache ; _distributedCache = distributedCache ; } } ADD CODE TO SUPERVISOR FOR EACH ENTITY TYPE NEEDED \u00b6 ChinookSupervisorTrack.cs \u00b6 public async Task < IEnumerable < TrackApiModel >> GetAllTrack () { List < Track > tracks = await _trackRepository . GetAll (); var trackApiModels = tracks . ConvertAll (); foreach ( var track in trackApiModels ) { DistributedCacheEntryOptions cacheEntryOptions = new DistributedCacheEntryOptions (); cacheEntryOptions . SetSlidingExpiration ( TimeSpan . FromSeconds ( 3600 )); cacheEntryOptions . AbsoluteExpirationRelativeToNow = TimeSpan . FromSeconds ( 86400 ); await _distributedCache . SetStringAsync ( $ \"Track-{track.Id}\" , JsonSerializer . Serialize ( track ), cacheEntryOptions ); } return trackApiModels ; } public async Task < TrackApiModel > GetTrackById ( int id ) { var trackApiModelCached = await _distributedCache . GetStringAsync ( $ \"Track-{id}\" ); if ( trackApiModelCached != null ) { return JsonSerializer . Deserialize < TrackApiModel >( trackApiModelCached ); } else { var track = await _trackRepository . GetById ( id ); if ( track == null ) return null ; var trackApiModel = track . Convert (); trackApiModel . Genre = await GetGenreById ( trackApiModel . GenreId ); trackApiModel . Album = await GetAlbumById ( trackApiModel . AlbumId ); trackApiModel . MediaType = await GetMediaTypeById ( trackApiModel . MediaTypeId ); if ( trackApiModel . Album != null ) { trackApiModel . AlbumName = trackApiModel . Album . Title ; } trackApiModel . MediaTypeName = trackApiModel . MediaType . Name ; if ( trackApiModel . Genre != null ) { trackApiModel . GenreName = trackApiModel . Genre . Name ; } DistributedCacheEntryOptions cacheEntryOptions = new DistributedCacheEntryOptions (); cacheEntryOptions . SetSlidingExpiration ( TimeSpan . FromSeconds ( 3600 )); cacheEntryOptions . AbsoluteExpirationRelativeToNow = TimeSpan . FromSeconds ( 86400 ); await _distributedCache . SetStringAsync ( $ \"Track-{track.Id}\" , JsonSerializer . Serialize ( trackApiModel ), cacheEntryOptions ); return trackApiModel ; } }","title":"Caching Data in your API"},{"location":"Standing%20Up%20an%20ASP.NET%20Core%20Web%20API/caching-data/#caching-data-in-your-api","text":"","title":"Caching Data in Your API"},{"location":"Standing%20Up%20an%20ASP.NET%20Core%20Web%20API/caching-data/#response-caching","text":"","title":"RESPONSE CACHING"},{"location":"Standing%20Up%20an%20ASP.NET%20Core%20Web%20API/caching-data/#add-response-caching-to-addcaching-in-servicesconfigurationcs","text":"public static void AddCaching ( this IServiceCollection services , IConfiguration configuration ) { services . AddResponseCaching (); }","title":"ADD RESPONSE CACHING TO ADDCACHING() IN SERVICESCONFIGURATION.CS"},{"location":"Standing%20Up%20an%20ASP.NET%20Core%20Web%20API/caching-data/#add-to-configure-in-startupcs","text":"**** Note: needs to go after CORS** public void Configure ( IApplicationBuilder app , IWebHostEnvironment env ) { if ( env . IsDevelopment ()) { app . UseDeveloperExceptionPage (); } app . UseHttpsRedirection (); app . UseRouting (); app . UseCors ( \"CorsPolicy\" ); app . UseResponseCaching (); app . UseAuthorization (); app . UseEndpoints ( endpoints => { endpoints . MapControllers (); }); }","title":"ADD TO CONFIGURE() IN STARTUP.CS"},{"location":"Standing%20Up%20an%20ASP.NET%20Core%20Web%20API/caching-data/#add-to-controllers-or-actions","text":"[Route(\"api/[controller] \")] [ApiController] [EnableCors(\"CorsPolicy\")] [ResponseCache(Duration = 604800)] public class GenreController : ControllerBase Note: 604800 is seconds and equals a week","title":"ADD TO CONTROLLERS OR ACTIONS"},{"location":"Standing%20Up%20an%20ASP.NET%20Core%20Web%20API/caching-data/#what-is-seen-in-the-response-header","text":"Response Header: Cache-Control: public,max-age=604800 Test in Postman and web browser to see how the API Consumer behaves.","title":"What is seen in the Response Header"},{"location":"Standing%20Up%20an%20ASP.NET%20Core%20Web%20API/caching-data/#in-memory-caching","text":"","title":"IN-MEMORY CACHING"},{"location":"Standing%20Up%20an%20ASP.NET%20Core%20Web%20API/caching-data/#install-microsoftextensionscachingabstractions-nuget-package-to-domain","text":"dotnet add package Microsoft.Extensions.Caching.Abstractions","title":"Install Microsoft.Extensions.Caching.Abstractions NuGet package to Domain"},{"location":"Standing%20Up%20an%20ASP.NET%20Core%20Web%20API/caching-data/#add-in-memory-caching-to-addcaching-in-servicesconfigurationcs","text":"public static void AddCaching ( this IServiceCollection services , IConfiguration configuration ) { services . AddResponseCaching (); services . AddMemoryCache (); }","title":"ADD IN-MEMORY CACHING TO ADDCACHING() IN SERVICESCONFIGURATION.CS"},{"location":"Standing%20Up%20an%20ASP.NET%20Core%20Web%20API/caching-data/#add-memorycache-to-supervisor-and-get-from-di","text":"","title":"ADD MEMORYCACHE TO SUPERVISOR AND GET FROM DI"},{"location":"Standing%20Up%20an%20ASP.NET%20Core%20Web%20API/caching-data/#chinooksupervisorcs","text":"public partial class ChinookSupervisor : IChinookSupervisor { private readonly IAlbumRepository _albumRepository ; private readonly IArtistRepository _artistRepository ; private readonly ICustomerRepository _customerRepository ; private readonly IEmployeeRepository _employeeRepository ; private readonly IGenreRepository _genreRepository ; private readonly IInvoiceLineRepository _invoiceLineRepository ; private readonly IInvoiceRepository _invoiceRepository ; private readonly IMediaTypeRepository _mediaTypeRepository ; private readonly IPlaylistRepository _playlistRepository ; private readonly ITrackRepository _trackRepository ; private readonly IValidator < AlbumApiModel > _albumValidator ; private readonly IValidator < ArtistApiModel > _artistValidator ; private readonly IValidator < CustomerApiModel > _customerValidator ; private readonly IValidator < EmployeeApiModel > _employeeValidator ; private readonly IValidator < GenreApiModel > _genreValidator ; private readonly IValidator < InvoiceApiModel > _invoiceValidator ; private readonly IValidator < InvoiceLineApiModel > _invoiceLineValidator ; private readonly IValidator < MediaTypeApiModel > _mediaTypeValidator ; private readonly IValidator < PlaylistApiModel > _playlistValidator ; private readonly IValidator < TrackApiModel > _trackValidator ; private readonly IMemoryCache _cache ; public ChinookSupervisor ( IAlbumRepository albumRepository , IArtistRepository artistRepository , ICustomerRepository customerRepository , IEmployeeRepository employeeRepository , IGenreRepository genreRepository , IInvoiceLineRepository invoiceLineRepository , IInvoiceRepository invoiceRepository , IMediaTypeRepository mediaTypeRepository , IPlaylistRepository playlistRepository , ITrackRepository trackRepository , IValidator < AlbumApiModel > albumValidator , IValidator < ArtistApiModel > artistValidator , IValidator < CustomerApiModel > customerValidator , IValidator < EmployeeApiModel > employeeValidator , IValidator < GenreApiModel > genreValidator , IValidator < InvoiceApiModel > invoiceValidator , IValidator < InvoiceLineApiModel > invoiceLineValidator , IValidator < MediaTypeApiModel > mediaTypeValidator , IValidator < PlaylistApiModel > playlistValidator , IValidator < TrackApiModel > trackValidator , IMemoryCache memoryCache ) { _albumRepository = albumRepository ; _artistRepository = artistRepository ; _customerRepository = customerRepository ; _employeeRepository = employeeRepository ; _genreRepository = genreRepository ; _invoiceLineRepository = invoiceLineRepository ; _invoiceRepository = invoiceRepository ; _mediaTypeRepository = mediaTypeRepository ; _playlistRepository = playlistRepository ; _trackRepository = trackRepository ; _albumValidator = albumValidator ; _artistValidator = artistValidator ; _customerValidator = customerValidator ; _employeeValidator = employeeValidator ; _genreValidator = genreValidator ; _invoiceValidator = invoiceValidator ; _invoiceLineValidator = invoiceLineValidator ; _mediaTypeValidator = mediaTypeValidator ; _playlistValidator = playlistValidator ; _trackValidator = trackValidator ; _cache = memoryCache ; } }","title":"ChinookSupervisor.cs"},{"location":"Standing%20Up%20an%20ASP.NET%20Core%20Web%20API/caching-data/#add-code-to-supervisor-for-each-entity-type-needed","text":"","title":"ADD CODE TO SUPERVISOR FOR EACH ENTITY TYPE NEEDED"},{"location":"Standing%20Up%20an%20ASP.NET%20Core%20Web%20API/caching-data/#chinooksupervisoralbumcs","text":"public async Task < IEnumerable < AlbumApiModel >> GetAllAlbum () { List < Album > albums = await _albumRepository . GetAll (); var albumApiModels = albums . ConvertAll (); foreach ( var album in albumApiModels ) { var cacheEntryOptions = new MemoryCacheEntryOptions (). SetSlidingExpiration ( TimeSpan . FromSeconds ( 604800 )) . AbsoluteExpirationRelativeToNow = TimeSpan . FromSeconds ( 604800 );; _cache . Set ( string . Concat ( \"Album-\" , album . Id ), album , ( TimeSpan ) cacheEntryOptions ); } return albumApiModels ; } public async Task < AlbumApiModel > GetAlbumById ( int id ) { var albumApiModelCached = _cache . Get < AlbumApiModel >( string . Concat ( \"Album-\" , id )); if ( albumApiModelCached != null ) { return albumApiModelCached ; } else { var album = await _albumRepository . GetById ( id ); if ( album == null ) return null ; var albumApiModel = album . Convert (); albumApiModel . ArtistName = ( _artistRepository . GetById ( album . ArtistId )). Result . Name ; albumApiModel . Tracks = ( await GetTrackByAlbumId ( id )). ToList (); var cacheEntryOptions = new MemoryCacheEntryOptions (). SetSlidingExpiration ( TimeSpan . FromSeconds ( 604800 )) . AbsoluteExpirationRelativeToNow = TimeSpan . FromSeconds ( 604800 );; _cache . Set ( string . Concat ( \"Album-\" , albumApiModel . Id ), albumApiModel , ( TimeSpan ) cacheEntryOptions ); return albumApiModel ; } }","title":"ChinookSupervisorAlbum.cs"},{"location":"Standing%20Up%20an%20ASP.NET%20Core%20Web%20API/caching-data/#distributed-caching","text":"","title":"DISTRIBUTED CACHING"},{"location":"Standing%20Up%20an%20ASP.NET%20Core%20Web%20API/caching-data/#install-tool-for-mssql-distrubuted-caching-using-the-commend-in-command-prompt","text":"dotnet tool install --global dotnet-sql-cache","title":"Install tool for MSSQL distrubuted caching using the commend in Command Prompt"},{"location":"Standing%20Up%20an%20ASP.NET%20Core%20Web%20API/caching-data/#run-from-command-prompt","text":"dotnet sql-cache create \"Data Source=.;Initial Catalog=ChinookCacheDb;Integrated Security=True;\" dbo ChinookCache","title":"Run from Command Prompt"},{"location":"Standing%20Up%20an%20ASP.NET%20Core%20Web%20API/caching-data/#install-microsoftextensionscachingsqlserver-nuget-package-to-domain","text":"dotnet add package Microsoft.Extensions.Caching.SqlServer","title":"Install Microsoft.Extensions.Caching.SqlServer NuGet package to Domain"},{"location":"Standing%20Up%20an%20ASP.NET%20Core%20Web%20API/caching-data/#add-distributed-caching-to-addcaching-in-servicesconfigurationcs","text":"public static void AddCaching ( this IServiceCollection services , IConfiguration configuration ) { services . AddResponseCaching (); services . AddMemoryCache (); services . AddDistributedSqlServerCache ( options => { options . ConnectionString = configuration . GetConnectionString ( \"ChinookSQLCache\" ); options . SchemaName = \"dbo\" ; options . TableName = \"ChinookCache\" ; }); }","title":"ADD DISTRIBUTED CACHING TO ADDCACHING() IN SERVICESCONFIGURATION.CS"},{"location":"Standing%20Up%20an%20ASP.NET%20Core%20Web%20API/caching-data/#add-distributedcache-to-supervisor-and-get-from-di","text":"","title":"ADD DISTRIBUTEDCACHE TO SUPERVISOR AND GET FROM DI"},{"location":"Standing%20Up%20an%20ASP.NET%20Core%20Web%20API/caching-data/#chinooksupervisorcs_1","text":"public partial class ChinookSupervisor : IChinookSupervisor { private readonly IAlbumRepository _albumRepository ; private readonly IArtistRepository _artistRepository ; private readonly ICustomerRepository _customerRepository ; private readonly IEmployeeRepository _employeeRepository ; private readonly IGenreRepository _genreRepository ; private readonly IInvoiceLineRepository _invoiceLineRepository ; private readonly IInvoiceRepository _invoiceRepository ; private readonly IMediaTypeRepository _mediaTypeRepository ; private readonly IPlaylistRepository _playlistRepository ; private readonly ITrackRepository _trackRepository ; private readonly IValidator < AlbumApiModel > _albumValidator ; private readonly IValidator < ArtistApiModel > _artistValidator ; private readonly IValidator < CustomerApiModel > _customerValidator ; private readonly IValidator < EmployeeApiModel > _employeeValidator ; private readonly IValidator < GenreApiModel > _genreValidator ; private readonly IValidator < InvoiceApiModel > _invoiceValidator ; private readonly IValidator < InvoiceLineApiModel > _invoiceLineValidator ; private readonly IValidator < MediaTypeApiModel > _mediaTypeValidator ; private readonly IValidator < PlaylistApiModel > _playlistValidator ; private readonly IValidator < TrackApiModel > _trackValidator ; private readonly IMemoryCache _cache ; private readonly IDistributedCache _distributedCache ; public ChinookSupervisor ( IAlbumRepository albumRepository , IArtistRepository artistRepository , ICustomerRepository customerRepository , IEmployeeRepository employeeRepository , IGenreRepository genreRepository , IInvoiceLineRepository invoiceLineRepository , IInvoiceRepository invoiceRepository , IMediaTypeRepository mediaTypeRepository , IPlaylistRepository playlistRepository , ITrackRepository trackRepository , IValidator < AlbumApiModel > albumValidator , IValidator < ArtistApiModel > artistValidator , IValidator < CustomerApiModel > customerValidator , IValidator < EmployeeApiModel > employeeValidator , IValidator < GenreApiModel > genreValidator , IValidator < InvoiceApiModel > invoiceValidator , IValidator < InvoiceLineApiModel > invoiceLineValidator , IValidator < MediaTypeApiModel > mediaTypeValidator , IValidator < PlaylistApiModel > playlistValidator , IValidator < TrackApiModel > trackValidator , IMemoryCache memoryCache , IDistributedCache distributedCache ) { _albumRepository = albumRepository ; _artistRepository = artistRepository ; _customerRepository = customerRepository ; _employeeRepository = employeeRepository ; _genreRepository = genreRepository ; _invoiceLineRepository = invoiceLineRepository ; _invoiceRepository = invoiceRepository ; _mediaTypeRepository = mediaTypeRepository ; _playlistRepository = playlistRepository ; _trackRepository = trackRepository ; _albumValidator = albumValidator ; _artistValidator = artistValidator ; _customerValidator = customerValidator ; _employeeValidator = employeeValidator ; _genreValidator = genreValidator ; _invoiceValidator = invoiceValidator ; _invoiceLineValidator = invoiceLineValidator ; _mediaTypeValidator = mediaTypeValidator ; _playlistValidator = playlistValidator ; _trackValidator = trackValidator ; _cache = memoryCache ; _distributedCache = distributedCache ; } }","title":"ChinookSupervisor.cs"},{"location":"Standing%20Up%20an%20ASP.NET%20Core%20Web%20API/caching-data/#add-code-to-supervisor-for-each-entity-type-needed_1","text":"","title":"ADD CODE TO SUPERVISOR FOR EACH ENTITY TYPE NEEDED"},{"location":"Standing%20Up%20an%20ASP.NET%20Core%20Web%20API/caching-data/#chinooksupervisortrackcs","text":"public async Task < IEnumerable < TrackApiModel >> GetAllTrack () { List < Track > tracks = await _trackRepository . GetAll (); var trackApiModels = tracks . ConvertAll (); foreach ( var track in trackApiModels ) { DistributedCacheEntryOptions cacheEntryOptions = new DistributedCacheEntryOptions (); cacheEntryOptions . SetSlidingExpiration ( TimeSpan . FromSeconds ( 3600 )); cacheEntryOptions . AbsoluteExpirationRelativeToNow = TimeSpan . FromSeconds ( 86400 ); await _distributedCache . SetStringAsync ( $ \"Track-{track.Id}\" , JsonSerializer . Serialize ( track ), cacheEntryOptions ); } return trackApiModels ; } public async Task < TrackApiModel > GetTrackById ( int id ) { var trackApiModelCached = await _distributedCache . GetStringAsync ( $ \"Track-{id}\" ); if ( trackApiModelCached != null ) { return JsonSerializer . Deserialize < TrackApiModel >( trackApiModelCached ); } else { var track = await _trackRepository . GetById ( id ); if ( track == null ) return null ; var trackApiModel = track . Convert (); trackApiModel . Genre = await GetGenreById ( trackApiModel . GenreId ); trackApiModel . Album = await GetAlbumById ( trackApiModel . AlbumId ); trackApiModel . MediaType = await GetMediaTypeById ( trackApiModel . MediaTypeId ); if ( trackApiModel . Album != null ) { trackApiModel . AlbumName = trackApiModel . Album . Title ; } trackApiModel . MediaTypeName = trackApiModel . MediaType . Name ; if ( trackApiModel . Genre != null ) { trackApiModel . GenreName = trackApiModel . Genre . Name ; } DistributedCacheEntryOptions cacheEntryOptions = new DistributedCacheEntryOptions (); cacheEntryOptions . SetSlidingExpiration ( TimeSpan . FromSeconds ( 3600 )); cacheEntryOptions . AbsoluteExpirationRelativeToNow = TimeSpan . FromSeconds ( 86400 ); await _distributedCache . SetStringAsync ( $ \"Track-{track.Id}\" , JsonSerializer . Serialize ( trackApiModel ), cacheEntryOptions ); return trackApiModel ; } }","title":"ChinookSupervisorTrack.cs"},{"location":"Standing%20Up%20an%20ASP.NET%20Core%20Web%20API/designing-ntier-api/","text":"Designing the NTier API \u00b6 CREATE NEW PROJECTS FOR DATA AND DOMAIN \u00b6","title":"Designing the NTier API"},{"location":"Standing%20Up%20an%20ASP.NET%20Core%20Web%20API/designing-ntier-api/#designing-the-ntier-api","text":"","title":"Designing the NTier API"},{"location":"Standing%20Up%20an%20ASP.NET%20Core%20Web%20API/designing-ntier-api/#create-new-projects-for-data-and-domain","text":"","title":"CREATE NEW PROJECTS FOR DATA AND DOMAIN"},{"location":"Standing%20Up%20an%20ASP.NET%20Core%20Web%20API/documenting-with-openapi/","text":"Documenting your API with OpenAPI \u00b6","title":"Documenting your API with OpenAPI"},{"location":"Standing%20Up%20an%20ASP.NET%20Core%20Web%20API/documenting-with-openapi/#documenting-your-api-with-openapi","text":"","title":"Documenting your API with OpenAPI"},{"location":"Standing%20Up%20an%20ASP.NET%20Core%20Web%20API/identity/","text":"Identity in your Web API \u00b6","title":"Identity in your Web API"},{"location":"Standing%20Up%20an%20ASP.NET%20Core%20Web%20API/identity/#identity-in-your-web-api","text":"","title":"Identity in your Web API"},{"location":"Standing%20Up%20an%20ASP.NET%20Core%20Web%20API/ntier-api-endpoints/","text":"Developing the API endpoints \u00b6 ADD APIMODELS TO DOMAIN \u00b6 using System.Collections.Generic ; namespace ChinookASPNETWebAPI.Domain.ApiModels { public class AlbumApiModel { public int Id { get ; set ; } public string Title { get ; set ; } public int ArtistId { get ; set ; } public string ArtistName { get ; set ; } public ArtistApiModel Artist { get ; set ; } public IList < TrackApiModel > Tracks { get ; set ; } } } ADD IConvertModel TO DOMAIN \u00b6 using System.Threading.Tasks ; namespace ChinookASPNETWebAPI.Domain.Converters { public interface IConvertModel < TSource , TTarget > { TTarget Convert (); } } ADD ConvertExtensions TO DOMAIN \u00b6 using System.Collections.Generic ; using System.Linq ; using System.Threading.Tasks ; using ChinookASPNETWebAPI.Domain.Converters ; namespace ChinookASPNETWebAPI.Domain.Extensions { public static class ConvertExtensions { public static IEnumerable < TTarget > ConvertAll < TSource , TTarget >( this IEnumerable < IConvertModel < TSource , TTarget >> values ) => values . Select ( value => value . Convert ()); } } ADD CONVERT CODE APIMODELS IN DOMAIN \u00b6 using System.Collections.Generic ; using System.Threading.Tasks ; using ChinookASPNETWebAPI.Domain.Converters ; using ChinookASPNETWebAPI.Domain.Entities ; namespace ChinookASPNETWebAPI.Domain.ApiModels { public class AlbumApiModel : IConvertModel < AlbumApiModel , Album > { public int Id { get ; set ; } public string Title { get ; set ; } public int ArtistId { get ; set ; } public string ArtistName { get ; set ; } public ArtistApiModel Artist { get ; set ; } public IList < TrackApiModel > Tracks { get ; set ; } public Album Convert () => new () { Id = Id , ArtistId = ArtistId , Title = Title ?? string . Empty }; } } ADD CONVERT CODE ENTITIES IN DOMAIN \u00b6 using System.Collections.Generic ; using ChinookASPNETWebAPI.Domain.ApiModels ; using ChinookASPNETWebAPI.Domain.Converters ; # nullable disable namespace ChinookASPNETWebAPI.Domain.Entities { public partial class Album : IConvertModel < Album , AlbumApiModel > { public Album () { Tracks = new HashSet < Track >(); } public int Id { get ; set ; } public string Title { get ; set ; } public int ArtistId { get ; set ; } public virtual Artist Artist { get ; set ; } public virtual ICollection < Track > Tracks { get ; set ; } public AlbumApiModel Convert () => new () { Id = Id , ArtistId = ArtistId , Title = Title }; } } ADD SUPERVISOR TO DOMAIN \u00b6 Take a look at the code here for the logic of the Supervisor ADD APPSETTINGS TO API PROJECT \u00b6 appsettings.json \u00b6 { \"Logging\" : { \"LogLevel\" : { \"Default\" : \"Information\" , \"Microsoft\" : \"Warning\" , \"Microsoft.Hosting.Lifetime\" : \"Information\" } }, \"ConnectionStrings\" : { \"ChinookDbWindows\" : \"Server=.;Database=Chinook;Trusted_Connection=True;Application Name=ChinookASPNETCoreAPINTier\" , \"ChinookDbDocker\" : \"Server=localhost,1433;Database=Chinook;User=sa;Password=P@55w0rd;Trusted_Connection=False;Application Name=ChinookASPNETCoreAPINTier\" }, \"AllowedHosts\" : \"*\" } AppSettings.cs \u00b6 namespace ChinookASPNETWebAPI.API.Configurations { public abstract class AppSettings { } } ConfigureAppSettings.cs \u00b6 using Microsoft.Extensions.Configuration ; using Microsoft.Extensions.DependencyInjection ; namespace ChinookASPNETWebAPI.API.Configurations { public static class ConfigureAppSettings { public static IServiceCollection AddAppSettings ( this IServiceCollection services , IConfiguration configuration ) { services . Configure < AppSettings >( _ => configuration . GetSection ( \"AppSettings\" ). Bind ( _ )); return services ; } } } ADD SERVICESCONFIGURATION TO API PROJECT \u00b6 public static class ServicesConfiguration { public static void ConfigureRepositories ( this IServiceCollection services ) { services . AddScoped < IAlbumRepository , AlbumRepository >() . AddScoped < IArtistRepository , ArtistRepository >() . AddScoped < ICustomerRepository , CustomerRepository >() . AddScoped < IEmployeeRepository , EmployeeRepository >() . AddScoped < IGenreRepository , GenreRepository >() . AddScoped < IInvoiceRepository , InvoiceRepository >() . AddScoped < IInvoiceLineRepository , InvoiceLineRepository >() . AddScoped < IMediaTypeRepository , MediaTypeRepository >() . AddScoped < IPlaylistRepository , PlaylistRepository >() . AddScoped < ITrackRepository , TrackRepository >(); } public static void ConfigureSupervisor ( this IServiceCollection services ) { services . AddScoped < IChinookSupervisor , ChinookSupervisor >(); } } ADD CONTROLLERS TO API \u00b6 ADD ACTIONS TO CONTROLLERS \u00b6 [Route(\"api/[controller] \")] [ApiController] public class AlbumController : ControllerBase { private readonly IChinookSupervisor _chinookSupervisor ; private readonly ILogger < AlbumController > _logger ; public AlbumController ( IChinookSupervisor chinookSupervisor , ILogger < AlbumController > logger ) { _chinookSupervisor = chinookSupervisor ; _logger = logger ; } [HttpGet] [Produces(typeof(List<AlbumApiModel>))] public async Task < ActionResult < List < AlbumApiModel >>> Get () { return Ok ( await _chinookSupervisor . GetAllAlbum ()); } [HttpGet(\"{id}\", Name = \"GetAlbumById\")] public async Task < ActionResult < AlbumApiModel >> Get ( int id ) { return Ok ( await _chinookSupervisor . GetAlbumById ( id )); } [HttpGet(\"artist/{id}\", Name = \"GetByArtistId\")] public async Task < ActionResult < List < AlbumApiModel >>> GetByArtistId ( int id ) { return Ok ( await _chinookSupervisor . GetAlbumByArtistId ( id )); } [HttpPost] [Produces(\"application/json\")] [Consumes(\"application/json\")] public async Task < ActionResult < AlbumApiModel >> Post ([ FromBody ] AlbumApiModel input ) { return Ok ( await _chinookSupervisor . AddAlbum ( input )); } [HttpPut(\"{id}\")] [Produces(\"application/json\")] [Consumes(\"application/json\")] public async Task < ActionResult < AlbumApiModel >> Put ( int id , [ FromBody ] AlbumApiModel input ) { return Ok ( await _chinookSupervisor . UpdateAlbum ( input )); } [HttpDelete(\"{id}\")] public async Task < ActionResult > Delete ( int id ) { return Ok ( await _chinookSupervisor . DeleteAlbum ( id )); } }","title":"Developing the API Endpoints"},{"location":"Standing%20Up%20an%20ASP.NET%20Core%20Web%20API/ntier-api-endpoints/#developing-the-api-endpoints","text":"","title":"Developing the API endpoints"},{"location":"Standing%20Up%20an%20ASP.NET%20Core%20Web%20API/ntier-api-endpoints/#add-apimodels-to-domain","text":"using System.Collections.Generic ; namespace ChinookASPNETWebAPI.Domain.ApiModels { public class AlbumApiModel { public int Id { get ; set ; } public string Title { get ; set ; } public int ArtistId { get ; set ; } public string ArtistName { get ; set ; } public ArtistApiModel Artist { get ; set ; } public IList < TrackApiModel > Tracks { get ; set ; } } }","title":"ADD APIMODELS TO DOMAIN"},{"location":"Standing%20Up%20an%20ASP.NET%20Core%20Web%20API/ntier-api-endpoints/#add-iconvertmodel-to-domain","text":"using System.Threading.Tasks ; namespace ChinookASPNETWebAPI.Domain.Converters { public interface IConvertModel < TSource , TTarget > { TTarget Convert (); } }","title":"ADD IConvertModel TO DOMAIN"},{"location":"Standing%20Up%20an%20ASP.NET%20Core%20Web%20API/ntier-api-endpoints/#add-convertextensions-to-domain","text":"using System.Collections.Generic ; using System.Linq ; using System.Threading.Tasks ; using ChinookASPNETWebAPI.Domain.Converters ; namespace ChinookASPNETWebAPI.Domain.Extensions { public static class ConvertExtensions { public static IEnumerable < TTarget > ConvertAll < TSource , TTarget >( this IEnumerable < IConvertModel < TSource , TTarget >> values ) => values . Select ( value => value . Convert ()); } }","title":"ADD ConvertExtensions TO DOMAIN"},{"location":"Standing%20Up%20an%20ASP.NET%20Core%20Web%20API/ntier-api-endpoints/#add-convert-code-apimodels-in-domain","text":"using System.Collections.Generic ; using System.Threading.Tasks ; using ChinookASPNETWebAPI.Domain.Converters ; using ChinookASPNETWebAPI.Domain.Entities ; namespace ChinookASPNETWebAPI.Domain.ApiModels { public class AlbumApiModel : IConvertModel < AlbumApiModel , Album > { public int Id { get ; set ; } public string Title { get ; set ; } public int ArtistId { get ; set ; } public string ArtistName { get ; set ; } public ArtistApiModel Artist { get ; set ; } public IList < TrackApiModel > Tracks { get ; set ; } public Album Convert () => new () { Id = Id , ArtistId = ArtistId , Title = Title ?? string . Empty }; } }","title":"ADD CONVERT CODE APIMODELS IN DOMAIN"},{"location":"Standing%20Up%20an%20ASP.NET%20Core%20Web%20API/ntier-api-endpoints/#add-convert-code-entities-in-domain","text":"using System.Collections.Generic ; using ChinookASPNETWebAPI.Domain.ApiModels ; using ChinookASPNETWebAPI.Domain.Converters ; # nullable disable namespace ChinookASPNETWebAPI.Domain.Entities { public partial class Album : IConvertModel < Album , AlbumApiModel > { public Album () { Tracks = new HashSet < Track >(); } public int Id { get ; set ; } public string Title { get ; set ; } public int ArtistId { get ; set ; } public virtual Artist Artist { get ; set ; } public virtual ICollection < Track > Tracks { get ; set ; } public AlbumApiModel Convert () => new () { Id = Id , ArtistId = ArtistId , Title = Title }; } }","title":"ADD CONVERT CODE ENTITIES IN DOMAIN"},{"location":"Standing%20Up%20an%20ASP.NET%20Core%20Web%20API/ntier-api-endpoints/#add-supervisor-to-domain","text":"Take a look at the code here for the logic of the Supervisor","title":"ADD SUPERVISOR TO DOMAIN"},{"location":"Standing%20Up%20an%20ASP.NET%20Core%20Web%20API/ntier-api-endpoints/#add-appsettings-to-api-project","text":"","title":"ADD APPSETTINGS TO  API PROJECT"},{"location":"Standing%20Up%20an%20ASP.NET%20Core%20Web%20API/ntier-api-endpoints/#appsettingsjson","text":"{ \"Logging\" : { \"LogLevel\" : { \"Default\" : \"Information\" , \"Microsoft\" : \"Warning\" , \"Microsoft.Hosting.Lifetime\" : \"Information\" } }, \"ConnectionStrings\" : { \"ChinookDbWindows\" : \"Server=.;Database=Chinook;Trusted_Connection=True;Application Name=ChinookASPNETCoreAPINTier\" , \"ChinookDbDocker\" : \"Server=localhost,1433;Database=Chinook;User=sa;Password=P@55w0rd;Trusted_Connection=False;Application Name=ChinookASPNETCoreAPINTier\" }, \"AllowedHosts\" : \"*\" }","title":"appsettings.json"},{"location":"Standing%20Up%20an%20ASP.NET%20Core%20Web%20API/ntier-api-endpoints/#appsettingscs","text":"namespace ChinookASPNETWebAPI.API.Configurations { public abstract class AppSettings { } }","title":"AppSettings.cs"},{"location":"Standing%20Up%20an%20ASP.NET%20Core%20Web%20API/ntier-api-endpoints/#configureappsettingscs","text":"using Microsoft.Extensions.Configuration ; using Microsoft.Extensions.DependencyInjection ; namespace ChinookASPNETWebAPI.API.Configurations { public static class ConfigureAppSettings { public static IServiceCollection AddAppSettings ( this IServiceCollection services , IConfiguration configuration ) { services . Configure < AppSettings >( _ => configuration . GetSection ( \"AppSettings\" ). Bind ( _ )); return services ; } } }","title":"ConfigureAppSettings.cs"},{"location":"Standing%20Up%20an%20ASP.NET%20Core%20Web%20API/ntier-api-endpoints/#add-servicesconfiguration-to-api-project","text":"public static class ServicesConfiguration { public static void ConfigureRepositories ( this IServiceCollection services ) { services . AddScoped < IAlbumRepository , AlbumRepository >() . AddScoped < IArtistRepository , ArtistRepository >() . AddScoped < ICustomerRepository , CustomerRepository >() . AddScoped < IEmployeeRepository , EmployeeRepository >() . AddScoped < IGenreRepository , GenreRepository >() . AddScoped < IInvoiceRepository , InvoiceRepository >() . AddScoped < IInvoiceLineRepository , InvoiceLineRepository >() . AddScoped < IMediaTypeRepository , MediaTypeRepository >() . AddScoped < IPlaylistRepository , PlaylistRepository >() . AddScoped < ITrackRepository , TrackRepository >(); } public static void ConfigureSupervisor ( this IServiceCollection services ) { services . AddScoped < IChinookSupervisor , ChinookSupervisor >(); } }","title":"ADD SERVICESCONFIGURATION TO API PROJECT"},{"location":"Standing%20Up%20an%20ASP.NET%20Core%20Web%20API/ntier-api-endpoints/#add-controllers-to-api","text":"","title":"ADD CONTROLLERS TO API"},{"location":"Standing%20Up%20an%20ASP.NET%20Core%20Web%20API/ntier-api-endpoints/#add-actions-to-controllers","text":"[Route(\"api/[controller] \")] [ApiController] public class AlbumController : ControllerBase { private readonly IChinookSupervisor _chinookSupervisor ; private readonly ILogger < AlbumController > _logger ; public AlbumController ( IChinookSupervisor chinookSupervisor , ILogger < AlbumController > logger ) { _chinookSupervisor = chinookSupervisor ; _logger = logger ; } [HttpGet] [Produces(typeof(List<AlbumApiModel>))] public async Task < ActionResult < List < AlbumApiModel >>> Get () { return Ok ( await _chinookSupervisor . GetAllAlbum ()); } [HttpGet(\"{id}\", Name = \"GetAlbumById\")] public async Task < ActionResult < AlbumApiModel >> Get ( int id ) { return Ok ( await _chinookSupervisor . GetAlbumById ( id )); } [HttpGet(\"artist/{id}\", Name = \"GetByArtistId\")] public async Task < ActionResult < List < AlbumApiModel >>> GetByArtistId ( int id ) { return Ok ( await _chinookSupervisor . GetAlbumByArtistId ( id )); } [HttpPost] [Produces(\"application/json\")] [Consumes(\"application/json\")] public async Task < ActionResult < AlbumApiModel >> Post ([ FromBody ] AlbumApiModel input ) { return Ok ( await _chinookSupervisor . AddAlbum ( input )); } [HttpPut(\"{id}\")] [Produces(\"application/json\")] [Consumes(\"application/json\")] public async Task < ActionResult < AlbumApiModel >> Put ( int id , [ FromBody ] AlbumApiModel input ) { return Ok ( await _chinookSupervisor . UpdateAlbum ( input )); } [HttpDelete(\"{id}\")] public async Task < ActionResult > Delete ( int id ) { return Ok ( await _chinookSupervisor . DeleteAlbum ( id )); } }","title":"ADD ACTIONS TO CONTROLLERS"},{"location":"Standing%20Up%20an%20ASP.NET%20Core%20Web%20API/ntier-data-access/","text":"Developing the API Data access \u00b6 ADD PROJECT REFERENCE FOR API PROJECT \u00b6 ADD PROJECT REFERENCE FOR DATA PROJECT \u00b6 INSTALL OR UPDATE THR EF CORE CLI \u00b6 dotnet tool install --global dotnet-ef dotnet tool update --global dotnet-ef ADD NUGET PACKAGES TO DATA PROJECT \u00b6 dotnet add package Microsoft.EntityFrameworkCore.SqlServer dotnet add package Microsoft.EntityFrameworkCore.Design SCAFFOLD DBCONTEXT AND ENTITIES FROM CHINOOK DATABASE \u00b6 Run the following command in Developer Command Prompt dotnet ef dbcontext scaffold \"Server=.;Database=Chinook;Trusted_Connection=True;\" Microsoft.EntityFrameworkCore.SqlServer --context-dir Data --output-dir Entities MOVE ENTITIES IN DATA PROJECT TO DOMAIN \u00b6 Adjust the namespace for the Entities Add using reference in DBContext to Entities in Domain ADD REPOSITORY INTERFACES TO DOMAIN \u00b6 using System ; using System.Collections.Generic ; using System.Threading.Tasks ; using ChinookASPNETWebAPI.Domain.Entities ; namespace ChinookASPNETWebAPI.Domain.Repositories { public interface IAlbumRepository : IDisposable { Task < List < Album >> GetAll (); Task < Album > GetById ( int? id ); Task < List < Album >> GetByArtistId ( int id ); Task < Album > Add ( Album newAlbum ); Task < bool > Update ( Album album ); Task < bool > Delete ( int id ); } } ADD REPOSITORIES TO DATA \u00b6 using System.Collections.Generic ; using System.Linq ; using System.Threading.Tasks ; using ChinookASPNETWebAPI.Data.Data ; using ChinookASPNETWebAPI.Domain.Entities ; using ChinookASPNETWebAPI.Domain.Repositories ; using Microsoft.EntityFrameworkCore ; namespace ChinookASPNETWebAPI.Data.Repositories { public class AlbumRepository : IAlbumRepository { private readonly ChinookContext _context ; public AlbumRepository ( ChinookContext context ) { _context = context ; } private async Task < bool > AlbumExists ( int id ) => await _context . Albums . AnyAsync ( a => a . Id == id ); public void Dispose () => _context . Dispose (); public async Task < List < Album >> GetAll () => await _context . Albums . AsNoTrackingWithIdentityResolution (). ToListAsync (); public async Task < Album > GetById ( int? id ) { var dbAlbum = await _context . Albums . FindAsync ( id ); return dbAlbum ; } public async Task < Album > Add ( Album newAlbum ) { await _context . Albums . AddAsync ( newAlbum ); await _context . SaveChangesAsync (); return newAlbum ; } public async Task < bool > Update ( Album album ) { if (! await AlbumExists ( album . Id )) return false ; _context . Albums . Update ( album ); await _context . SaveChangesAsync (); return true ; } public async Task < bool > Delete ( int id ) { if (! await AlbumExists ( id )) return false ; var toRemove = await _context . Albums . FindAsync ( id ); _context . Albums . Remove ( toRemove ); await _context . SaveChangesAsync (); return true ; } public async Task < List < Album >> GetByArtistId ( int id ) => await _context . Albums . Where ( a => a . ArtistId == id ). AsNoTrackingWithIdentityResolution (). ToListAsync (); } } ADD DBCONTEXT TO DEPENDANCY INJECTION IN API PROJECT \u00b6 public static IServiceCollection AddConnectionProvider ( this IServiceCollection services , IConfiguration configuration ) { var connection = String . Empty ; if ( RuntimeInformation . IsOSPlatform ( OSPlatform . Windows )) { connection = configuration . GetConnectionString ( \"ChinookDbWindows\" ) ?? \"Server=.;Database=Chinook;Trusted_Connection=True;Application Name=ChinookASPNETCoreAPINTier\" ; } else if ( RuntimeInformation . IsOSPlatform ( OSPlatform . Linux ) || RuntimeInformation . IsOSPlatform ( OSPlatform . OSX )) { connection = configuration . GetConnectionString ( \"ChinookDbDocker\" ) ?? \"Server=localhost,1433;Database=Chinook;User=sa;Password=P@55w0rd;Trusted_Connection=False;Application Name=ChinookASPNETCoreAPINTier\" ; } services . AddDbContextPool < ChinookContext >( options => options . UseSqlServer ( connection )); return services ; } REMOVE ONCONFIGURING() FROM DBCONTEXT \u00b6 REMOVE THE DBCONTEXT CONSTRUCTOR W/O A PARAMETER \u00b6","title":"Developing Data Access for your Web API"},{"location":"Standing%20Up%20an%20ASP.NET%20Core%20Web%20API/ntier-data-access/#developing-the-api-data-access","text":"","title":"Developing the API Data access"},{"location":"Standing%20Up%20an%20ASP.NET%20Core%20Web%20API/ntier-data-access/#add-project-reference-for-api-project","text":"","title":"ADD PROJECT REFERENCE FOR API PROJECT"},{"location":"Standing%20Up%20an%20ASP.NET%20Core%20Web%20API/ntier-data-access/#add-project-reference-for-data-project","text":"","title":"ADD PROJECT REFERENCE FOR DATA PROJECT"},{"location":"Standing%20Up%20an%20ASP.NET%20Core%20Web%20API/ntier-data-access/#install-or-update-thr-ef-core-cli","text":"dotnet tool install --global dotnet-ef dotnet tool update --global dotnet-ef","title":"INSTALL OR UPDATE THR EF CORE CLI"},{"location":"Standing%20Up%20an%20ASP.NET%20Core%20Web%20API/ntier-data-access/#add-nuget-packages-to-data-project","text":"dotnet add package Microsoft.EntityFrameworkCore.SqlServer dotnet add package Microsoft.EntityFrameworkCore.Design","title":"ADD NUGET PACKAGES TO DATA PROJECT"},{"location":"Standing%20Up%20an%20ASP.NET%20Core%20Web%20API/ntier-data-access/#scaffold-dbcontext-and-entities-from-chinook-database","text":"Run the following command in Developer Command Prompt dotnet ef dbcontext scaffold \"Server=.;Database=Chinook;Trusted_Connection=True;\" Microsoft.EntityFrameworkCore.SqlServer --context-dir Data --output-dir Entities","title":"SCAFFOLD DBCONTEXT AND ENTITIES FROM CHINOOK DATABASE"},{"location":"Standing%20Up%20an%20ASP.NET%20Core%20Web%20API/ntier-data-access/#move-entities-in-data-project-to-domain","text":"Adjust the namespace for the Entities Add using reference in DBContext to Entities in Domain","title":"MOVE ENTITIES IN DATA PROJECT TO DOMAIN"},{"location":"Standing%20Up%20an%20ASP.NET%20Core%20Web%20API/ntier-data-access/#add-repository-interfaces-to-domain","text":"using System ; using System.Collections.Generic ; using System.Threading.Tasks ; using ChinookASPNETWebAPI.Domain.Entities ; namespace ChinookASPNETWebAPI.Domain.Repositories { public interface IAlbumRepository : IDisposable { Task < List < Album >> GetAll (); Task < Album > GetById ( int? id ); Task < List < Album >> GetByArtistId ( int id ); Task < Album > Add ( Album newAlbum ); Task < bool > Update ( Album album ); Task < bool > Delete ( int id ); } }","title":"ADD REPOSITORY INTERFACES TO DOMAIN"},{"location":"Standing%20Up%20an%20ASP.NET%20Core%20Web%20API/ntier-data-access/#add-repositories-to-data","text":"using System.Collections.Generic ; using System.Linq ; using System.Threading.Tasks ; using ChinookASPNETWebAPI.Data.Data ; using ChinookASPNETWebAPI.Domain.Entities ; using ChinookASPNETWebAPI.Domain.Repositories ; using Microsoft.EntityFrameworkCore ; namespace ChinookASPNETWebAPI.Data.Repositories { public class AlbumRepository : IAlbumRepository { private readonly ChinookContext _context ; public AlbumRepository ( ChinookContext context ) { _context = context ; } private async Task < bool > AlbumExists ( int id ) => await _context . Albums . AnyAsync ( a => a . Id == id ); public void Dispose () => _context . Dispose (); public async Task < List < Album >> GetAll () => await _context . Albums . AsNoTrackingWithIdentityResolution (). ToListAsync (); public async Task < Album > GetById ( int? id ) { var dbAlbum = await _context . Albums . FindAsync ( id ); return dbAlbum ; } public async Task < Album > Add ( Album newAlbum ) { await _context . Albums . AddAsync ( newAlbum ); await _context . SaveChangesAsync (); return newAlbum ; } public async Task < bool > Update ( Album album ) { if (! await AlbumExists ( album . Id )) return false ; _context . Albums . Update ( album ); await _context . SaveChangesAsync (); return true ; } public async Task < bool > Delete ( int id ) { if (! await AlbumExists ( id )) return false ; var toRemove = await _context . Albums . FindAsync ( id ); _context . Albums . Remove ( toRemove ); await _context . SaveChangesAsync (); return true ; } public async Task < List < Album >> GetByArtistId ( int id ) => await _context . Albums . Where ( a => a . ArtistId == id ). AsNoTrackingWithIdentityResolution (). ToListAsync (); } }","title":"ADD REPOSITORIES TO DATA"},{"location":"Standing%20Up%20an%20ASP.NET%20Core%20Web%20API/ntier-data-access/#add-dbcontext-to-dependancy-injection-in-api-project","text":"public static IServiceCollection AddConnectionProvider ( this IServiceCollection services , IConfiguration configuration ) { var connection = String . Empty ; if ( RuntimeInformation . IsOSPlatform ( OSPlatform . Windows )) { connection = configuration . GetConnectionString ( \"ChinookDbWindows\" ) ?? \"Server=.;Database=Chinook;Trusted_Connection=True;Application Name=ChinookASPNETCoreAPINTier\" ; } else if ( RuntimeInformation . IsOSPlatform ( OSPlatform . Linux ) || RuntimeInformation . IsOSPlatform ( OSPlatform . OSX )) { connection = configuration . GetConnectionString ( \"ChinookDbDocker\" ) ?? \"Server=localhost,1433;Database=Chinook;User=sa;Password=P@55w0rd;Trusted_Connection=False;Application Name=ChinookASPNETCoreAPINTier\" ; } services . AddDbContextPool < ChinookContext >( options => options . UseSqlServer ( connection )); return services ; }","title":"ADD DBCONTEXT TO DEPENDANCY INJECTION IN API PROJECT"},{"location":"Standing%20Up%20an%20ASP.NET%20Core%20Web%20API/ntier-data-access/#remove-onconfiguring-from-dbcontext","text":"","title":"REMOVE ONCONFIGURING() FROM DBCONTEXT"},{"location":"Standing%20Up%20an%20ASP.NET%20Core%20Web%20API/ntier-data-access/#remove-the-dbcontext-constructor-wo-a-parameter","text":"","title":"REMOVE THE DBCONTEXT CONSTRUCTOR W/O A PARAMETER"},{"location":"Standing%20Up%20an%20ASP.NET%20Core%20Web%20API/versioning/","text":"Versioning your Web API \u00b6","title":"Versioning your Web API"},{"location":"Standing%20Up%20an%20ASP.NET%20Core%20Web%20API/versioning/#versioning-your-web-api","text":"","title":"Versioning your Web API"},{"location":"Standing%20Up%20an%20ASP.NET%20Core%20Web%20API/your-first-aspnet-core-web-api/","text":"Your First ASP.NET 5 Web API \u00b6 Create a new ASP.NET Core Web API solution and project \u00b6 Configure the Solution and API Project for Workshop \u00b6 Solution name is ChinookASPNETWebAPI Project name is ChinookASPNETWebAPI.API Set Details for the Solution and API Project \u00b6 Target Framework is .NET 5.0 Authentication Type is None Set Configure for HTTPS to True Set Enable Docker to False Set Enable OpenAPI support to False A View of the Solution and API Project \u00b6 Results when you run the API Project \u00b6 Note -- I use a JSON Formatter in Chrome to make the Results look good. Delete the Existing Files in API Project \u00b6 Delete the following files in API project: * WeatherForcastController.cs * WeatherForcast.cs","title":"Your first ASP.NET Core Web API"},{"location":"Standing%20Up%20an%20ASP.NET%20Core%20Web%20API/your-first-aspnet-core-web-api/#your-first-aspnet-5-web-api","text":"","title":"Your First ASP.NET 5 Web API"},{"location":"Standing%20Up%20an%20ASP.NET%20Core%20Web%20API/your-first-aspnet-core-web-api/#create-a-new-aspnet-core-web-api-solution-and-project","text":"","title":"Create a new ASP.NET Core Web API solution and project"},{"location":"Standing%20Up%20an%20ASP.NET%20Core%20Web%20API/your-first-aspnet-core-web-api/#configure-the-solution-and-api-project-for-workshop","text":"Solution name is ChinookASPNETWebAPI Project name is ChinookASPNETWebAPI.API","title":"Configure the Solution and API Project for Workshop"},{"location":"Standing%20Up%20an%20ASP.NET%20Core%20Web%20API/your-first-aspnet-core-web-api/#set-details-for-the-solution-and-api-project","text":"Target Framework is .NET 5.0 Authentication Type is None Set Configure for HTTPS to True Set Enable Docker to False Set Enable OpenAPI support to False","title":"Set Details for the Solution and API Project"},{"location":"Standing%20Up%20an%20ASP.NET%20Core%20Web%20API/your-first-aspnet-core-web-api/#a-view-of-the-solution-and-api-project","text":"","title":"A View of the Solution and API Project"},{"location":"Standing%20Up%20an%20ASP.NET%20Core%20Web%20API/your-first-aspnet-core-web-api/#results-when-you-run-the-api-project","text":"Note -- I use a JSON Formatter in Chrome to make the Results look good.","title":"Results when you run the API Project"},{"location":"Standing%20Up%20an%20ASP.NET%20Core%20Web%20API/your-first-aspnet-core-web-api/#delete-the-existing-files-in-api-project","text":"Delete the following files in API project: * WeatherForcastController.cs * WeatherForcast.cs","title":"Delete the Existing Files in API Project"},{"location":"Testing%20Your%20AP/integration-testing/","text":"Creating and using Integrating Testing for your API \u00b6","title":"Creating and using Integrating Testing for your API"},{"location":"Testing%20Your%20AP/integration-testing/#creating-and-using-integrating-testing-for-your-api","text":"","title":"Creating and using Integrating Testing for your API"},{"location":"Testing%20Your%20AP/unit-testing/","text":"Creating and using Unit Testing for your API \u00b6","title":"Creating and using Unit Testing for your API"},{"location":"Testing%20Your%20AP/unit-testing/#creating-and-using-unit-testing-for-your-api","text":"","title":"Creating and using Unit Testing for your API"}]}